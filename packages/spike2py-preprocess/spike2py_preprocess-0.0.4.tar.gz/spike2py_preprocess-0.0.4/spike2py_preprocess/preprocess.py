import sys
import json
from pathlib import Path
from typing import Union
from dataclasses import dataclass

from rich import print

from spike2py.trial import Trial, TrialInfo


STUDY_INFO_FILE = "study_info.json"
SUBJECT_INFO_FILE = "subject_info.json"
STUDY_PREPROCESS_FILE = "study_preprocess.json"
SUBJECT_PREPROCESS_FILE = "subject_preprocess.json"


@dataclass
class SubjectPaths:
    """Dataclass with various paths for participant.

    The class is initialised with SubjectPaths(home=<path>).
    The other related paths are generated by the create() method."""

    home: Path
    raw: Path = ""
    proc: Path = ""
    figures: Path = ""

    def create(self):
        self.raw = self.home / "raw"
        self.proc = self.home / "proc"
        self.figures = self.home / "figures"


def read_json(json_path: Path, strict: bool = True) -> Union[dict, None]:
    """
    Read json file and return its content.

    If strict=True and file not found, program will stop.
    If strict=False and file note found, program will continue.

    Parameters
    ----------
    json_path
        Full-path to json file
    strict
        Set behaviour if file not found

    Raises
    ------
    FileNotFoundError

    Returns
    -------
    dict
        Content of json file.
    None
        When file not found and strict=False.
    """
    try:
        with open(json_path, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        message = f"{json_path} does not exist."
        print(message)
        if strict:
            sys.exit(1)
        return


def trial_from_command_line(trial_info_json: str):
    trial_info_dict = read_json(trial_info_json)
    trial_info_dict["file"] = Path(trial_info_dict["file"])
    trial_info_dict["path_save_trial"] = Path(trial_info_dict["path_save_trial"])
    trial_info = TrialInfo(**trial_info_dict)
    trial(trial_info)


def trial(trial_info: TrialInfo, preprocess_info: Union[dict, None] = None):
    """
    Read, preprocess (if required) and pickle trial data.

    Parameters
    ----------
    trial_info: TrialInfo
        Instance of spike2py TrialInfo with info required to load data
    preprocess_info: dict | None
        If provided, details of what channels to preprocess and how to process them.
        Example:
        {"Fdi": {
            "remove_mean": "",
            "lowpass": "cutoff=100"}
        }
    """
    preprocess_file = trial_info.file.parent / f"preprocess_{trial_info.file.stem}.json"
    preprocess_info = _get_preprocess_info(preprocess_file, preprocess_info)
    data = _get_data(trial_info)
    if preprocess_info is not None:
        data = _preprocess_trial(data, preprocess_info)
        print(f"\t\tPreprocessing {data.info.name}")
    print(f"\t\tSaving {data.info.name}.pkl")
    data.save()


def _get_preprocess_info(preprocess_file, preprocess_info=None):
    if preprocess_file.exists():
        return read_json(preprocess_file)
    else:
        return preprocess_info


def _get_data(trial_info):
    try:
        data = Trial(trial_info)
    except FileNotFoundError:
        print(f"Unable to read {trial_info.file}. Please make sure it exists.")
        sys.exit(1)
    return data


def _preprocess_trial(data, preprocess_info):
    """Preprocess each channel specified in preprocess_info.

    Each preprocessing step is specified with relevant arguments;
    these are applied to the relevant channels."""
    for channel, preprocesses in preprocess_info.items():
        for preprocess_name, preprocess_arguments in preprocesses.items():
            try:
                exec(f"data.{channel}.{preprocess_name}({preprocess_arguments})")
            except AttributeError:
                print(
                    f"Following spike2py data does not have requested attribute: \n"
                    f"\tdata.{channel}.{preprocess_name}({preprocess_arguments})\n"
                    f"{data.info.name}"
                )
                sys.exit(1)
    return data


def subject_from_command_line(subject_path):
    subject(Path(subject_path))


def subject(
    subject_path: Path,
    preprocess_info: Union[dict, None] = None,
    study_info: Union[dict, None] = None,
):
    """
    Preprocess all trials for a given subject.

    Parameters
    ----------
    subject_path: Path
        Absolute path to subject home/root folder (e.g. 'sub01').
        Data to be preprocess located in 'raw' subfolder (i.e. 'sub01/raw')
    preprocess_info: dict | None
        Provided when this function is used to process subject data as part of a study pipeline.
        Will be replaced with subject level or trial level preprocessing info if provided.
        If no study-wide preprocessing requested, value will be None
    study_info: dict | None
        Provided when function used to process subject data as part of a study pipeline.
        Used to determine which channels to keep.
        Will be replaced with subject level or trial level channel specification if provided.

    """
    paths = _gen_subject_paths(subject_path)
    subject_info = read_json(paths.home / SUBJECT_INFO_FILE)
    preprocess_info = _get_subject_preprocess_info(paths, preprocess_info)
    print(f"\tProcessing {subject_info['subject_id']}")
    _preprocess_subject_trials(paths, subject_info, preprocess_info, study_info)


def _gen_subject_paths(subject_path):
    paths = SubjectPaths(home=subject_path)
    paths.create()
    return paths


def _get_subject_preprocess_info(
    paths: SubjectPaths, preprocess_info: Union[dict, None]
):
    preprocess_file = paths.home / SUBJECT_PREPROCESS_FILE
    info = _get_preprocess_info(preprocess_file, preprocess_info)
    return info


def _preprocess_subject_trials(paths, subject_info, preprocess_info, study_info):
    for trial_ in subject_info["trials"].values():
        channels = _get_channels(trial_, study_info)
        trial_info = TrialInfo(
            file=paths.raw / trial_["file"],
            channels=channels,
            name=trial_["name"],
            subject_id=paths.home.name,
            path_save_trial=paths.proc,
        )
        trial(trial_info, preprocess_info)


def _get_channels(trial_, study_info):
    """Get which channels to extract.

    When processing data for a subject (alone, not as part of study),
    look to see if the channels to extract are specified. If not,
    return None, which means all available channels will be outputed.
    When processing data for an entire study and there is no channels
    specified in trial_ (which comes from subject_info.json), then
    look to see of channels specified in study_info; if yes, use;
    if no, return None and use all channels.
    """
    channels = trial_.get("channels")
    if channels is None and study_info is not None:
        channels = study_info.get("channels")
    return channels


def study_from_command_line(study_path: str):
    study(Path(study_path))


def study(study_path):
    study_info = _get_study_info(study_path)
    print(f'Processing study: {study_info["name"]}')
    preprocess_info = _get_preprocess_info(study_path / STUDY_PREPROCESS_FILE)
    _process_study_subjects(study_path, study_info, preprocess_info)


def _get_study_info(study_path):
    study_info = read_json(study_path / STUDY_INFO_FILE)
    return study_info


def _process_study_subjects(study_path, study_info, preprocess_info):
    for subject_ in study_info["subjects"]:
        subject(study_path / subject_, preprocess_info, study_info)
