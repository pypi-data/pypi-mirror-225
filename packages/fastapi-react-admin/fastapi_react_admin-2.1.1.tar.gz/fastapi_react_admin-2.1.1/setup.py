# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fastapi_react_admin']

package_data = \
{'': ['*']}

install_requires = \
['fastapi>=0.95,<0.96', 'sqlalchemy>=2.0,<2.1']

setup_kwargs = {
    'name': 'fastapi-react-admin',
    'version': '2.1.1',
    'description': 'Module to automaticly generate fastapi routes for using react admin',
    'long_description': '# FastAPI React Admin\n\nThis module provides a class ReactAdmin that allows for the automatic generation of routes for React Admin in a FastAPI application.\n\n## Installation\n```console\npip install fastapi-react-admin\n```\n\n## Base usage\n\nFatstAPI part: \n```python\nfrom fastapi import FastAPI\n\nfrom schemas import MyTableModel\nfrom fastapi_react_admin import ReactAdmin\n\napp = FastAPI()\nrouter = app.router\nSession = async_sessionmaker(AsyncSession)\n\nReactAdmin(\n    table=MyTableModel,  \n    session=Session\n).mount(router)\n```\n\nReact Admin data provider:\n```js\nexport const sendPost = async (resource: string, method: string, body?: any) => {\n    const response = await axios({\n        method: \'post\',\n        url: resource + "/ra" + method,\n        data: body,\n        headers: {\n            "Admin-Token": sessionStorage.getItem(\'token\')\n        }\n    })\n\n    return response.data\n}\n\nconst dataProvider: DataProvider = {\n    getList: (resource: string, params: any) => {\n        const { page, perPage } = params.pagination\n        const { field, order } = params.sort\n\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range_: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        }\n\n        return sendPost(resource, `/getList?${queryString.stringify(query)}`)\n    },\n\n    getOne: async (resource: string, params: any) => {\n        return await sendPost(resource, \'/getOne/\' + params.id)\n    },\n\n    getMany: (resource: string, params: any) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        }\n\n        return sendPost(resource, `/getMany?${queryString.stringify(query)}`)\n    },\n\n    getManyReference: (resource: string, params: any): any => {\n        const { page, perPage } = params.pagination\n        const { field, order } = params.sort\n\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range_: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        }\n\n        return sendPost(params.target, `/getList?${queryString.stringify(query)}`)\n    },\n\n    create: async (resource: string, params: any) => {\n        return await sendPost(resource, \'/create\', { \n            ...params.data\n        })\n    },\n\n    update: async (resource: string, params: any) => {\n        return await sendPost(resource, \'/update/\' + params.id, params.data)\n    },\n\n    updateMany: async (resource: string, params: any) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        }\n\n        return await sendPost(resource, `/updateMany?${queryString.stringify(query)}`, params.data)\n    },\n\n    delete: (resource: string, params: any) => {\n        return sendPost(resource, \'/delete/\' + params.id)\n    },\n\n    deleteMany: (resource: string, params: any) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        }\n\n        return sendPost(resource, `/deleteMany?${queryString.stringify(query)}` )\n    },\n}\n\n```\n\n\n### ReactAdmin class params\n- table (required): The SQLAlchemy model representing the database table.\n\n- session (required): The async_sessionmaker[AsyncSession] for the database session.\n\n- deleted_field (optional): The name of the field of the table to mark deleted fields (e.g., \'is_deleted\'). Default is None.\n\n- exclude_deleted (optional): Whether to exclude deleted records. Default is True.\n\n- options (optional): The list of ExecutableOption of the sqlalchemy. Default is [].\n\n- include_in_schema (optional): Whether to include the routes in the generated schema. Default is False.\n\n### ReactAdmin mount params\n- router (required): The APIRouter instance to mount the routes.\n\n- depends (optional): The sequence of the dependencies\n\n- prefix (optional): The URL prefix for the React Admin routes. Default is \'/ra\'.\n\n- tags (optional): The FastAPI tags.\n\n- include_* (optional): The params to include/exclude specific route. (For example: include_create=false)\n\n### Route Endpoints\nThe following routes are automatically generated by the `ReactAdmin` class:\n\n- POST /ra/getList: Get a list of records from the table. Accepts JSON payload with sort, filter, and range parameters.\n- POST /ra/getOne/{id}: Get a single record by ID.\n- POST /ra/getMany/{id}: Get multiple records by ID. Accepts JSON payload with id parameter.\n- POST /ra/create: Create a new record. Accepts JSON payload with the record data.\n- POST /ra/update/{id}: Update a record by ID. Accepts JSON payload with the updated data.\n- POST /ra/updateMany: Update multiple records. Accepts JSON payload with id parameter and updated data.\n- POST /ra/delete/{id}: Delete a record by ID.\n- POST /ra/deleteMany: Delete multiple records. Accepts JSON payload with id parameter.\n\n### Response Format\nThe response format for all routes is a JSON object with a data field. The data field contains the response data.',
    'author': 'Enveloss',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
