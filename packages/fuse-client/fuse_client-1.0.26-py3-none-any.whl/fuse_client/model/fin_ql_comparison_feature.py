# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinQLComparisonFeature(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def merchant_a() -> typing.Type['Merchant']:
                return Merchant
        
            @staticmethod
            def merchant_b() -> typing.Type['Merchant']:
                return Merchant
            comparison_metric = schemas.StrSchema
            value_a = schemas.StrSchema
            value_b = schemas.StrSchema
            __annotations__ = {
                "merchant_a": merchant_a,
                "merchant_b": merchant_b,
                "comparison_metric": comparison_metric,
                "value_a": value_a,
                "value_b": value_b,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_a"]) -> 'Merchant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_b"]) -> 'Merchant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comparison_metric"]) -> MetaOapg.properties.comparison_metric: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value_a"]) -> MetaOapg.properties.value_a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value_b"]) -> MetaOapg.properties.value_b: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchant_a", "merchant_b", "comparison_metric", "value_a", "value_b", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_a"]) -> typing.Union['Merchant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_b"]) -> typing.Union['Merchant', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comparison_metric"]) -> typing.Union[MetaOapg.properties.comparison_metric, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value_a"]) -> typing.Union[MetaOapg.properties.value_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value_b"]) -> typing.Union[MetaOapg.properties.value_b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchant_a", "merchant_b", "comparison_metric", "value_a", "value_b", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        merchant_a: typing.Union['Merchant', schemas.Unset] = schemas.unset,
        merchant_b: typing.Union['Merchant', schemas.Unset] = schemas.unset,
        comparison_metric: typing.Union[MetaOapg.properties.comparison_metric, str, schemas.Unset] = schemas.unset,
        value_a: typing.Union[MetaOapg.properties.value_a, str, schemas.Unset] = schemas.unset,
        value_b: typing.Union[MetaOapg.properties.value_b, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinQLComparisonFeature':
        return super().__new__(
            cls,
            *_args,
            merchant_a=merchant_a,
            merchant_b=merchant_b,
            comparison_metric=comparison_metric,
            value_a=value_a,
            value_b=value_b,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.merchant import Merchant
