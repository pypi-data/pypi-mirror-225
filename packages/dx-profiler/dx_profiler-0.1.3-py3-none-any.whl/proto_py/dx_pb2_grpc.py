# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto_py.dx_pb2 as dx__pb2


class DetectorStub(object):
    """DX API Serivce

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddInference = channel.unary_unary(
                '/autocare.Detector/AddInference',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceRes.FromString,
                )
        self.RemoveInference = channel.unary_unary(
                '/autocare.Detector/RemoveInference',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceRes.FromString,
                )
        self.RemoveInferenceAll = channel.unary_unary(
                '/autocare.Detector/RemoveInferenceAll',
                request_serializer=dx__pb2.AppReq.SerializeToString,
                response_deserializer=dx__pb2.AppRes.FromString,
                )
        self.UpdateInference = channel.unary_unary(
                '/autocare.Detector/UpdateInference',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceRes.FromString,
                )
        self.InstallApp = channel.stream_unary(
                '/autocare.Detector/InstallApp',
                request_serializer=dx__pb2.AppReq.SerializeToString,
                response_deserializer=dx__pb2.AppRes.FromString,
                )
        self.UninstallApp = channel.unary_unary(
                '/autocare.Detector/UninstallApp',
                request_serializer=dx__pb2.AppReq.SerializeToString,
                response_deserializer=dx__pb2.AppRes.FromString,
                )
        self.GetAppList = channel.unary_unary(
                '/autocare.Detector/GetAppList',
                request_serializer=dx__pb2.AppReq.SerializeToString,
                response_deserializer=dx__pb2.AppList.FromString,
                )
        self.GetInferenceList = channel.unary_unary(
                '/autocare.Detector/GetInferenceList',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceList.FromString,
                )
        self.GetInferenceStatus = channel.unary_unary(
                '/autocare.Detector/GetInferenceStatus',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceRes.FromString,
                )
        self.GetInferenceStatusAll = channel.unary_unary(
                '/autocare.Detector/GetInferenceStatusAll',
                request_serializer=dx__pb2.AppReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceResList.FromString,
                )
        self.RequestPreviewImage = channel.unary_unary(
                '/autocare.Detector/RequestPreviewImage',
                request_serializer=dx__pb2.InferenceReq.SerializeToString,
                response_deserializer=dx__pb2.InferenceRes.FromString,
                )
        self.LicenseActivation = channel.unary_unary(
                '/autocare.Detector/LicenseActivation',
                request_serializer=dx__pb2.LicReq.SerializeToString,
                response_deserializer=dx__pb2.LicRes.FromString,
                )
        self.LicenseDeactivation = channel.unary_unary(
                '/autocare.Detector/LicenseDeactivation',
                request_serializer=dx__pb2.LicReq.SerializeToString,
                response_deserializer=dx__pb2.LicRes.FromString,
                )
        self.LicenseActivate = channel.unary_unary(
                '/autocare.Detector/LicenseActivate',
                request_serializer=dx__pb2.LicReq.SerializeToString,
                response_deserializer=dx__pb2.LicRes.FromString,
                )
        self.StartStreaming = channel.unary_unary(
                '/autocare.Detector/StartStreaming',
                request_serializer=dx__pb2.StreamingReq.SerializeToString,
                response_deserializer=dx__pb2.StreamingRes.FromString,
                )
        self.StopStreaming = channel.unary_unary(
                '/autocare.Detector/StopStreaming',
                request_serializer=dx__pb2.StreamingReq.SerializeToString,
                response_deserializer=dx__pb2.StreamingRes.FromString,
                )
        self.GetDx = channel.unary_unary(
                '/autocare.Detector/GetDx',
                request_serializer=dx__pb2.Empty.SerializeToString,
                response_deserializer=dx__pb2.Dx.FromString,
                )


class DetectorServicer(object):
    """DX API Serivce

    """

    def AddInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInferenceAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InstallApp(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UninstallApp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInferenceList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInferenceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInferenceStatusAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestPreviewImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LicenseActivation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LicenseDeactivation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LicenseActivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddInference': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInference,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceRes.SerializeToString,
            ),
            'RemoveInference': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInference,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceRes.SerializeToString,
            ),
            'RemoveInferenceAll': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInferenceAll,
                    request_deserializer=dx__pb2.AppReq.FromString,
                    response_serializer=dx__pb2.AppRes.SerializeToString,
            ),
            'UpdateInference': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInference,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceRes.SerializeToString,
            ),
            'InstallApp': grpc.stream_unary_rpc_method_handler(
                    servicer.InstallApp,
                    request_deserializer=dx__pb2.AppReq.FromString,
                    response_serializer=dx__pb2.AppRes.SerializeToString,
            ),
            'UninstallApp': grpc.unary_unary_rpc_method_handler(
                    servicer.UninstallApp,
                    request_deserializer=dx__pb2.AppReq.FromString,
                    response_serializer=dx__pb2.AppRes.SerializeToString,
            ),
            'GetAppList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppList,
                    request_deserializer=dx__pb2.AppReq.FromString,
                    response_serializer=dx__pb2.AppList.SerializeToString,
            ),
            'GetInferenceList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInferenceList,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceList.SerializeToString,
            ),
            'GetInferenceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInferenceStatus,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceRes.SerializeToString,
            ),
            'GetInferenceStatusAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInferenceStatusAll,
                    request_deserializer=dx__pb2.AppReq.FromString,
                    response_serializer=dx__pb2.InferenceResList.SerializeToString,
            ),
            'RequestPreviewImage': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestPreviewImage,
                    request_deserializer=dx__pb2.InferenceReq.FromString,
                    response_serializer=dx__pb2.InferenceRes.SerializeToString,
            ),
            'LicenseActivation': grpc.unary_unary_rpc_method_handler(
                    servicer.LicenseActivation,
                    request_deserializer=dx__pb2.LicReq.FromString,
                    response_serializer=dx__pb2.LicRes.SerializeToString,
            ),
            'LicenseDeactivation': grpc.unary_unary_rpc_method_handler(
                    servicer.LicenseDeactivation,
                    request_deserializer=dx__pb2.LicReq.FromString,
                    response_serializer=dx__pb2.LicRes.SerializeToString,
            ),
            'LicenseActivate': grpc.unary_unary_rpc_method_handler(
                    servicer.LicenseActivate,
                    request_deserializer=dx__pb2.LicReq.FromString,
                    response_serializer=dx__pb2.LicRes.SerializeToString,
            ),
            'StartStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStreaming,
                    request_deserializer=dx__pb2.StreamingReq.FromString,
                    response_serializer=dx__pb2.StreamingRes.SerializeToString,
            ),
            'StopStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.StopStreaming,
                    request_deserializer=dx__pb2.StreamingReq.FromString,
                    response_serializer=dx__pb2.StreamingRes.SerializeToString,
            ),
            'GetDx': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDx,
                    request_deserializer=dx__pb2.Empty.FromString,
                    response_serializer=dx__pb2.Dx.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autocare.Detector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Detector(object):
    """DX API Serivce

    """

    @staticmethod
    def AddInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/AddInference',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/RemoveInference',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInferenceAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/RemoveInferenceAll',
            dx__pb2.AppReq.SerializeToString,
            dx__pb2.AppRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/UpdateInference',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InstallApp(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/autocare.Detector/InstallApp',
            dx__pb2.AppReq.SerializeToString,
            dx__pb2.AppRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UninstallApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/UninstallApp',
            dx__pb2.AppReq.SerializeToString,
            dx__pb2.AppRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/GetAppList',
            dx__pb2.AppReq.SerializeToString,
            dx__pb2.AppList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInferenceList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/GetInferenceList',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInferenceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/GetInferenceStatus',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInferenceStatusAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/GetInferenceStatusAll',
            dx__pb2.AppReq.SerializeToString,
            dx__pb2.InferenceResList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestPreviewImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/RequestPreviewImage',
            dx__pb2.InferenceReq.SerializeToString,
            dx__pb2.InferenceRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LicenseActivation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/LicenseActivation',
            dx__pb2.LicReq.SerializeToString,
            dx__pb2.LicRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LicenseDeactivation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/LicenseDeactivation',
            dx__pb2.LicReq.SerializeToString,
            dx__pb2.LicRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LicenseActivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/LicenseActivate',
            dx__pb2.LicReq.SerializeToString,
            dx__pb2.LicRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/StartStreaming',
            dx__pb2.StreamingReq.SerializeToString,
            dx__pb2.StreamingRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/StopStreaming',
            dx__pb2.StreamingReq.SerializeToString,
            dx__pb2.StreamingRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autocare.Detector/GetDx',
            dx__pb2.Empty.SerializeToString,
            dx__pb2.Dx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
