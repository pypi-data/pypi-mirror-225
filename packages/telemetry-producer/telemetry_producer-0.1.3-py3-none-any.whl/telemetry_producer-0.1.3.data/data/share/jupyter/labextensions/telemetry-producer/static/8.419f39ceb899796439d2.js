"use strict";(self.webpackChunktelemetry_producer=self.webpackChunktelemetry_producer||[]).push([[8],{8:(e,t,n)=>{n.r(t),n.d(t,{default:()=>N});var i=n(212),o=n(876),s=n(519),c=n(380);async function l(e="",t={}){const n=c.ServerConnection.makeSettings(),i=s.URLExt.join(n.baseUrl,"telemetry-producer",e);let o;try{o=await c.ServerConnection.makeRequest(i,t,n)}catch(e){throw new c.ServerConnection.NetworkError(e)}let l=await o.text();if(l.length>0)try{l=JSON.parse(l)}catch(e){console.log("Not a JSON response body.",o)}if(!o.ok)throw new c.ServerConnection.ResponseError(o,l.message||l);return l}class a{constructor(){this.produced=!1}async listen(e,t,n){if(!this.produced){const e={eventName:a.id,eventTime:Date.now(),environ:await l("environ")};await t.publishEvent(e,n),this.produced=!0}}}a.id="NotebookOpenEvent";const d=e=>{const t=[];for(let n=0;n<e.content.widgets.length;n++){const i=e.content.widgets[n],o=i.node.offsetTop,s=i.node.offsetTop+i.node.offsetHeight,c=e.content.node.scrollTop;o<=e.content.node.scrollTop+e.content.node.clientHeight&&s>=c&&t.push({id:i.model.id,index:n})}return t};class v{constructor(){this.timeout=0}listen(e,t,n){e.content.node.addEventListener("scroll",(async i=>{i.stopPropagation(),clearTimeout(this.timeout),await new Promise((e=>this.timeout=setTimeout(e,1500)));const o={eventName:v.id,eventTime:Date.now(),cells:d(e)};await t.publishEvent(o,n)}))}}v.id="NotebookScrollEvent";class r{listen(e,t,n){document.addEventListener("visibilitychange",(async()=>{if("visible"===document.visibilityState){const i={eventName:r.id,eventTime:Date.now(),cells:d(e)};await t.publishEvent(i,n)}}))}}r.id="NotebookVisibleEvent";class u{listen(e,t,n){document.addEventListener("visibilitychange",(async e=>{if("hidden"===document.visibilityState){const e={eventName:u.id,eventTime:Date.now()};await t.publishEvent(e,n)}}))}}u.id="NotebookHiddenEvent";class m{listen(e,t,n){e.node.addEventListener("copy",(async()=>{var i,o;const s={id:null===(i=e.content.activeCell)||void 0===i?void 0:i.model.id,index:e.content.widgets.findIndex((t=>t===e.content.activeCell))},c=null===(o=document.getSelection())||void 0===o?void 0:o.toString(),l={eventName:m.id,eventTime:Date.now(),cells:[s],selection:c};await t.publishEvent(l,n)}))}}m.id="ClipboardCopyEvent";class w{listen(e,t,n){e.node.addEventListener("cut",(async()=>{var i,o;const s={id:null===(i=e.content.activeCell)||void 0===i?void 0:i.model.id,index:e.content.widgets.findIndex((t=>t===e.content.activeCell))},c=null===(o=document.getSelection())||void 0===o?void 0:o.toString(),l={eventName:w.id,eventTime:Date.now(),cells:[s],selection:c};await t.publishEvent(l,n)}))}}w.id="ClipboardCutEvent";class p{listen(e,t,n){e.node.addEventListener("paste",(async i=>{var o;const s={id:null===(o=e.content.activeCell)||void 0===o?void 0:o.model.id,index:e.content.widgets.findIndex((t=>t===e.content.activeCell))},c=(i.clipboardData||window.clipboardData).getData("text"),l={eventName:p.id,eventTime:Date.now(),cells:[s],selection:c};await t.publishEvent(l,n)}))}}p.id="ClipboardPasteEvent";class h{listen(e,t,n){e.content.activeCellChanged.connect((async(i,o)=>{if(o&&e.content.widgets){const i={id:null==o?void 0:o.model.id,index:e.content.widgets.findIndex((e=>e===o))},s={eventName:h.id,eventTime:Date.now(),cells:[i]};await t.publishEvent(s,n)}}))}}h.id="ActiveCellChangeEvent";class E{listen(e,t,n){e.context.saveState.connect((async(e,i)=>{if(i.match("completed")){const e={eventName:E.id,eventTime:Date.now()};await t.publishEvent(e,n)}}))}}E.id="NotebookSaveEvent";class b{listen(e,t,n){i.NotebookActions.executed.connect((async(e,i)=>{const o={id:i.cell.model.id,index:i.notebook.widgets.findIndex((e=>e==i.cell))},s={eventName:b.id,eventTime:Date.now(),cells:[o],success:i.success,kernelError:i.success?null:i.error};await t.publishEvent(s,n)}))}}b.id="CellExecuteEvent";class g{listen(e,t,n){var i;null===(i=e.content.model)||void 0===i||i.cells.changed.connect((async(e,i)=>{if("add"===i.type){const e={id:i.newValues[0].id,index:i.newIndex},o={eventName:g.id,eventTime:Date.now(),cells:[e]};await t.publishEvent(o,n)}}))}}g.id="CellAddEvent";class y{listen(e,t,n){var i;null===(i=e.content.model)||void 0===i||i.cells.changed.connect((async(e,i)=>{if("remove"===i.type){const e={id:i.oldValues[0].id,index:i.oldIndex},o={eventName:y.id,eventTime:Date.now(),cells:[e]};await t.publishEvent(o,n)}}))}}y.id="CellRemoveEvent";const f=[a,v,r,u,m,w,p,h,E,b,g,y],C="telemetry-producer:plugin",N={id:C,autoStart:!0,requires:[o.ITelemetryRouter,i.INotebookTracker],activate:async(e,t,n)=>{const i=await l("version");console.log(`${C}: ${i}`);const o=await l("config");n.widgetAdded.connect((async(e,n)=>{await n.sessionContext.ready,await t.loadNotebookPanel(n),f.forEach((e=>{o.activeEvents.includes(e.id)&&(new e).listen(n,t,o.logNotebookContentEvents.includes(e.id))}))}))}}}}]);