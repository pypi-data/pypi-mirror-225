# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from fice_client.models.device_config import DeviceConfig

class Device(BaseModel):
    """
    Device
    """
    id: Optional[StrictStr] = None
    hostname: constr(strict=True) = Field(...)
    ipaddress: Optional[StrictStr] = None
    platform: Optional[StrictStr] = None
    firmware: Optional[StrictStr] = None
    configs: Optional[conlist(DeviceConfig)] = None
    __properties = ["id", "hostname", "ipaddress", "platform", "firmware", "configs"]

    @validator('hostname')
    def hostname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{2,255}$", value):
            raise ValueError(r"must validate the regular expression /^.{2,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Device:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item in self.configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Device:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Device.parse_obj(obj)

        _obj = Device.parse_obj({
            "id": obj.get("id"),
            "hostname": obj.get("hostname"),
            "ipaddress": obj.get("ipaddress"),
            "platform": obj.get("platform"),
            "firmware": obj.get("firmware"),
            "configs": [DeviceConfig.from_dict(_item) for _item in obj.get("configs")] if obj.get("configs") is not None else None
        })
        return _obj


