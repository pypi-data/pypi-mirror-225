# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from fice_client.models.info import Info
from fice_client.models.outcome import Outcome

class ComplianceLog(BaseModel):
    """
    ComplianceLog
    """
    outcome: Outcome = Field(...)
    info: Info = Field(...)
    __properties = ["outcome", "info"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComplianceLog:
        """Create an instance of ComplianceLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComplianceLog:
        """Create an instance of ComplianceLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComplianceLog.parse_obj(obj)

        _obj = ComplianceLog.parse_obj({
            "outcome": obj.get("outcome"),
            "info": Info.from_dict(obj.get("info")) if obj.get("info") is not None else None
        })
        return _obj


