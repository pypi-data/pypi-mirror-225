# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from fice_client.models.code_rule_definition import CodeRuleDefinition
from fice_client.models.kind import Kind
from fice_client.models.severity import Severity
from fice_client.models.simple_rule import SimpleRule

class Rule(BaseModel):
    """
    Rule
    """
    name: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    ruleset: Optional[StrictStr] = 'default'
    kind: Optional[Kind] = None
    platform: Optional[conlist(StrictStr)] = None
    severity: Optional[Severity] = None
    command: Optional[StrictStr] = None
    simplified: Optional[SimpleRule] = None
    definition: Optional[CodeRuleDefinition] = None
    author: Optional[StrictStr] = None
    changed: Optional[datetime] = None
    __properties = ["name", "description", "ruleset", "kind", "platform", "severity", "command", "simplified", "definition", "author", "changed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Rule:
        """Create an instance of Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of simplified
        if self.simplified:
            _dict['simplified'] = self.simplified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Rule:
        """Create an instance of Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Rule.parse_obj(obj)

        _obj = Rule.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "ruleset": obj.get("ruleset") if obj.get("ruleset") is not None else 'default',
            "kind": obj.get("kind"),
            "platform": obj.get("platform"),
            "severity": obj.get("severity"),
            "command": obj.get("command"),
            "simplified": SimpleRule.from_dict(obj.get("simplified")) if obj.get("simplified") is not None else None,
            "definition": CodeRuleDefinition.from_dict(obj.get("definition")) if obj.get("definition") is not None else None,
            "author": obj.get("author"),
            "changed": obj.get("changed")
        })
        return _obj


