# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictInt, StrictStr, conlist

from typing import List, Optional

from fice_client.models.compliance_log import ComplianceLog
from fice_client.models.compliance_report import ComplianceReport
from fice_client.models.new_compliance_failure import NewComplianceFailure

from fice_client.api_client import ApiClient
from fice_client.api_response import ApiResponse
from fice_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ComplianceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_compliance_failures_api_v1_compliance_tenant_failures_get(self, tenant : StrictStr, **kwargs) -> List[NewComplianceFailure]:  # noqa: E501
        """Get Compliance Failures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compliance_failures_api_v1_compliance_tenant_failures_get(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[NewComplianceFailure]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_compliance_failures_api_v1_compliance_tenant_failures_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_compliance_failures_api_v1_compliance_tenant_failures_get_with_http_info(tenant, **kwargs)  # noqa: E501

    @validate_arguments
    def get_compliance_failures_api_v1_compliance_tenant_failures_get_with_http_info(self, tenant : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Compliance Failures  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compliance_failures_api_v1_compliance_tenant_failures_get_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[NewComplianceFailure], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compliance_failures_api_v1_compliance_tenant_failures_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[NewComplianceFailure]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/compliance/{tenant}/failures', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get(self, tenant : StrictStr, hostname : StrictStr, **kwargs) -> NewComplianceFailure:  # noqa: E501
        """Get Device Compliance Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get(tenant, hostname, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NewComplianceFailure
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get_with_http_info(tenant, hostname, **kwargs)  # noqa: E501

    @validate_arguments
    def get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get_with_http_info(self, tenant : StrictStr, hostname : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Device Compliance Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get_with_http_info(tenant, hostname, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NewComplianceFailure, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'hostname'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_compliance_status_api_v1_compliance_tenant_status_hostname_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['hostname']:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "NewComplianceFailure",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/compliance/{tenant}/status/{hostname}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def log_compliance_api_v1_compliance_tenant_log_config_id_post(self, tenant : StrictStr, config_id : StrictStr, compliance_log : ComplianceLog, final : Optional[StrictInt] = None, **kwargs) -> ComplianceReport:  # noqa: E501
        """Log Compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.log_compliance_api_v1_compliance_tenant_log_config_id_post(tenant, config_id, compliance_log, final, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param config_id: (required)
        :type config_id: str
        :param compliance_log: (required)
        :type compliance_log: ComplianceLog
        :param final:
        :type final: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ComplianceReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the log_compliance_api_v1_compliance_tenant_log_config_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.log_compliance_api_v1_compliance_tenant_log_config_id_post_with_http_info(tenant, config_id, compliance_log, final, **kwargs)  # noqa: E501

    @validate_arguments
    def log_compliance_api_v1_compliance_tenant_log_config_id_post_with_http_info(self, tenant : StrictStr, config_id : StrictStr, compliance_log : ComplianceLog, final : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Log Compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.log_compliance_api_v1_compliance_tenant_log_config_id_post_with_http_info(tenant, config_id, compliance_log, final, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param config_id: (required)
        :type config_id: str
        :param compliance_log: (required)
        :type compliance_log: ComplianceLog
        :param final:
        :type final: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ComplianceReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'config_id',
            'compliance_log',
            'final'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_compliance_api_v1_compliance_tenant_log_config_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['config_id']:
            _path_params['config_id'] = _params['config_id']


        # process the query parameters
        _query_params = []
        if _params.get('final') is not None:  # noqa: E501
            _query_params.append(('final', _params['final']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['compliance_log'] is not None:
            _body_params = _params['compliance_log']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '201': "ComplianceReport",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/compliance/{tenant}/log/{config_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def report_compliance_api_v1_compliance_tenant_report_config_id_post(self, tenant : StrictStr, config_id : StrictStr, compliance_log : conlist(ComplianceLog), **kwargs) -> ComplianceReport:  # noqa: E501
        """Report Compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_compliance_api_v1_compliance_tenant_report_config_id_post(tenant, config_id, compliance_log, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param config_id: (required)
        :type config_id: str
        :param compliance_log: (required)
        :type compliance_log: List[ComplianceLog]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ComplianceReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the report_compliance_api_v1_compliance_tenant_report_config_id_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.report_compliance_api_v1_compliance_tenant_report_config_id_post_with_http_info(tenant, config_id, compliance_log, **kwargs)  # noqa: E501

    @validate_arguments
    def report_compliance_api_v1_compliance_tenant_report_config_id_post_with_http_info(self, tenant : StrictStr, config_id : StrictStr, compliance_log : conlist(ComplianceLog), **kwargs) -> ApiResponse:  # noqa: E501
        """Report Compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_compliance_api_v1_compliance_tenant_report_config_id_post_with_http_info(tenant, config_id, compliance_log, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param config_id: (required)
        :type config_id: str
        :param compliance_log: (required)
        :type compliance_log: List[ComplianceLog]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ComplianceReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'config_id',
            'compliance_log'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_compliance_api_v1_compliance_tenant_report_config_id_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['config_id']:
            _path_params['config_id'] = _params['config_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['compliance_log'] is not None:
            _body_params = _params['compliance_log']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '201': "ComplianceReport",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/compliance/{tenant}/report/{config_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
