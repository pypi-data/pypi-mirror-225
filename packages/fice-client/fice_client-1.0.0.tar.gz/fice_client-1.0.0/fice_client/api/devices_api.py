# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictBytes, StrictInt, StrictStr, conlist

from typing import Any, Dict, List, Optional, Union

from fice_client.models.device import Device
from fice_client.models.device_config import DeviceConfig
from fice_client.models.new_device import NewDevice

from fice_client.api_client import ApiClient
from fice_client.api_response import ApiResponse
from fice_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DevicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_device_api_v1_devices_tenant_post(self, tenant : StrictStr, new_device : NewDevice, **kwargs) -> Device:  # noqa: E501
        """Create Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_device_api_v1_devices_tenant_post(tenant, new_device, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_device: (required)
        :type new_device: NewDevice
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Device
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_device_api_v1_devices_tenant_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_device_api_v1_devices_tenant_post_with_http_info(tenant, new_device, **kwargs)  # noqa: E501

    @validate_arguments
    def create_device_api_v1_devices_tenant_post_with_http_info(self, tenant : StrictStr, new_device : NewDevice, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_device_api_v1_devices_tenant_post_with_http_info(tenant, new_device, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_device: (required)
        :type new_device: NewDevice
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Device, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'new_device'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_api_v1_devices_tenant_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['new_device'] is not None:
            _body_params = _params['new_device']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '201': "Device",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def download_config_api_v1_devices_tenant_hostname_configs_config_id_get(self, tenant : StrictStr, hostname : StrictStr, config_id : StrictStr, **kwargs) -> object:  # noqa: E501
        """Download Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_config_api_v1_devices_tenant_hostname_configs_config_id_get(tenant, hostname, config_id, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param config_id: (required)
        :type config_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the download_config_api_v1_devices_tenant_hostname_configs_config_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.download_config_api_v1_devices_tenant_hostname_configs_config_id_get_with_http_info(tenant, hostname, config_id, **kwargs)  # noqa: E501

    @validate_arguments
    def download_config_api_v1_devices_tenant_hostname_configs_config_id_get_with_http_info(self, tenant : StrictStr, hostname : StrictStr, config_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_config_api_v1_devices_tenant_hostname_configs_config_id_get_with_http_info(tenant, hostname, config_id, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param config_id: (required)
        :type config_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'hostname',
            'config_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_config_api_v1_devices_tenant_hostname_configs_config_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['hostname']:
            _path_params['hostname'] = _params['hostname']

        if _params['config_id']:
            _path_params['config_id'] = _params['config_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/{hostname}/configs/{config_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_all_devices_api_v1_devices_tenant_get(self, tenant : StrictStr, max_configs : Optional[StrictInt] = None, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, **kwargs) -> List[Device]:  # noqa: E501
        """Get All Devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_devices_api_v1_devices_tenant_get(tenant, max_configs, page, page_size, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param max_configs:
        :type max_configs: int
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Device]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_all_devices_api_v1_devices_tenant_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_all_devices_api_v1_devices_tenant_get_with_http_info(tenant, max_configs, page, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_devices_api_v1_devices_tenant_get_with_http_info(self, tenant : StrictStr, max_configs : Optional[StrictInt] = None, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_devices_api_v1_devices_tenant_get_with_http_info(tenant, max_configs, page, page_size, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param max_configs:
        :type max_configs: int
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Device], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'max_configs',
            'page',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_devices_api_v1_devices_tenant_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        if _params.get('max_configs') is not None:  # noqa: E501
            _query_params.append(('max_configs', _params['max_configs']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Device]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_device_api_v1_devices_tenant_hostname_get(self, tenant : StrictStr, hostname : StrictStr, max_configs : Optional[StrictInt] = None, **kwargs) -> Device:  # noqa: E501
        """Get Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_api_v1_devices_tenant_hostname_get(tenant, hostname, max_configs, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param max_configs:
        :type max_configs: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Device
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_device_api_v1_devices_tenant_hostname_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_device_api_v1_devices_tenant_hostname_get_with_http_info(tenant, hostname, max_configs, **kwargs)  # noqa: E501

    @validate_arguments
    def get_device_api_v1_devices_tenant_hostname_get_with_http_info(self, tenant : StrictStr, hostname : StrictStr, max_configs : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_api_v1_devices_tenant_hostname_get_with_http_info(tenant, hostname, max_configs, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param max_configs:
        :type max_configs: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Device, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'hostname',
            'max_configs'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_api_v1_devices_tenant_hostname_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['hostname']:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        if _params.get('max_configs') is not None:  # noqa: E501
            _query_params.append(('max_configs', _params['max_configs']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "Device",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/{hostname}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_run_discovery_api_v1_devices_tenant_discover_get(self, tenant : StrictStr, **kwargs) -> Dict[str, str]:  # noqa: E501
        """Get Run Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_run_discovery_api_v1_devices_tenant_discover_get(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_run_discovery_api_v1_devices_tenant_discover_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_run_discovery_api_v1_devices_tenant_discover_get_with_http_info(tenant, **kwargs)  # noqa: E501

    @validate_arguments
    def get_run_discovery_api_v1_devices_tenant_discover_get_with_http_info(self, tenant : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Run Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_run_discovery_api_v1_devices_tenant_discover_get_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_discovery_api_v1_devices_tenant_discover_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "Dict[str, str]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/discover', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def process_device_discovery_api_v1_devices_tenant_post(self, tenant : StrictStr, new_device : conlist(NewDevice), **kwargs) -> List[Device]:  # noqa: E501
        """Process Device Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.process_device_discovery_api_v1_devices_tenant_post(tenant, new_device, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_device: (required)
        :type new_device: List[NewDevice]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Device]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the process_device_discovery_api_v1_devices_tenant_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.process_device_discovery_api_v1_devices_tenant_post_with_http_info(tenant, new_device, **kwargs)  # noqa: E501

    @validate_arguments
    def process_device_discovery_api_v1_devices_tenant_post_with_http_info(self, tenant : StrictStr, new_device : conlist(NewDevice), **kwargs) -> ApiResponse:  # noqa: E501
        """Process Device Discovery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.process_device_discovery_api_v1_devices_tenant_post_with_http_info(tenant, new_device, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_device: (required)
        :type new_device: List[NewDevice]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Device], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'new_device'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method process_device_discovery_api_v1_devices_tenant_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['new_device'] is not None:
            _body_params = _params['new_device']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Device]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def upload_config_api_v1_devices_tenant_hostname_configs_post(self, tenant : StrictStr, hostname : StrictStr, file : Union[StrictBytes, StrictStr], **kwargs) -> DeviceConfig:  # noqa: E501
        """Upload Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_config_api_v1_devices_tenant_hostname_configs_post(tenant, hostname, file, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param file: (required)
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceConfig
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the upload_config_api_v1_devices_tenant_hostname_configs_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.upload_config_api_v1_devices_tenant_hostname_configs_post_with_http_info(tenant, hostname, file, **kwargs)  # noqa: E501

    @validate_arguments
    def upload_config_api_v1_devices_tenant_hostname_configs_post_with_http_info(self, tenant : StrictStr, hostname : StrictStr, file : Union[StrictBytes, StrictStr], **kwargs) -> ApiResponse:  # noqa: E501
        """Upload Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_config_api_v1_devices_tenant_hostname_configs_post_with_http_info(tenant, hostname, file, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param hostname: (required)
        :type hostname: str
        :param file: (required)
        :type file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceConfig, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'hostname',
            'file'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_config_api_v1_devices_tenant_hostname_configs_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['hostname']:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['file']:
            _files['file'] = _params['file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '201': "DeviceConfig",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/devices/{tenant}/{hostname}/configs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
