# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from fice_client.models.rule import Rule

class CompliancePolicy(BaseModel):
    """
    CompliancePolicy
    """
    id: Optional[constr(strict=True)] = None
    name: Optional[StrictStr] = None
    author: Optional[StrictStr] = None
    enabled: StrictBool = Field(...)
    type: StrictStr = Field(...)
    read_only: StrictBool = Field(...)
    created: datetime = Field(...)
    changed: datetime = Field(...)
    rules: Optional[conlist(Rule)] = None
    __properties = ["id", "name", "author", "enabled", "type", "read_only", "created", "changed", "rules"]

    @validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\A\w[\w_.\- ]*\Z", value):
            raise ValueError(r"must validate the regular expression /\A\w[\w_.\- ]*\Z/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompliancePolicy:
        """Create an instance of CompliancePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompliancePolicy:
        """Create an instance of CompliancePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompliancePolicy.parse_obj(obj)

        _obj = CompliancePolicy.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "author": obj.get("author"),
            "enabled": obj.get("enabled"),
            "type": obj.get("type"),
            "read_only": obj.get("read_only"),
            "created": obj.get("created"),
            "changed": obj.get("changed"),
            "rules": [Rule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None
        })
        return _obj


