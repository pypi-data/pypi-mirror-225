# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictStr

from typing import Any, List, Optional

from fice_client.models.compliance_policy import CompliancePolicy
from fice_client.models.new_compliance_policy import NewCompliancePolicy
from fice_client.models.rule import Rule
from fice_client.models.rule_with_input_context import RuleWithInputContext

from fice_client.api_client import ApiClient
from fice_client.api_response import ApiResponse
from fice_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CompliancePolicyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_compliance_policy_api_v1_policy_tenant_post(self, tenant : StrictStr, new_compliance_policy : NewCompliancePolicy, **kwargs) -> CompliancePolicy:  # noqa: E501
        """Create Compliance Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_compliance_policy_api_v1_policy_tenant_post(tenant, new_compliance_policy, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_compliance_policy: (required)
        :type new_compliance_policy: NewCompliancePolicy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CompliancePolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_compliance_policy_api_v1_policy_tenant_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_compliance_policy_api_v1_policy_tenant_post_with_http_info(tenant, new_compliance_policy, **kwargs)  # noqa: E501

    @validate_arguments
    def create_compliance_policy_api_v1_policy_tenant_post_with_http_info(self, tenant : StrictStr, new_compliance_policy : NewCompliancePolicy, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Compliance Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_compliance_policy_api_v1_policy_tenant_post_with_http_info(tenant, new_compliance_policy, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param new_compliance_policy: (required)
        :type new_compliance_policy: NewCompliancePolicy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CompliancePolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'new_compliance_policy'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_compliance_policy_api_v1_policy_tenant_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['new_compliance_policy'] is not None:
            _body_params = _params['new_compliance_policy']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '201': "CompliancePolicy",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/policy/{tenant}/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_new_rule_api_v1_policy_tenant_policy_rule_post(self, tenant : StrictStr, policy : StrictStr, rule : Rule, **kwargs) -> object:  # noqa: E501
        """Create New Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_rule_api_v1_policy_tenant_policy_rule_post(tenant, policy, rule, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule: (required)
        :type rule: Rule
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_new_rule_api_v1_policy_tenant_policy_rule_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_new_rule_api_v1_policy_tenant_policy_rule_post_with_http_info(tenant, policy, rule, **kwargs)  # noqa: E501

    @validate_arguments
    def create_new_rule_api_v1_policy_tenant_policy_rule_post_with_http_info(self, tenant : StrictStr, policy : StrictStr, rule : Rule, **kwargs) -> ApiResponse:  # noqa: E501
        """Create New Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_rule_api_v1_policy_tenant_policy_rule_post_with_http_info(tenant, policy, rule, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule: (required)
        :type rule: Rule
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'policy',
            'rule'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_rule_api_v1_policy_tenant_policy_rule_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['policy']:
            _path_params['policy'] = _params['policy']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['rule'] is not None:
            _body_params = _params['rule']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/policy/{tenant}/{policy}/rule/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def execute_rule_test_api_v1_policy_tenant_policy_debug_post(self, tenant : StrictStr, policy : StrictStr, rule_with_input_context : RuleWithInputContext, platform : Optional[StrictStr] = None, **kwargs) -> object:  # noqa: E501
        """Execute Rule Test  # noqa: E501

        Execute test run of the given `rule`.  If the `rule` has either rule.simplified or rule.definition attribute set, the ruleset file will be modified on a new branch, otherwise an existing rule will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_rule_test_api_v1_policy_tenant_policy_debug_post(tenant, policy, rule_with_input_context, platform, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule_with_input_context: (required)
        :type rule_with_input_context: RuleWithInputContext
        :param platform:
        :type platform: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the execute_rule_test_api_v1_policy_tenant_policy_debug_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.execute_rule_test_api_v1_policy_tenant_policy_debug_post_with_http_info(tenant, policy, rule_with_input_context, platform, **kwargs)  # noqa: E501

    @validate_arguments
    def execute_rule_test_api_v1_policy_tenant_policy_debug_post_with_http_info(self, tenant : StrictStr, policy : StrictStr, rule_with_input_context : RuleWithInputContext, platform : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Execute Rule Test  # noqa: E501

        Execute test run of the given `rule`.  If the `rule` has either rule.simplified or rule.definition attribute set, the ruleset file will be modified on a new branch, otherwise an existing rule will be tested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_rule_test_api_v1_policy_tenant_policy_debug_post_with_http_info(tenant, policy, rule_with_input_context, platform, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule_with_input_context: (required)
        :type rule_with_input_context: RuleWithInputContext
        :param platform:
        :type platform: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'policy',
            'rule_with_input_context',
            'platform'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_rule_test_api_v1_policy_tenant_policy_debug_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['policy']:
            _path_params['policy'] = _params['policy']


        # process the query parameters
        _query_params = []
        if _params.get('platform') is not None:  # noqa: E501
            _query_params.append(('platform', _params['platform']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['rule_with_input_context'] is not None:
            _body_params = _params['rule_with_input_context']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/policy/{tenant}/{policy}/debug', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_compliance_policies_api_v1_policy_tenant_get(self, tenant : StrictStr, **kwargs) -> List[CompliancePolicy]:  # noqa: E501
        """List Compliance Policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_compliance_policies_api_v1_policy_tenant_get(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CompliancePolicy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_compliance_policies_api_v1_policy_tenant_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_compliance_policies_api_v1_policy_tenant_get_with_http_info(tenant, **kwargs)  # noqa: E501

    @validate_arguments
    def list_compliance_policies_api_v1_policy_tenant_get_with_http_info(self, tenant : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """List Compliance Policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_compliance_policies_api_v1_policy_tenant_get_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CompliancePolicy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compliance_policies_api_v1_policy_tenant_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[CompliancePolicy]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/policy/{tenant}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete(self, tenant : StrictStr, policy : StrictStr, rule_name : StrictStr, **kwargs) -> object:  # noqa: E501
        """Remove Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete(tenant, policy, rule_name, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule_name: (required)
        :type rule_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete_with_http_info(tenant, policy, rule_name, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete_with_http_info(self, tenant : StrictStr, policy : StrictStr, rule_name : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove Rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete_with_http_info(tenant, policy, rule_name, async_req=True)
        >>> result = thread.get()

        :param tenant: (required)
        :type tenant: str
        :param policy: (required)
        :type policy: str
        :param rule_name: (required)
        :type rule_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant',
            'policy',
            'rule_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_rule_api_v1_policy_tenant_policy_rule_rule_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant']:
            _path_params['tenant'] = _params['tenant']

        if _params['policy']:
            _path_params['policy'] = _params['policy']

        if _params['rule_name']:
            _path_params['rule_name'] = _params['rule_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Auth0ImplicitBearer', 'Auth0HTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/policy/{tenant}/{policy}/rule/{rule_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
