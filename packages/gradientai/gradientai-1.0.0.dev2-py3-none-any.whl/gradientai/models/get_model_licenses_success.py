# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from gradientai.models.get_model_licenses_success_licenses_agreed_to_inner import GetModelLicensesSuccessLicensesAgreedToInner

class GetModelLicensesSuccess(BaseModel):
    """
    GetModelLicensesSuccess
    """
    licenses_agreed_to: conlist(GetModelLicensesSuccessLicensesAgreedToInner) = Field(..., alias="licensesAgreedTo", description="Required licenses for the model that a workspace has already agreed to.")
    licenses_not_agreed_to: conlist(GetModelLicensesSuccessLicensesAgreedToInner) = Field(..., alias="licensesNotAgreedTo", description="Licenses that a workspace must still agree to before using the model.")
    __properties = ["licensesAgreedTo", "licensesNotAgreedTo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetModelLicensesSuccess:
        """Create an instance of GetModelLicensesSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in licenses_agreed_to (list)
        _items = []
        if self.licenses_agreed_to:
            for _item in self.licenses_agreed_to:
                if _item:
                    _items.append(_item.to_dict())
            _dict['licensesAgreedTo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in licenses_not_agreed_to (list)
        _items = []
        if self.licenses_not_agreed_to:
            for _item in self.licenses_not_agreed_to:
                if _item:
                    _items.append(_item.to_dict())
            _dict['licensesNotAgreedTo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetModelLicensesSuccess:
        """Create an instance of GetModelLicensesSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetModelLicensesSuccess.parse_obj(obj)

        _obj = GetModelLicensesSuccess.parse_obj({
            "licenses_agreed_to": [GetModelLicensesSuccessLicensesAgreedToInner.from_dict(_item) for _item in obj.get("licensesAgreedTo")] if obj.get("licensesAgreedTo") is not None else None,
            "licenses_not_agreed_to": [GetModelLicensesSuccessLicensesAgreedToInner.from_dict(_item) for _item in obj.get("licensesNotAgreedTo")] if obj.get("licensesNotAgreedTo") is not None else None
        })
        return _obj

