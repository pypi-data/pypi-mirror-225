# coding: utf-8

"""
    Gradient AI API

    Interface for interacting with Gradient AI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import constr

from typing import Any, Optional

from gradientai.models.create_model_request_body import CreateModelRequestBody
from gradientai.models.create_model_success import CreateModelSuccess
from gradientai.models.get_model_licenses_success import GetModelLicensesSuccess
from gradientai.models.get_model_success import GetModelSuccess
from gradientai.models.list_models_success import ListModelsSuccess
from gradientai.models.query_model_success import QueryModelSuccess
from gradientai.models.train_model_request_body import TrainModelRequestBody
from gradientai.models.train_model_success import TrainModelSuccess

from gradientai.api_client import ApiClient
from gradientai.api_response import ApiResponse
from gradientai.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ModelsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_model(self, x_preemo_workspace_id : constr(strict=True, min_length=1), create_model_request_body : CreateModelRequestBody, **kwargs) -> CreateModelSuccess:  # noqa: E501
        """Create model  # noqa: E501

        Creates a new instance of a model based on a specified model from the existing list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model(x_preemo_workspace_id, create_model_request_body, async_req=True)
        >>> result = thread.get()

        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param create_model_request_body: (required)
        :type create_model_request_body: CreateModelRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateModelSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_model_with_http_info(x_preemo_workspace_id, create_model_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_model_with_http_info(self, x_preemo_workspace_id : constr(strict=True, min_length=1), create_model_request_body : CreateModelRequestBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Create model  # noqa: E501

        Creates a new instance of a model based on a specified model from the existing list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_with_http_info(x_preemo_workspace_id, create_model_request_body, async_req=True)
        >>> result = thread.get()

        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param create_model_request_body: (required)
        :type create_model_request_body: CreateModelRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateModelSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_preemo_workspace_id',
            'create_model_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_model_request_body'] is not None:
            _body_params = _params['create_model_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateModelSuccess",
            '4XX': "CreateModelError",
        }

        return self.api_client.call_api(
            '/models', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_model(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> str:  # noqa: E501
        """Delete model.  # noqa: E501

        Deletes the fine-tuned model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_model(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_model_with_http_info(id, x_preemo_workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_model_with_http_info(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> ApiResponse:  # noqa: E501
        """Delete model.  # noqa: E501

        Deletes the fine-tuned model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_model_with_http_info(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_preemo_workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '4XX': "DeleteModelError",
        }

        return self.api_client.call_api(
            '/models/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model(self, id : Any, x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> GetModelSuccess:  # noqa: E501
        """Describe model  # noqa: E501

        Describes the specified model, including the model ID, name, slug and base model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: GetModelIdParameter
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetModelSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_model_with_http_info(id, x_preemo_workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_with_http_info(self, id : Any, x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> ApiResponse:  # noqa: E501
        """Describe model  # noqa: E501

        Describes the specified model, including the model ID, name, slug and base model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_with_http_info(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: GetModelIdParameter
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetModelSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_preemo_workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetModelSuccess",
            '4XX': "GetModelError",
        }

        return self.api_client.call_api(
            '/models/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_licenses(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> GetModelLicensesSuccess:  # noqa: E501
        """License info for model  # noqa: E501

        Gets license requirements of a model and if the workspace needs to agree to any other licenses to use the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_licenses(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetModelLicensesSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_model_licenses_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_model_licenses_with_http_info(id, x_preemo_workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_licenses_with_http_info(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> ApiResponse:  # noqa: E501
        """License info for model  # noqa: E501

        Gets license requirements of a model and if the workspace needs to agree to any other licenses to use the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_licenses_with_http_info(id, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetModelLicensesSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_preemo_workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_licenses" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetModelLicensesSuccess",
            '4XX': "GetModelLicensesError",
        }

        return self.api_client.call_api(
            '/models/{id}/licenses', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_models(self, only_base : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> ListModelsSuccess:  # noqa: E501
        """List available models  # noqa: E501

        Lists the currently available models in the selected workspace and provides basic information such as the model name, ID and whether it is a base or fine-tuned model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_models(only_base, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param only_base: (required)
        :type only_base: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListModelsSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_models_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_models_with_http_info(only_base, x_preemo_workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_models_with_http_info(self, only_base : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), **kwargs) -> ApiResponse:  # noqa: E501
        """List available models  # noqa: E501

        Lists the currently available models in the selected workspace and provides basic information such as the model name, ID and whether it is a base or fine-tuned model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_models_with_http_info(only_base, x_preemo_workspace_id, async_req=True)
        >>> result = thread.get()

        :param only_base: (required)
        :type only_base: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListModelsSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'only_base',
            'x_preemo_workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_models" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('only_base') is not None:  # noqa: E501
            _query_params.append(('onlyBase', _params['only_base']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListModelsSuccess",
            '4XX': "ListModelsError",
        }

        return self.api_client.call_api(
            '/models', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def query_model(self, id : constr(strict=True, min_length=1), query : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), max_generated_token_count : Optional[constr(strict=True, min_length=1)] = None, temperature : Optional[constr(strict=True, min_length=1)] = None, top_k : Optional[constr(strict=True, min_length=1)] = None, top_p : Optional[constr(strict=True, min_length=1)] = None, **kwargs) -> QueryModelSuccess:  # noqa: E501
        """Query model  # noqa: E501

        Queries your fine-tuned model with the specified prompt string. The model will generate a completion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_model(id, query, x_preemo_workspace_id, max_generated_token_count, temperature, top_k, top_p, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param query: (required)
        :type query: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param max_generated_token_count:
        :type max_generated_token_count: str
        :param temperature:
        :type temperature: str
        :param top_k:
        :type top_k: str
        :param top_p:
        :type top_p: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueryModelSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the query_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.query_model_with_http_info(id, query, x_preemo_workspace_id, max_generated_token_count, temperature, top_k, top_p, **kwargs)  # noqa: E501

    @validate_arguments
    def query_model_with_http_info(self, id : constr(strict=True, min_length=1), query : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), max_generated_token_count : Optional[constr(strict=True, min_length=1)] = None, temperature : Optional[constr(strict=True, min_length=1)] = None, top_k : Optional[constr(strict=True, min_length=1)] = None, top_p : Optional[constr(strict=True, min_length=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Query model  # noqa: E501

        Queries your fine-tuned model with the specified prompt string. The model will generate a completion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_model_with_http_info(id, query, x_preemo_workspace_id, max_generated_token_count, temperature, top_k, top_p, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param query: (required)
        :type query: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param max_generated_token_count:
        :type max_generated_token_count: str
        :param temperature:
        :type temperature: str
        :param top_k:
        :type top_k: str
        :param top_p:
        :type top_p: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QueryModelSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'query',
            'x_preemo_workspace_id',
            'max_generated_token_count',
            'temperature',
            'top_k',
            'top_p'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('max_generated_token_count') is not None:  # noqa: E501
            _query_params.append(('maxGeneratedTokenCount', _params['max_generated_token_count']))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('temperature') is not None:  # noqa: E501
            _query_params.append(('temperature', _params['temperature']))

        if _params.get('top_k') is not None:  # noqa: E501
            _query_params.append(('topK', _params['top_k']))

        if _params.get('top_p') is not None:  # noqa: E501
            _query_params.append(('topP', _params['top_p']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "QueryModelSuccess",
            '4XX': "QueryModelError",
        }

        return self.api_client.call_api(
            '/models/{id}/queries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def train_model(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), train_model_request_body : TrainModelRequestBody, **kwargs) -> TrainModelSuccess:  # noqa: E501
        """Train model  # noqa: E501

        Fine-tunes the specified model with your data samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.train_model(id, x_preemo_workspace_id, train_model_request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param train_model_request_body: (required)
        :type train_model_request_body: TrainModelRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TrainModelSuccess
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the train_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.train_model_with_http_info(id, x_preemo_workspace_id, train_model_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def train_model_with_http_info(self, id : constr(strict=True, min_length=1), x_preemo_workspace_id : constr(strict=True, min_length=1), train_model_request_body : TrainModelRequestBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Train model  # noqa: E501

        Fine-tunes the specified model with your data samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.train_model_with_http_info(id, x_preemo_workspace_id, train_model_request_body, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param x_preemo_workspace_id: (required)
        :type x_preemo_workspace_id: str
        :param train_model_request_body: (required)
        :type train_model_request_body: TrainModelRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TrainModelSuccess, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'x_preemo_workspace_id',
            'train_model_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method train_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_preemo_workspace_id']:
            _header_params['x-preemo-workspace-id'] = _params['x_preemo_workspace_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['train_model_request_body'] is not None:
            _body_params = _params['train_model_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "TrainModelSuccess",
            '4XX': "TrainModelError",
        }

        return self.api_client.call_api(
            '/models/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
