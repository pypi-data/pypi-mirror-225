<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>1</Major>
          <Minor>0</Minor>
          <Revision>7</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">b9020c68-2da8-42c4-a499-ee32c504bd8a</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">638165857162732285</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">connectors.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>485</X>
                  <Y>154</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">0.921187937</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Library" index="0">
              <items count="6">
                <item name="AssemblyFullName" type_name="gh_string" type_code="10">GhPython, Version=7.28.23058.3001, Culture=neutral, PublicKeyToken=null</item>
                <item name="AssemblyVersion" type_name="gh_string" type_code="10">7.28.23058.3001</item>
                <item name="Author" type_name="gh_string" type_code="10"></item>
                <item name="Id" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                <item name="Name" type_name="gh_string" type_code="10"></item>
                <item name="Version" type_name="gh_string" type_code="10"></item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">11</item>
          </items>
          <chunks count="11">
            <chunk name="Object" index="0">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                <item name="Name" type_name="gh_string" type_code="10">connectors</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="12">
                    <item name="CodeInput" type_name="gh_string" type_code="10">from ghpythonlib.componentbase import executingcomponent as component
import Grasshopper, GhPython
import System
import Rhino
import Rhino.Geometry
import Rhino
import Grasshopper
import ghpythonlib.treehelpers as th
from Rhino.Geometry import Mesh, Surface, Brep, Vector3d, Vector3f, Plane, Polyline, Line, Point3d, Transform, Rectangle3d, Interval, MeshFace
import math

class MyComponent(component):
    
    def RunScript(self, _mesh, _face_positions, _face_thickness, _divisions, _division_len, _edge_vectors, _rect_width, _rect_height, _rect_thickness, _projection):
        
        class case_2_vda:
            
            def __init__(self, m, s, face_thickness, face_positions, edge_divisions, edge_division_len, insertion_vectors, rect_width, rect_height, rect_thickness, chamfer, projection_breps):
                self.m = m
                
                if(self.m == None):
                    # Create vertices
                    vertices = []
                    vertices.append(Point3d(0, 0, 0))
                    vertices.append(Point3d(100, 0, 0))
                    vertices.append(Point3d(100, 100, 0))
                    vertices.append(Point3d(0, 100, 0))
                    
                    # Create faces
                    faces = []
                    faces.append(MeshFace(0, 1, 2))
                    faces.append(MeshFace(0, 2, 3))
                    
                    # Create mesh
                    self.m = Mesh()
                    
                    # Add vertices to the mesh
                    for vertex in vertices:
                        self.m.Vertices.Add(vertex)
                    
                    # Add faces to the mesh
                    for face in faces:
                        self.m.Faces.AddFace(face)
                    
                    # Optional: Compute vertex normals
                    self.m.Normals.ComputeNormals()
                    
                    # Optional: Compact the mesh to remove unused vertices
                    self.m.Compact()
                    
                    # Optional: Update the mesh to display changes
                    self.m.FaceNormals.ComputeFaceNormals()
                    self.m.Normals.ComputeNormals()
                    self.m.Normals.UnitizeNormals()
                    Rhino.RhinoDoc.ActiveDoc.Objects.AddMesh(self.m)
                
                self.s = None
                self.face_thickness = face_thickness if face_thickness is not None else 1
                self.face_positions = face_positions if face_positions is not None else [0]
                self.face_positions.sort()
        
                if len(self.face_positions) == 0:
                    self.face_positions = [0]
        
                self.projection_breps = projection_breps
                self.edge_divisions = edge_divisions if edge_divisions is not None else [2]
                self.edge_division_len = edge_division_len if edge_division_len is not None else []
                if(len(self.edge_division_len)&gt;0):
                    if(self.edge_division_len[0]&lt;0.01):
                        self.edge_division_len = []
                self.has_ngons = len(self.m.Ngons) &gt; 0
                self.rect_width = rect_width if rect_width is not None else 10
                self.rect_height = rect_height if rect_height is not None else 10
                self.rect_thickness = rect_thickness if rect_thickness is not None else 1
                self.f = None
                self.e = None
                self.f_v = None
                self.f_e = None
                self.e_f = None
                self.e_ngon_e =  {}
                self.f_planes = []
                self.fe_planes = []
                self.bi_planes = []
                self.e90_planes = []
                self.e90_multiple_planes = []
                self.e_lines = []
                self.f_polylines_index = []
                self.f_polylines_planes = []
                self.f_polylines = []
                self.e_polylines_index = []
                self.e_polylines_planes = []
                self.e_polylines = []
        
                if self.m is not None:
                    if self.m.IsValid:
                        self.m.Weld(0.01)
                        self.m.RebuildNormals()
                    else:
                        return
                else:
                    return
                self.s = s
                # run methods in constructor
                self.get_face_vertices()
                self.get_faces_planes()
                self.get_face_edge_planes()
                self.get_bisector_planes()
                self.get_face_polylines(chamfer)
                self.get_edges()
                self.get_edge_faces()
                self.get_edge_vectors(insertion_vectors)
                self.get_edge_planes()
                self.get_connectors()
        
            def vertex_topo_vertex(self, mesh, vertex_ids):
                topo_vertices = []
                for i in range(len(vertex_ids)):
                    topo_vertices.append(mesh.TopologyVertices.TopologyVertexIndex(vertex_ids[i]))
            
                return topo_vertices
             
            def get_ngons_topo_boundaries(self, mesh):
                boundaries = []
                for i in range(mesh.Ngons.Count):
                    boundaries.append(self.vertex_topo_vertex(mesh, mesh.Ngons[i].BoundaryVertexIndexList()))
            
                return boundaries
        
            def get_face_vertices(self):
                if self.has_ngons:
                    self.f = self.m.Ngons.Count
                    self.f_v = self.get_ngons_topo_boundaries(m)
                else:
                    self.f = self.m.Faces.Count
                    self.f_v = []
                    for i in range(self.m.Faces.Count):
                        self.f_v.append([self.m.Faces[i][0], self.m.Faces[i][1], self.m.Faces[i][2], self.m.Faces[i][3]] if self.m.Faces[i].IsQuad else [self.m.Faces[i][0], self.m.Faces[i][1], self.m.Faces[i][2]])
        #        print(self.f)
        #        print(self.f_v)
        
            def get_normal(self, mesh, f):
                vector3d = Vector3f(0,0,0)
            
                faces = mesh.Ngons[f].FaceIndexList()
            
                for i in range(len(faces)):
                    vector3d += mesh.FaceNormals[faces[i]]
            
                vector3d.Unitize()
            
                return Vector3d(vector3d)
        
            def center_point(self, polyline):
                count = len(polyline)
            
                if count == 0:
                    return Point3d.Unset
            
                if count == 1:
                    return polyline[0]
            
                center = Point3d.Origin
                weight = 0.0
            
                stop = count - 1
                if polyline[0].DistanceToSquared(polyline[polyline.Count - 1]) &gt; 0.001:
                    stop += 1
            
                for i in range(stop):
                    A = polyline[i]
                    B = polyline[(i + 1) % count]
                    d = A.DistanceTo(B)
                    center += d * 0.5 * (A + B)
                    weight += d
            
                center /= weight
            
                return center
        
            def face_center(self, mesh, f):
                vertices = mesh.Ngons.GetNgon(f).BoundaryVertexIndexList()
                outline = Polyline()
                for v in vertices:
                    outline.Add(mesh.Vertices[v])
                return self.center_point(outline)
        
            def get_plane(self, mesh, f):
                return Plane(self.face_center(mesh,f), self.get_normal(mesh,f))
        
            def get_f_planes(self, mesh):
                planes = []
                for i in range(mesh.Ngons.Count):
                    plane = self.get_plane(mesh, i)
                    planes.append(plane)
                return planes
        
            def get_faces_planes(self):
                if self.has_ngons:
                    self.f_planes = self.get_f_planes(self.m)
                else:
                    self.f_planes = [None] * self.m.Faces.Count
                    for i in range(self.m.Faces.Count):
                        center = self.m.Faces.GetFaceCenter(i)
                        self.f_planes[i] = Plane(center, self.m.FaceNormals[i])
            
                # Adjust to surface
                if self.s is not None:
                    for i in range(len(f_planes)):
                        u, v = None, None
                        s.ClosestPoint(f_planes[i].Origin, u, v)
                        normal = s.NormalAt(u, v)
                        xaxis = Vector3d.CrossProduct(normal, f_planes[i].YAxis)
                        yaxis = Vector3d.CrossProduct(normal, xaxis)
                        self.f_planes[i] = Plane(f_planes[i].Origin, xaxis, yaxis)
        #        print(self.f_planes)
        
            def get_face_edge_planes(self):
                self.fe_planes = []
                
                for i in range(self.f):
                    n = len(self.f_v[i])
                    self.fe_planes.append([None] * n)
                    
                    for j in range(len(self.f_v[i])):
                        v1 = self.f_v[i][(j + 0) % n]
                        v2 = self.f_v[i][(j + 1) % n]
                        
                        e = self.m.TopologyEdges.GetEdgeIndex(v1, v2)
                        cf = self.m.TopologyEdges.GetConnectedFaces(e)
                        
                        sum = Vector3f.Zero
                        for k in range(len(cf)):
                            sum += self.m.FaceNormals[cf[k]]
                        sum /= len(cf)
                        
                        edgePlane = Plane(Point3d(self.m.Vertices[v1] + self.m.Vertices[v2]) * 0.5, self.m.Vertices[v1] - self.m.Vertices[v2], sum)
                        self.fe_planes[i][j] = edgePlane
                        
                        # Adjust to surface
                        if self.s is not None:
                            u, v = None, None
                            s.ClosestPoint(self.fe_planes[i][j].Origin, u, v)
                            normal = s.NormalAt(u, v)
                            self.fe_planes[i][j] = Plane(self.fe_planes[i][j].Origin, Vector3d.CrossProduct(normal, self.fe_planes[i][j].ZAxis), normal)
                            
                        for brep in self.projection_breps:
                            if brep.IsPointInside(self.fe_planes[i][j].Origin, 0.01, False):
                                xform = Rhino.Geometry.Transform.PlanarProjection(Plane.WorldXY)
                                self.fe_planes[i][j].Transform(xform)
        #        print(self.fe_planes)
            
            def DihedralPlane(self, plane0, plane1):
                line = Rhino.Geometry.Line.Unset
                num = 0
                num1 = 0
                num2 = 0
                dihedral_plane = None
                squared = None
                result, line = Rhino.Geometry.Intersect.Intersection.PlanePlane(plane0, plane1)
                result, num = Rhino.Geometry.Intersect.Intersection.LinePlane(line, plane0)
                point3d = line.PointAt(num)
                line1 = Rhino.Geometry.Line(plane0.Origin, plane0.Origin+plane0.ZAxis)
                line2 = Rhino.Geometry.Line(plane0.Origin, plane0.Origin+plane0.ZAxis)
                if plane0.ZAxis.IsParallelTo(plane1.ZAxis, Rhino.RhinoDoc.ActiveDoc.ModelAngleToleranceRadians) == 1:
                    squared = False
                else:
                    origin = plane0.Origin
                    squared = origin.DistanceToSquared(plane1.Origin) &gt; 0.001
                if not squared:
                    dihedral_plane = Rhino.Geometry.Plane.Unset
                else:
                    Rhino.Geometry.Intersect.Intersection.LineLine(line1, line2, num1, num2)
                    point3d1 = line1.PointAt(num1)
                    vector3d = Rhino.Geometry.Vector3d(plane0.Origin - point3d1)
                    vector3d1 = Rhino.Geometry.Vector3d(plane1.Origin - point3d1)
                    plane = Rhino.Geometry.Plane(point3d, line.Direction, vector3d + vector3d1)
                    dihedral_plane = plane
                return dihedral_plane
        
            def get_bisector_planes(self):
                self.bi_planes = []
                
                for i in range(self.f):
                    n = len(self.f_v[i])
                    self.bi_planes.append([None] * n)
                    
                    for j in range(n):
                        pl1 = self.fe_planes[i][j]
                        pl0 = self.fe_planes[i][(j + 1) % n]
                        self.bi_planes[i][j] = self.DihedralPlane(pl0, pl1)
        #        print(self.bi_planes)
        
            def face_vertices(self, mesh, F, topo):
                uintv = mesh.Ngons[F].BoundaryVertexIndexList()
                v = []
                for i in range(len(uintv)):
                    if topo:
                        v.append(int(uintv[i]))
                    else:
                        v.append(mesh.TopologyVertices.TopologyVertexIndex(int(uintv[i])))
            
                return v
        
            def e_all(self, mesh):
                all_e = {}
                hash_set = set()
                counter = 0
            
                try:
                    for i in range(mesh.Ngons.Count):
                        n = mesh.Ngons[i].BoundaryVertexCount
                        fv = self.face_vertices(mesh, i, True)
            
                        for j in range(n - 1):
                            et = mesh.TopologyEdges.GetEdgeIndex(fv[j], fv[j + 1])
                            if et not in hash_set:
                                hash_set.add(et)
                                all_e[et] = counter
                                counter += 1
            
                        e = mesh.TopologyEdges.GetEdgeIndex(fv[0], fv[n - 1])
                        if e not in hash_set:
                            hash_set.add(e)
                            all_e[e] = counter
                            counter += 1
                except Exception as e:
                    Rhino.RhinoApp.WriteLine(str(e))
                return all_e
        
            def get_edges(self):
                if self.has_ngons:
                    self.e_ngon_e = self.e_all(self.m)
                    self.e = len(self.e_ngon_e)
                else:
                    self.e_ngon_e = {}
                    
                    for i in range(self.m.TopologyEdges.Count):
                        self.e_ngon_e[i] = i
                    self.e = len(self.e_ngon_e)
        
            def _ef(self, mesh, mesh_edge):
                # Get connected mesh faces
                connected_faces = mesh.TopologyEdges.GetConnectedFaces(mesh_edge)
                connected_ngons = []
            
                for face_index in connected_faces:
                    connected_ngons.append(mesh.Ngons.NgonIndexFromFaceIndex(face_index))
            
                return connected_ngons
        
            def _EF(self, mesh):
                e_all = self.e_all(mesh)
                ef = [None] * len(e_all)
                #print(e_all)
                #count = 0
                for mesh_edge_id in e_all:
                    #print(edge_id)
                    ef[e_all[mesh_edge_id]] = self._ef(mesh, mesh_edge_id)
                    """
                    ef.append(self._ef(mesh, mesh_edge_id))
                    if(count == 198):
                        print(self._ef(mesh, mesh_edge_id))
                    """
                    #count = count + 1
                #print(ef[198])
                return ef
        
            def get_edge_faces(self):
                if self.has_ngons:
                    self.e_f = self._EF(self.m)
        #            print(len(self.e_f))
        #            print(self.e_f[0])
                else:
                    self.e_f = []
                    for i in range(self.m.TopologyEdges.Count):
                        self.e_f.append(self.m.TopologyEdges.GetConnectedFaces(i))
        
            found_ids = []
            
            def get_edge_vectors(self, lines):
                
                # Init empty vectors
                self.insertion_vectors = [Vector3d.Zero] * self.e
        
                # Get edge lines including naked
                self.e_lines = [Line.Unset] * self.e
                for pair in self.e_ngon_e:
                    #print(self.e_ngon_e[pair])
                    self.e_lines[self.e_ngon_e[pair]] = self.m.TopologyEdges.EdgeLine(pair)
                if(len(lines)==0):
                    return
                # Create rtree and add lines
                rTree = Rhino.Geometry.RTree()
                for i in range(len(self.e_lines)):
                    bbox = self.e_lines[i].BoundingBox
                    bbox.Inflate(1)
                    rTree.Insert(bbox, i)
            
                # Search tree
                for i in range(len(lines)):
                    bbox = lines[i].BoundingBox
                    bbox.Inflate(Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance)
                    bbox.Inflate(1)
                    #print(bbox.IsValid)
                    rTree.Search(lines[i].BoundingBox, self.BoundingBoxCallback,self.found_ids)
            
                    # Iterate through found ids and check if end point lies on a mesh edge
                    for id in self.found_ids:
                        #print(id)
                        if self.e_lines[id].ClosestPoint(lines[i].From, True).DistanceToSquared(lines[i].From) &lt; Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance:
                            self.insertion_vectors[id] = lines[i].Direction
                            self.insertion_vectors[id].Unitize()
                        elif self.e_lines[id].ClosestPoint(lines[i].To, True).DistanceToSquared(lines[i].To) &lt; Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance:
                            self.insertion_vectors[id] = lines[i].Direction
                            self.insertion_vectors[id].Unitize()
            
                    self.found_ids = []
            
            def BoundingBoxCallback(self, sender, e):
                #print("Hi")
                self.found_ids.append(e.Id)
        
            def constrain(self, x, min_val, max_val):
                return max(min_val, min(x, max_val))
        
            def interpolate_points(self, from_pt, to_pt, steps, include_ends=True):
                if include_ends:
                    point3d_array = [from_pt]
                    for i in range(1, steps + 1):
                        num = i / (1.0 + steps)
                        interpolated_pt = Point3d(
                            from_pt.X + num * (to_pt.X - from_pt.X),
                            from_pt.Y + num * (to_pt.Y - from_pt.Y),
                            from_pt.Z + num * (to_pt.Z - from_pt.Z)
                        )
                        point3d_array.append(interpolated_pt)
                    point3d_array.append(to_pt)
                else:
                    point3d_array = []
                    for i in range(1, steps + 1):
                        num = i / (1.0 + steps)
                        interpolated_pt = Point3d(
                            from_pt.X + num * (to_pt.X - from_pt.X),
                            from_pt.Y + num * (to_pt.Y - from_pt.Y),
                            from_pt.Z + num * (to_pt.Z - from_pt.Z)
                        )
                        point3d_array.append(interpolated_pt)
                return point3d_array
        
            def change_origin(self, pl, p):
                return Rhino.Geometry.Plane(p, pl.XAxis, pl.YAxis)
        
            def get_edge_planes(self):
                self.e90_planes = [None] * len(self.e_ngon_e)
                self.e90_multiple_planes = [[] for _ in range(len(self.e_ngon_e))]
                
                count = 0
                #print(self.e_ngon_e)
                for id in self.e_ngon_e: # id mesh edge - i ngon edge
                #for i in range(len(self.e_ngon_e)):
                    
                    #print(self.e_ngon_e)
                    i = self.e_ngon_e[id]
                    
                    #print(i)
                    #print(id)
                    #print(len(self.f_planes))
                    if len(self.m.TopologyEdges.GetConnectedFaces(id)) == 1:
                        self.e90_planes[i] = Plane.Unset
                        self.e90_multiple_planes[i] = [Plane.Unset]
                        continue
                    #print(id)
                    #print(i)
                    #print(self.e_f)
                    edge_line = self.m.TopologyEdges.EdgeLine(id)
                    origin = edge_line.PointAt(0.5)
                    zaxis = edge_line.Direction
                    zaxis.Unitize()
                    pair = self.m.TopologyEdges.GetTopologyVertices(id)
                    # edge vertex normals
                    yaxis = ((Vector3d(self.m.Normals[pair.I]) + Vector3d(self.m.Normals[pair.J]))) * 0.5
                    # or face normals
                    #print(len(self.f_planes))
                    #print(i)
                    #print(self.e_f[i])
                    
                    #print(self.e_f[i][0])
                    #print(self.e_f[i][1])
                    
                    yaxis = (self.f_planes[self.e_f[i][0]].ZAxis + self.f_planes[self.e_f[i][1]].ZAxis) * 0.5
            
                    # self.f_planes[]
            
                    if self.s is not None:
                        u, v = self.s.ClosestPoint(origin)
                        yaxis = self.s.NormalAt(u, v)
            
                    xaxis = Vector3d.CrossProduct(zaxis,yaxis)
        
                    # orient x-axis towards first edge index
                    if (origin + xaxis).DistanceToSquared(self.f_planes[self.e_f[i][0]].Origin) &lt; \
                            (origin - xaxis).DistanceToSquared(self.f_planes[self.e_f[i][0]].Origin):
                        xaxis *= -1
        
                    # Incase insertion vectors are given
                    # print(self.insertion_vectors[i])
                    if abs(self.insertion_vectors[i].X) + abs(self.insertion_vectors[i].Y) + abs(self.insertion_vectors[i].Z) &gt; 0.01:
                        # Project given vector to a plane
                        edge_plane = Plane(self.e_lines[i].PointAt(0.5), yaxis)
                        xform = Transform.PlanarProjection(edge_plane)
                        xaxis_ = self.insertion_vectors[i]
                        xaxis_.Transform(xform)
                        # print (xaxis_)
                        if (Point3d.Origin + xaxis_).DistanceToSquared(Point3d.Origin + xaxis) &gt; \
                                (Point3d.Origin - xaxis_).DistanceToSquared(Point3d.Origin + xaxis):
                            xaxis_ *= -1
                        xaxis = xaxis_
        
                    # set plane
                    self.e90_planes[i] = Plane(origin, xaxis, yaxis)
                    # 1) By N 2) by division length 3) in both cases consider lists
                    # Skip emppty
            
                    self.divisions = 1
            
                    if len(self.edge_division_len) &gt; 0 :
                        if len(self.edge_division_len) == self.e:
                            self.divisions = int((self.constrain(edge_line.Length / self.edge_division_len[i], 1, 10)))
                        else:
                            self.divisions = int((self.constrain(edge_line.Length / self.edge_division_len[0], 1, 10)))
                    elif len(self.edge_divisions) &gt; 0:
                        if len(self.edge_divisions) != self.e:
                            self.divisions = int(self.edge_divisions[0])
                        else:
                            self.divisions = int(self.edge_divisions[i])
                    pts =self.interpolate_points(edge_line.From, edge_line.To, self.divisions, False)
        #            print(self.divisions)
        #            print(edge_line.Length)
                    
                    self.e90_multiple_planes[i] = [self.change_origin(self.e90_planes[i], pt) for pt in pts]
                    count = count + 1
        
            def polyline_from_planes(self, basePlane, sidePlanes, close=True):
                polyline = Rhino.Geometry.Polyline()
            
                for i in range(len(sidePlanes) - 1):
                    result, pt = Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(basePlane, sidePlanes[i], sidePlanes[i + 1])
                    polyline.Add(pt)
            
                result, pt1 = Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(basePlane, sidePlanes[len(sidePlanes) - 1], sidePlanes[0])
                polyline.Add(pt1)
            
                if close:
                    polyline.Add(polyline[0])
            
                return polyline
        
            def get_connectors(self):
                self.e_polylines = []
                self.e_polylines_planes = []
                self.e_polylines_index = []
                
                for i in range(len(self.e90_multiple_planes)):
                    
                    self.e_polylines.append([None] * (len(self.e90_multiple_planes[i]) * 2))
                    self.e_polylines_planes.append([None] * len(self.e90_multiple_planes[i]))
                    self.e_polylines_index.append([None] * len(self.e90_multiple_planes[i]))
            
                    for j in range(len(self.e90_multiple_planes[i])):
        
                        if self.e90_multiple_planes[i][j] == Plane.Unset:
                            self.e_polylines[i] = []
                            self.e_polylines_planes[i][j] = None
                            self.e_polylines_index[i][j] = None
                        else:
                            if self.rect_height &gt; 0 and self.rect_width &gt; 0:
                                
                                # type0
                                rect0 = Rectangle3d(
                                    self.move_plane_by_axis(self.e90_multiple_planes[i][j],self.rect_thickness * 0.5),
                                    Interval(-self.rect_width * 0.5, self.rect_width * 0.5),
                                    Interval(-self.rect_height * 0.5, self.rect_height * 0.5))
                                rect1 = Rectangle3d(
                                    self.move_plane_by_axis(self.e90_multiple_planes[i][j],self.rect_thickness * -0.5),
                                    Interval(-self.rect_width * 0.5, self.rect_width * 0.5),
                                    Interval(-self.rect_height * 0.5, self.rect_height * 0.5))
                                self.e_polylines[i][j * 2 + 0] = rect0.ToPolyline()
                                self.e_polylines[i][j * 2 + 1] = rect1.ToPolyline()
        #                        if(len(self.e_f[i])==2):
        #                            if (self.e_f[i][0] == 99 or self.e_f[i][0] == 89  ) and(self.e_f[i][1] == 99 or self.e_f[i][1] == 89  ):
        #                                print (self.e90_multiple_planes[i][j])
        #                                Rhino.RhinoDoc.ActiveDoc.Objects.AddPoint(rect0.ToPolyline()[0] )
        #                                Rhino.RhinoDoc.ActiveDoc.Objects.AddPoint(rect0.ToPolyline()[1] )
        #                                Rhino.RhinoDoc.ActiveDoc.Objects.AddPoint(rect0.ToPolyline()[2] )
        #                                Rhino.RhinoDoc.ActiveDoc.Objects.AddPoint(rect0.ToPolyline()[3] )
        #                                print(rect0.ToPolyline()[0] )
        #                                print(rect0.IsValid)
        #                                print(rect0.Width)
        #                                print(rect0.Height)
        #                                print(self.move_plane_by_axis(self.e90_multiple_planes[i][j],self.rect_thickness * -0.5))
        #                                print(self.move_plane_by_axis(self.e90_multiple_planes[i][j],self.rect_thickness * 0.5))
        #                                print(Interval(-self.rect_width * 0.5, self.rect_width * 0.5))
        #                                print(Interval(-self.rect_height * 0.5, self.rect_height * 0.5))
                            elif self.rect_height &lt;= 0 and self.rect_width &lt;= 0:
                                w = abs(self.rect_height)
                                h = abs(self.rect_width)
            
                                # type1
                                e_plane = Plane(self.e90_multiple_planes[i][j])
                                e_plane.Rotate(math.pi * 0.5, e_plane.YAxis)
                                top_plane_0 = self.move_plane_by_axis(self.move_plane_by_axis(self.f_planes[self.e_f[i][0]],self.face_positions[-1]),  self.face_thickness * 0.5 + h)
                                top_plane_1 = self.move_plane_by_axis(self.move_plane_by_axis(self.f_planes[self.e_f[i][1]], self.face_positions[-1]),        self.face_thickness * 0.5 + h)
                                bot_plane_0 = self.move_plane_by_axis(self.move_plane_by_axis(self.f_planes[self.e_f[i][0]], self.face_positions[0]),       self.face_thickness * -0.5 - h)
                                bot_plane_1 = self.move_plane_by_axis(self.move_plane_by_axis(self.f_planes[self.e_f[i][1]], self.face_positions[0]),       self.face_thickness * -0.5 - h)
            
                                e_plane_ = Plane(self.e90_planes[i])
                                e_plane_.Rotate(math.pi * 0.5, e_plane_.YAxis)
            
                                side_planes = [
                                    top_plane_0,
                                    e_plane,
                                    top_plane_1,
                                    self.move_plane_by_axis(e_plane, w * 0.5),
                                    bot_plane_1,
                                    e_plane,
                                    bot_plane_0,
                                    self.move_plane_by_axis(e_plane, w * -0.5),
                                ]
                                # Step 1: Create polyline type1_0
                                type1_0 = self.polyline_from_planes(self.move_plane_by_axis(self.e90_multiple_planes[i][j],-self.rect_thickness * 0.5), side_planes)
                                
                                # Step 2: Translate polyline type1_0 by ZAxis * rect_thickness to create type1_1
                                type1_1 = Polyline(type1_0)
                                type1_1.Transform(Transform.Translation(self.e90_multiple_planes[i][j].ZAxis * self.rect_thickness))
                                
                                # Step 3: Assign type1_0 and type1_1 to corresponding variables in the e_polylines array
                                self.e_polylines[i][j * 2 + 0] = type1_0
                                self.e_polylines[i][j * 2 + 1] = type1_1
                            # Assigning values to e_polylines_planes and e_polylines_index
                            self.e_polylines_planes[i][j] = self.move_plane_by_axis(self.e90_multiple_planes[i][j],self.rect_thickness * 0.5)
                            self.e_polylines_index[i][j] = "{}-{}_{}".format(self.e_f[i][0], self.e_f[i][1], j)
        
            def outline_from_face_edge_corner(self, face_plane, edge_planes, bise_planes, T=1, tolerance=0.1):
        
                polyline = Rhino.Geometry.Polyline()
            
                if T == 2:
                    for i in range(len(edge_planes)):
                        plane = edge_planes[i]
                        plane1 = edge_planes[(i + 1) % len(edge_planes)]
                        if(Rhino.Geometry.Vector3d.VectorAngle(plane.ZAxis, plane1.ZAxis)&gt;-0.01 and Rhino.Geometry.Vector3d.VectorAngle(plane.ZAxis, plane1.ZAxis)&lt;0.01):
                            edge_planes[(i + 1) % len(edge_planes)] = plane
                            continue
                        
                        if Rhino.Geometry.Vector3d.VectorAngle(plane.XAxis, plane1.XAxis) &lt; tolerance:
                            vector3d = Rhino.Geometry.Vector3d(plane.XAxis)
                            vector3d.Rotate(math.pi/2, plane.YAxis)
                            plane1 = Rhino.Geometry.Plane(bise_planes[i].Origin, vector3d, plane.YAxis)
                        
                        
                            
                            #edge_planes[(i + 1) % len(edge_planes)] = plane
                            
                        result, line = Rhino.Geometry.Intersect.Intersection.PlanePlane(plane, plane1)
                        result, t = Rhino.Geometry.Intersect.Intersection.LinePlane(line, face_plane)
                        polyline.Add(line.PointAt(t))
            
                    polyline.Add(polyline[0])
                    #Rhino.RhinoDoc.ActiveDoc.Objects.AddPolyline(polyline) 
                else:
                    for j in range(len(bise_planes)):
                        result, p = Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(face_plane, bise_planes[j], edge_planes[j])
                        polyline.Add(p)
                    
                    polyline.Add(polyline[0])
                    
                return polyline
        
            def move_plane_by_axis(self, plane, dist, axis=2):
                plane1 = Rhino.Geometry.Plane(plane)
                if axis == 0:
                    plane1.Translate(plane1.XAxis * dist)
                elif axis == 1:
                    plane1.Translate(plane1.YAxis * dist)
                else:
                    plane1.Translate(plane1.Normal * dist)
                return plane1
        
            def chamfer(self, polyline, flags, value=0.001):
                lines = polyline.GetSegments()
            
                if value &lt;= 0:
                    return polyline
            
                p = Rhino.Geometry.Polyline()
                points = Rhino.Geometry.Polyline(polyline.GetRange(0, polyline.Count - 1))
            
                for i in range(points.Count):
                    curr = i
                    next = rhino_util.MathUtil.Wrap((i + 1), points.Count)
                    prev = rhino_util.MathUtil.Wrap((i - 1), points.Count)
            
                    v0 = points[prev] - points[curr]
                    v1 = points[next] - points[curr]
                    angle = Rhino.Geometry.Vector3d.VectorAngle(v0, v1, Rhino.Geometry.Vector3d.CrossProduct(v0, v1))
            
                    if flags[i] and angle &lt; math.pi * 0.5:
                        value_ = rhino_util.MathUtil.RemapNumbers(angle, 0, math.pi * 0.5, value, value * 0.1)
                        v0.Unitize()
                        v1.Unitize()
                        v0 *= value_
                        v1 *= value_
                        p.Add(points[curr] + v0)
                        p.Add(points[curr] + v1)
                    else:
                        p.Add(points[curr])
                        p.Add(points[curr])
            
                p.Add(p[0])
            
                return p
        
            def get_face_polylines(self, chamfer_dist=0.0):
                zero_layer = len(face_positions) == 0
            
                self.f_polylines_index = []
                self.f_polylines_planes = []
                self.f_polylines = []
            
                for i in range(self.f):
                    if len(self.face_positions) == 0:
                        self.f_polylines.append([None, None])
                        
                        self.f_polylines[i][0] = self.outline_from_face_edge_corner(self.move_plane_by_axis(self.f_planes[i],face_thickness * -0.5), self.fe_planes[i], self.bi_planes[i], 2)
                        self.f_polylines[i][1] = self.outline_from_face_edge_corner(self.move_plane_by_axis(self.f_planes[i],face_thickness * 0.5), self.fe_planes[i], self.bi_planes[i], 2)
                        
                        self.f_polylines_planes.append([self.move_plane_by_axis(self.f_planes[i],self.face_thickness * 0.5)])
                        
                        self.f_polylines_index.append([str(i)])
                    else:
                        self.f_polylines.append([None] * (len(face_positions) * 2))
                        self.f_polylines_planes.append([None] * len(face_positions))
                        self.f_polylines_index.append([None] * len(face_positions))
                        
                        for j in range(len(face_positions)):
                            pline0 = self.outline_from_face_edge_corner(self.move_plane_by_axis(self.f_planes[i],self.face_positions[j] + self.face_thickness * -0.5), self.fe_planes[i], self.bi_planes[i], 2)
                            pline1 = self.outline_from_face_edge_corner(self.move_plane_by_axis(self.f_planes[i],self.face_positions[j] + self.face_thickness * 0.5), self.fe_planes[i], self.bi_planes[i], 2)
                            
                            self.f_polylines[i][j * 2 + 0] = pline0
                            self.f_polylines[i][j * 2 + 1] = pline1
                            #Rhino.RhinoDoc.ActiveDoc.Objects.AddPolyline(pline0)
                            self.f_polylines_planes[i][j] = self.move_plane_by_axis(self.f_planes[i],self.face_positions[j] + self.face_thickness * 0.5)
                            self.f_polylines_index[i][j] = str(i) if len(self.face_positions) == 1 else "{0}-{1}".format(i,j)
                
                # Chamfer
                """
                for i in range(self.m.Faces.Count):
                    v = [self.m.Faces[i].A, self.m.Faces[i].B, self.m.Faces[i].C, self.m.Faces[i].D] if self.m.Faces[i].IsQuad else [self.m.Faces[i].A, self.m.Faces[i].B, self.m.Faces[i].C]
                    do_chamfer = [False] * len(v)
                    
                    for j in range(len(v)):
                        tv = self.m.TopologyVertices.TopologyVertexIndex(v[j])
                        connected_faces = self.m.TopologyVertices.ConnectedFaces(tv)
                        if len(connected_faces) &gt; 3:
                            do_chamfer[(j - 1) % len(v)] = True
                    print(self.m.Faces.Count)
                    for j in range(len(f_polylines[i])):
                        f_polylines[i][j] = self.chamfer(f_polylines[i][j], do_chamfer, chamfer_dist)
                """
                return self.f_polylines_index, self.f_polylines_planes, self.f_polylines
        
        
        ###############################################################################
        # user input
        ###############################################################################
        
        
        m = _mesh
        face_positions = _face_positions if len(_face_positions) is not 0 else [0]
        face_thickness = _face_thickness if _face_thickness is not None else 1
        divisions = _divisions if len(_divisions) is not 0 else [2]
        division_len = _division_len if len(_division_len) is not 0 else [15]
        edge_vectors = _edge_vectors if len(_edge_vectors) is not 0 else []
        rect_width = _rect_width if _rect_width is not 0 else 10
        rect_height = _rect_height if _rect_height is not 0 else 10
        rect_thickness = _rect_thickness if _rect_thickness is not 0 else 11
        projection = _projection if len(_projection) else []
        
        chamfer = 0
        #            DA.GetData(10, ref chamfer);
        #
        #            List&lt;Plane&gt; cut_planes = new List&lt;Plane&gt;();
        #            DA.GetDataList(11, cut_planes);
        
        ###############################################################################
        # run code
        ###############################################################################
        vda = case_2_vda(m, None, face_thickness, face_positions, divisions, division_len, edge_vectors, rect_width, rect_height, rect_thickness, chamfer, projection)
        
        """
        if (cut_planes.Count &gt; 0)
        {
            rhino_util.PolylineUtil.CutMesh_FoldedPlates(ref vda.f_polylines, cut_planes);
        }
        """
        ###############################################################################
        # user output
        ###############################################################################
        
        data_tree_f = Grasshopper.DataTree[Polyline]()
        data_tree_e = Grasshopper.DataTree[Polyline]()
        data_tree_e_pl = Grasshopper.DataTree[Plane]()
        data_tree_e_id = Grasshopper.DataTree[str]()
        for i in range(len(vda.f_polylines)):
            data_tree_f.AddRange(vda.f_polylines[i],Grasshopper.Kernel.Data.GH_Path(i))
        
        for i in range(len(vda.e_polylines)):
            if(len(vda.e_polylines[i])&gt;0):
                data_tree_e.AddRange(vda.e_polylines[i],Grasshopper.Kernel.Data.GH_Path(i))
        for i in range(len(vda.e_polylines_planes)):
            if(vda.e_polylines_planes[i][0] is not None):
                data_tree_e_pl.AddRange(vda.e_polylines_planes[i],Grasshopper.Kernel.Data.GH_Path(i))
        for i in range(len(vda.e_polylines_index)):
            if(vda.e_polylines_index[i][0] is not None):
                data_tree_e_id.AddRange(vda.e_polylines_index[i],Grasshopper.Kernel.Data.GH_Path(i))
        
        _f = data_tree_f
        _f_pl = th.list_to_tree(vda.f_polylines_planes)
        _f_id = th.list_to_tree(vda.f_polylines_index)
        _e = data_tree_e
        _e_pl = data_tree_e_pl
        _e_id = data_tree_e_id
        
        
        # return outputs if you have them; here I try it for you:
        return (_f, _f_pl, _f_id, _e, _e_pl, _e_id)
</item>
                    <item name="Description" type_name="gh_string" type_code="10">GhPython provides a Python script component</item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">true</item>
                    <item name="IconDisplay" type_name="gh_int32" type_code="3">2</item>
                    <item name="IconOverride" type_name="gh_drawing_bitmap" type_code="37">
                      <bitmap length="407">iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAALEAAACxABrSO9dQAAATlJREFUSEvdleFtwkAMhTNBxACZIBPkZ/6UBcoCZYGyAF0AFqAL0AHaDgAMUDpAYZPgz5Kju+BTUzUIwZOeIp/t9xL7pGR3hZGwHogu6jzPm6qqkiRflqWbM4oOdFFT8HM4Jkl+vX5zc0bR6W/wPJs1X/vvNh7cQM50LKvVq8YXMUAck6fpVOc/uAHPzXbXLtC+JkVqEPOQNDCyE87m85foPCR5xDy4BuGS4fvHZ1MUhX5RNwfpUTUHZwYP47GKdeeO8ONkEl0Ao+j0N4CMAyHG083ZBQjPROdvBpCxcIMgCw9z0ncWq5qDpIERA954sVi2Z9IX1RCrmoNfDcgzKkzYD7uQvqiGWNUc9DJg4QjbBZC+qIZY1Rz0NrCYC4BRWCM6wxl4FJ0rGrA8RFIk/58fzsV/mbeILDsB3ueawVNXGHYAAAAASUVORK5CYII=</bitmap>
                    </item>
                    <item name="InputIsPath" type_name="gh_bool" type_code="1">false</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">67528d62-52cb-49ac-81a8-bf5da60910b0</item>
                    <item name="IsAdvancedMode" type_name="gh_bool" type_code="1">true</item>
                    <item name="MarshalOutGuids" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">connectors</item>
                    <item name="NickName" type_name="gh_string" type_code="10">connectors</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>298</X>
                          <Y>132</Y>
                          <W>148</W>
                          <H>204</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>395</X>
                          <Y>234</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="18">
                        <item name="InputCount" type_name="gh_int32" type_code="3">10</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="2" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="3" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="4" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="5" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="6" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="7" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="8" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="9" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">6</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="5" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="16">
                        <chunk name="InputParam" index="0">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">mesh with ngons or without</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c2e3ddf3-4587-47ab-ae40-6a0e7d7dc18f</item>
                            <item name="Name" type_name="gh_string" type_code="10">_mesh</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_mesh</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">cfdba6a4-b819-423d-8266-15331d1201a4</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">794a1f9d-21d5-4379-b987-9e8bbf433912</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>134</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>144</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _face_positions.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">2dd2a8d7-e7b9-419d-ae22-e830b3f29fa6</item>
                            <item name="Name" type_name="gh_string" type_code="10">_face_positions</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_face_positions</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">cd3664cd-9665-459e-8c66-f939407bdd71</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>154</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>164</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="2">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _face_thickness.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">48e69b77-dbd9-4075-9628-8ff505a39e58</item>
                            <item name="Name" type_name="gh_string" type_code="10">_face_thickness</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_face_thickness</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">b3ad95da-58c7-46ac-a8e1-19f2322dbe83</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>174</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>184</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="3">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _divisions.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">9bfec70d-9e46-40c2-ad26-eccb5a83e00e</item>
                            <item name="Name" type_name="gh_string" type_code="10">_divisions</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_divisions</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">e4b719fd-07c3-4878-b2f5-e1b80257c577</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">48d01794-d3d8-4aef-990e-127168822244</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>194</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>204</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="4">
                          <items count="13">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _division_len.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">af1c9883-c921-49a0-8261-14819bbe518a</item>
                            <item name="Name" type_name="gh_string" type_code="10">_division_len</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_division_len</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">cf79b87e-fa96-4923-8d6d-e6c0f281887b</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>214</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>224</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="5">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _edge_vectors.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">52998681-639b-44a3-a515-b50d16b7e3ba</item>
                            <item name="Name" type_name="gh_string" type_code="10">_edge_vectors</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_edge_vectors</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">f802a8cd-e699-4a94-97ea-83b5406271de</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>234</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>244</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="6">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _rect_width.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">75fd2ae6-a20b-4952-af43-be8986258d8a</item>
                            <item name="Name" type_name="gh_string" type_code="10">_rect_width</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_rect_width</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">178310cd-1c92-42f2-a638-2580f4f630d0</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>254</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>264</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="7">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _rect_height.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">7bfccf84-1a4f-443d-99ae-9e111cc23150</item>
                            <item name="Name" type_name="gh_string" type_code="10">_rect_height</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_rect_height</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">9e8ee455-6ff3-4241-9684-4dcbd03e47fe</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>274</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>284</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="8">
                          <items count="12">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _rect_thickness.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e6683e6b-de4f-413c-a460-73f71862b9fd</item>
                            <item name="Name" type_name="gh_string" type_code="10">_rect_thickness</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_rect_thickness</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">a4b9234e-efea-4ef4-a617-aad7133a254d</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">39fbc626-7a01-46ab-a18e-ec1c0c41685b</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>294</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>304</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="9">
                          <items count="12">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script input _projection.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f65471c5-8859-4188-95ca-a59f0a47ca8e</item>
                            <item name="Name" type_name="gh_string" type_code="10">_projection</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_projection</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">1</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">2ceb0405-fdfe-403d-a4d6-8786da45fb9d</item>
                            <item name="WireDisplay" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>300</X>
                                  <Y>314</Y>
                                  <W>80</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>341.5</X>
                                  <Y>324</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _f.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">1eebfb62-f0c5-434b-aa6a-11cd7bd26eae</item>
                            <item name="Name" type_name="gh_string" type_code="10">_f</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_f</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>134</Y>
                                  <W>34</W>
                                  <H>33</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>150.6667</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _f_pl.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b4220ee2-09f6-4ebb-97d5-abb7dfc9e1d7</item>
                            <item name="Name" type_name="gh_string" type_code="10">_f_pl</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_f_pl</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>167</Y>
                                  <W>34</W>
                                  <H>33</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>184</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _f_id.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">8109a748-f289-4692-a5e5-ff5ee5d3cac5</item>
                            <item name="Name" type_name="gh_string" type_code="10">_f_id</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_f_id</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>200</Y>
                                  <W>34</W>
                                  <H>33</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>217.3333</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _e.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">332abd31-b014-4068-8622-9a372b0aecf6</item>
                            <item name="Name" type_name="gh_string" type_code="10">_e</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_e</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>234</Y>
                                  <W>34</W>
                                  <H>33</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>250.6667</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _e_pl.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e666b8a6-ee69-4b1f-8356-aa9388004aa7</item>
                            <item name="Name" type_name="gh_string" type_code="10">_e_pl</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_e_pl</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>267</Y>
                                  <W>34</W>
                                  <H>33</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>284</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="5">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output _e_id.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0df08ba7-f9bc-4aa5-9f66-508feb17aef3</item>
                            <item name="Name" type_name="gh_string" type_code="10">_e_id</item>
                            <item name="NickName" type_name="gh_string" type_code="10">_e_id</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>410</X>
                                  <Y>300</Y>
                                  <W>34</W>
                                  <H>34</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>427</X>
                                  <Y>317.3333</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cd3664cd-9665-459e-8c66-f939407bdd71</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>43</X>
                          <Y>154</Y>
                          <W>206</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>43.73975</X>
                          <Y>154.6455</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">10</item>
                        <item name="Min" type_name="gh_double" type_code="6">-10</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">0</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">b3ad95da-58c7-46ac-a8e1-19f2322dbe83</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>43</X>
                          <Y>175</Y>
                          <W>206</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>43.96716</X>
                          <Y>175.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">10</item>
                        <item name="Min" type_name="gh_double" type_code="6">0</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">2</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">e4b719fd-07c3-4878-b2f5-e1b80257c577</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>71</X>
                          <Y>195</Y>
                          <W>179</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>71.39801</X>
                          <Y>195.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">10</item>
                        <item name="Min" type_name="gh_double" type_code="6">1</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">3</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cf79b87e-fa96-4923-8d6d-e6c0f281887b</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>57</X>
                          <Y>215</Y>
                          <W>194</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>57.06842</X>
                          <Y>215.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">100</item>
                        <item name="Min" type_name="gh_double" type_code="6">0</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">12</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">178310cd-1c92-42f2-a638-2580f4f630d0</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>66</X>
                          <Y>255</Y>
                          <W>188</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>66.07562</X>
                          <Y>255.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">20</item>
                        <item name="Min" type_name="gh_double" type_code="6">-20</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">-4</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="6">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">9e8ee455-6ff3-4241-9684-4dcbd03e47fe</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>61</X>
                          <Y>275</Y>
                          <W>192</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>61.98145</X>
                          <Y>275.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">20</item>
                        <item name="Min" type_name="gh_double" type_code="6">-20</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">-8</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="7">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">57da07bd-ecab-415d-9d86-af36d7073abc</item>
                <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Numeric slider for single values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a4b9234e-efea-4ef4-a617-aad7133a254d</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number Slider</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>51</X>
                          <Y>295</Y>
                          <W>205</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>51.33661</X>
                          <Y>295.3195</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="Slider">
                      <items count="7">
                        <item name="Digits" type_name="gh_int32" type_code="3">3</item>
                        <item name="GripDisplay" type_name="gh_int32" type_code="3">1</item>
                        <item name="Interval" type_name="gh_int32" type_code="3">1</item>
                        <item name="Max" type_name="gh_double" type_code="6">2</item>
                        <item name="Min" type_name="gh_double" type_code="6">1</item>
                        <item name="SnapCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="Value" type_name="gh_double" type_code="6">1</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="8">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">1e936df3-0eea-4246-8549-514cb8862b7a</item>
                <item name="Name" type_name="gh_string" type_code="10">Mesh</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of polygon meshes</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cfdba6a4-b819-423d-8266-15331d1201a4</item>
                    <item name="Name" type_name="gh_string" type_code="10">Mesh</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Mesh</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>196</X>
                          <Y>133</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>221.6175</X>
                          <Y>145.5615</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="2">
                                <item name="ON_Data" type_name="gh_bytearray" type_code="20">
                                  <stream length="3708">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</stream>
                                </item>
                                <item name="RefID" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="9">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">c552a431-af5b-46a9-a8a4-0fcbc27ef596</item>
                <item name="Name" type_name="gh_string" type_code="10">Group</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="18">
                    <item name="Border" type_name="gh_int32" type_code="3">1</item>
                    <item name="Colour" type_name="gh_drawing_color" type_code="36">
                      <ARGB>255;219;94;144</ARGB>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A group of Grasshopper objects</item>
                    <item name="ID" index="0" type_name="gh_guid" type_code="9">67528d62-52cb-49ac-81a8-bf5da60910b0</item>
                    <item name="ID" index="1" type_name="gh_guid" type_code="9">cd3664cd-9665-459e-8c66-f939407bdd71</item>
                    <item name="ID" index="2" type_name="gh_guid" type_code="9">b3ad95da-58c7-46ac-a8e1-19f2322dbe83</item>
                    <item name="ID" index="3" type_name="gh_guid" type_code="9">e4b719fd-07c3-4878-b2f5-e1b80257c577</item>
                    <item name="ID" index="4" type_name="gh_guid" type_code="9">cf79b87e-fa96-4923-8d6d-e6c0f281887b</item>
                    <item name="ID" index="5" type_name="gh_guid" type_code="9">178310cd-1c92-42f2-a638-2580f4f630d0</item>
                    <item name="ID" index="6" type_name="gh_guid" type_code="9">9e8ee455-6ff3-4241-9684-4dcbd03e47fe</item>
                    <item name="ID" index="7" type_name="gh_guid" type_code="9">a4b9234e-efea-4ef4-a617-aad7133a254d</item>
                    <item name="ID" index="8" type_name="gh_guid" type_code="9">43ffc55e-4fb8-4f4c-8c64-4e1af6d68d1e</item>
                    <item name="ID" index="9" type_name="gh_guid" type_code="9">cfdba6a4-b819-423d-8266-15331d1201a4</item>
                    <item name="ID" index="10" type_name="gh_guid" type_code="9">76c2fb92-1a95-4c3d-ba14-39f8e3473578</item>
                    <item name="ID_Count" type_name="gh_int32" type_code="3">11</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6ae0b5a7-4a60-4a6f-bd9a-425575851a05</item>
                    <item name="Name" type_name="gh_string" type_code="10">Group</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes" />
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="10">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">7f5c6c55-f846-4a08-9c9a-cfdc285cc6fe</item>
                <item name="Name" type_name="gh_string" type_code="10">Scribble</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="13">
                    <item name="Bold" type_name="gh_bool" type_code="1">true</item>
                    <item name="Ca" type_name="gh_drawing_pointf" type_code="31">
                      <X>41.60876</X>
                      <Y>69.65344</Y>
                    </item>
                    <item name="Cb" type_name="gh_drawing_pointf" type_code="31">
                      <X>412.2386</X>
                      <Y>69.65344</Y>
                    </item>
                    <item name="Cc" type_name="gh_drawing_pointf" type_code="31">
                      <X>412.2386</X>
                      <Y>107.6417</Y>
                    </item>
                    <item name="Cd" type_name="gh_drawing_pointf" type_code="31">
                      <X>41.60876</X>
                      <Y>107.6417</Y>
                    </item>
                    <item name="Description" type_name="gh_string" type_code="10">A quick note</item>
                    <item name="Font" type_name="gh_string" type_code="10">Microsoft Sans Serif</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">76c2fb92-1a95-4c3d-ba14-39f8e3473578</item>
                    <item name="Italic" type_name="gh_bool" type_code="1">false</item>
                    <item name="Name" type_name="gh_string" type_code="10">Scribble</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Scribble</item>
                    <item name="Size" type_name="gh_single" type_code="5">50</item>
                    <item name="Text" type_name="gh_string" type_code="10">CONNECTORS</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>36.60876</X>
                          <Y>64.65344</Y>
                          <W>380.6299</W>
                          <H>47.98828</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>41.60876</X>
                          <Y>69.65344</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="5924">iVBORw0KGgoAAAANSUhEUgAAAOEAAACWCAIAAACn9nhUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAABa5SURBVHhe7Z13VFznmYfzT7aeJM46cY9790pxFBc5si3HLZZkWbZEr6qWMepGQgiERB2mD8PAwAwz9CZ6LwMMVSCBaFOZBgygatmb3c3uybbs786VMJacbE42J+eaeR+/557vlrmMjh/ecmcsf4cgvgX8jiC4yleOzhME9yBHCa5DjhJchxwluA45SnAdcpTgOuQowXXIUYLrkKME1yFHCa5DjhJchxwluA45SnAdcpTgOuQowXXIUYLrkKME1yFHCa5DjhJchxwluA45SnAdr3TU7V64eHHxi6uL17+VsbCwcOMP4h14o6MQ1GEwG2q6TPX6b1nU6Q0N+hmna2HRizT1RkcXv7hmaNQbNiZYfdIsPmkOP9FsgMTmK8AaYfXhz/iLZ/wlWGDX5ivEBexxLLB1+ommfZlTdl8hzmLtuZ6JpStdN+9wc30jpj0/xeEnxE+0+wmxtty8ANul94BTyy9YCutW3oQfb3rSuHj50o0/jBfglY5ev2pq6bP48h1hssu7cs75JVdvPGwJkSzszHKFyxd3Kls+iG7aHI3duR2KiUC+IUg4t10xHSod8U+1h8lG/VNnwuW4cjKQPxUksIZI9FtP4iWIAZ+E2e0Zl3Zl6z6MbXz/6PyOTGd4etuWmM4PY/Vb45s/iMZLru5WXQhIrdp4GOvLu7Jxw7O+ic2bo3EZbuXeocCrcNvqjUdwAd6MLVSKa9hwhEiN2yW2KRM5usJZchSCKn+5a82PHwl6at2Ldz/WtPnY5d3Z/k++8u6Dqzc89LzP4y9/vkctXBf8xB33uHdkTgbx331oNUxd9aMH41/a9j/7y6J//kHCWl/I9ND3frTp4TXvPLgq/qWt/7RXu2/1r9bf/8yWR1/Y/MiaIb8k3yfWrrrzwUe+f9d7D/20e+vJsvcOrLnrkeCnXv35XY/WbDoysz1j9Z0P4mJc9sq9Tw77JXV+FPf6/c8EPPkLvAoXL+5SkqNe6qjdX2gMFj5xx71Q8z8ii+Gi9LUw2evhr9731PU96i/3at55cLXo1RDVm3u+992/gZRIkK/e97Q5RLzuvqce+8HdlhBx7Isfxb74ofatvR88+vPrH+c6wtIv7c4ufnffc3c+gASMI3v/8e3KDYd+G1nMXxeEX4N/+7TQFCx6+of3IcXioPbtT37244eRp6Embv67g5UbH/5Z6isBSWv9Xrvvabh+ZsOhzDd2Lu7MIke91NGZAAlceenuxy7uUtrCpFDqv/eVfvjoC2nrArFGBpW+Hhb69Gvpr4cffn4jklzBOxHvP7JmKliw9bGXkD53PfvLxLW+J1/aBgvv/rsfIPWuv//Zig0HcTD8mdd/vVeLe/7zJ3nzO7Ou7Fal/SKQdbTu/ai19zxxeXeO09MtIKG2bzmx6s6fIG2/+cBzeDPn/VPg6/Zn1iOv4yUXAnjYJUe91FGHv2jIN/GpH96L1Ig8Wrvps8J3Io+t2Ywq/J/7Sv5rX+nu5948umaz5LWw4y9s6fdJQM5744FnzSGit36yCv3ioec3PH7HPYJ1wXlvf/LhYy9ARLQBkBuZGJX6NxEF/xpRgMSM2/76kzyex1Eoi9YTnYMhWIg82u9z+tl/uB/F/eV7HkfRz1i/HY6iH816Y+egb+KXH2v2r/7V2z9Zhd8WctRLHUU/emVXTuTqd5H/UIufvONexRs74QHa0/0/fe/Q8xshJbRDld/z3Ju/O1gRseqd7/3V3+KCdfc+NeibgGHo77/716de3lb8buQj3/8x6j5eAqGR9n75wHPhz6xHt4pGAqMS1Exc67f18ZdgMDIosjK6Bcj9wl2Poqzjhj/90UPoOv4jsmTTwz9Dd4EW+fEf3AOt0b/il+TK7hxWUAQ56nWOusLTMbznvLkHmRIJD50fSvN4IP/0yz5QE3UWM3jXR3GYuOd3ZqIBRa+JCl614TDyKIZ3DPKYb8YD05Avk9f6J7/ir37rY0zi1lBJyisBJ1/cioEJ98dU1LvtVMPmo9DXEZ6O1kLz9l4YXPKr/VDWEiIpf+8Abo6xDELXbYq6tkeNUQl2qt/8GAfR5pKj3uuoA//WMejsyoYW7GgCBWHS1T2qa3tUWCCPYvqZ35GJBdpHXIlrYCGSqC1UipfgLI5DZTaY1tZzJda4A87ihoi57QrIigXjWZiM/Ym4mN3FAm8DL4SR+FlY4AguwGU4i2uWghz1RkeXG/CnBW7iCk1nIowJp2f9++7sCpG5gv8/QY56B39GR5FQTcGi0QDeVKhoMkRoDJdgOxqQagkWo6zfenFY+th20fAu4fmdom+OXUycu+XgzcALjSEi03YpObry+XM5ipdP+/B7MkrMBlNLVV3k9t27AkOHunonJyZ7UjROXxE0RRFnYyZcPuKT3N/SaZ91WazW5TFtm7Y7HC6Xy2a3W6enrctOgembR6xu17C8zOjPJ0dXPssdRW5ja/QfDlx2e1wMU5RvOlxZX3v1y+v7Dh5I4fN27NnFFwv/5bf/rtVoazYccYTKTMh8wUzYA8XibZ+enRz94ssvL125vBRXrl21OezNLc1VNdU1tbXD585d+/zzpbOXr16ZX1i4dJlZX/vNr/XKspGtifYpMzm6wllyFJ6ZgoSTQfypYMEUtstj2ZHJQP54QNpEQBq2N4OHV5kDhXUbjpTm5s/Ouw8ePLh+/fq33nqroKDAOT9XKFIMbolnEm2olA00qW0+cecGzl75/NrSl+uwAJOTkwaDYWRkZGxszG63Lz+L3fb29sXFRexe/+J6Xn5e8fsH3YZpcnSFwzo67SswBgoKeSqtsqQgs7g4u9wTZYjCrJK8jKIiZSkiX1FSpMwf7z97offsWN/QWB+2zGJI1zOiHxjrHtS3d3br9U1NTSdOnBCJRL29vbqe7qbSypHA1BmmyjMtAWImTH7ON2mkbxB6zc3NXfQA+QAWeFdXriBtXsau+yZw1GQyWSwWLLB78YtrOkXx8NYEB+XRFQ/rqM1XMB7IU2UWJ4uyIw/FHI1JSkyVn0wUR8emHotN+Sw6IeYk/3hcWgpfWVHdOLvgtrkcNpeT2c447TOuuqaGtk5djkbtcDrNZjO6Rtx5dnYWayS/YeM4L3i/1U+AKm/0hD2AqfWD4yMj50cyM/E7UdzY2Nja2orFmTNnKjyUl5fr9XooC4lZ2DfMrt2fXx7JrjL4pVE/uvJZyqMo9LyolONxqSdiUk7EJB+NOoWIi+UhTp7kx8amxp/kx8WmCQWyrk5dR3s7QtfRgejU6err6psam2qqq7HLnlqKzu6u6tKKbv8E1Hcb88yVCax7fU8PdvearGYU9/Hx8XPnzg0NDWE9NTUFsycmJpA1sYCOcH0JvGFGULd77tqlkawqox9/mhxd8XzlaKAgOzFDnlWgzCzIyS7OURZnKvIRWZmIgmxlUXZWoUKel6nI6e/r6+vp7e/t6+3pQXTpOgf6+3EQ275eHP1a9A8OtFTUMF8zDZMvPQTAut8n4XzfoHtxweFwMG9jcdHpdGKNiR6wamI7swzsQlycRZ5evHa5WVHQ91G802AhR1c4y2u9JrMkTaI6EnXqRCwvjZ8VF8dPSJDExwuwPXGCdzwmWShUVVU1uufnIJN7fh7luKampquri9HL6bDjH8CY9hUQ67xpkhcYeWut94nsv3Cup6cHtb6oqAi1vrq6GjesrKysq6vDkdzcXNwZ75AVFMoixeJUaWkpJqfPv7iu1WhLNx9yG2lmWuksOWoIEvBi+LEJoti4tLiT/JiYlFOnBElJ0vh4mCqGqbGxvNOnxBKJApMQOkXoBbEwHrW0tGCtx6wEsGXjJsiuNZVVHf6nZjy1ns2jrjD5kG/SgK7bPG1FagQo96jscB1TEVpYZEocxJZNqwCaGo1GNAOjo6OM+lcv6tOLxrelUD+68mEd9Tx7kg0Hp/WH8s6G8bsDEpW8rNz8KqWySKUqzckpUanK1OoybLOyNENDZ897gC7DQ8PoI8+ePYvpBz0le3w5I6OjMLgnPNUVfENQth/t9Ikf1PcuXLoI+aAg0i22UNBqZayFqayssJYFXrLZFFcy+5fmhzIrpnxpZvIClhx1hMlmw+RzYfKLoQqHv1Ar0gpl2qio00lJMmRQ1PqYmNSkJHlhYZXdbgOQBo6iImMeHxwchDbWaeZzIICz7ALgMpPLlvjx4fGPkk0hYhR65hm+Z67vOtsH4XABC/JxYWFhfX09hnoM+AADGKS8cdoDKzS2jovuoYxyM81M3sByR5HksJ0IFfYHJQti0k4mipKTZampclT8pERJSoo8OTk9LU2m03WgiDP1Xa9va2vTecC6+5vo6e1tbGluD0uaDbnxkT3zfDRcPuqbMtDRPeOeg9DwGykTSRQWsoUe4CC22F0OcvbY2BgStvvSYkVmbuuHMTMGKzm6wlnuqDMs3RjI1/JVmoLqDHleTk4pan02ZvycUrW6XKlkFgqFZnBwAD6hviN9Qhq0p+gmoc6FCxewvZ3z4xda9gts/iJPoZcyX9gLTW/yOdHT1e2anYGXaDShHUYi3AG3MhgMODIyMoItk7FtNvY5K45gZsKUhowLL/OV6uoPouboc6YVz3JHXWHpk4FpWWJNkiTn8LHT8YmSozHJiBPx/BR+ZsSB6IQUeZaqeNJscF9cqKqvLS4v7R0cqK6vtbkcVofN4rBhuxTs7rTTjrqcEhM/sPmkNUTCfl7vCBRLt0Z29OtRtdF3VlVVobLX1taWeGhoaEDFx7yP34H+/n6lMruhoRG/EtM3W1X4Oj0/0yctMtIzfG/gljxqCRLKDiUnRKcK4kTCODE/VsSPFQpiRclHU7AWxUtTj6c2lpzprmtpr6xH6KobWsqrO2saO6t/T9Q0tVTXt+3GzCTFj2DDFS6f8E3tb9XZZ1zIkciXbLnHwMT45xnqmWHe5erW69W5muKS0r6+fmRcXACgqXXO1Z9eMkWOegO39aPp5iAh8/WRQD5yKrZsGIIEzJGANMSEP2/cjzdxcz0ZwB/Hkd8fE3482L/8K6SzofIan+OdOh1qPeo7elnkS7QNqPJYAPQPAwMDExMT6HpramqlMll3tx76ou5DUGhtmXUMSIvNfgKamVY+tziKcIanY7pfCE6f/6ZYCJHPB6XPBkhmA6R/TMx5YunBExvukPQsnwPtvd0QrqysTKvVZmRk5ObmYpDPz89H3S8oKCgtLcUoBmuZB1sjI+xjqb6+PvbDUvuMszhD1UwzkzfwDY6Gyka2i3QRIn2ktMcT3RFi/aeS3n0yROdeYXeEaPizzKEjiuUxGp2D7fmjyttPDUYpxvbK5kJvfBaKH4S53uDL621qN1otsBDFHVt2NmJHe/YxE1v04TELZIW77Ef5dpczLyO7bsuxWXJ0xXO7oy5/UWlMurq6Wa4qlmUXZahLcwqqsBbIc/nparmqpK6tzbEwa3RMm5w2o3Pa5LJh3dbTNTlt7hkeHDNPmV12nLoZ0/ZL7oYz1R2bYzCTWUMlCPSmpdui2nUdVhtjJ9QcHh5ubW1ta2vDgI/Sj3V5eTmyJk7hAhbYiV00r1jj5/aICkz0fNQbuN3RuQBx8RFxmlx76HDc/v0x0dFJsbFpR48mREYeO3w4ji/IqatrRLJDzZ0yGLCBNOPj4yjWUEqtVmMYR57znMV55gKH01lWW6ndtN8VIjOHiMwhYkeQRLXtUEtnu8VqwcvPnz9fXV2t0WhQ5SsrK8+cOYNCj93Ozs4bt7odh7VHWkQzk1dwi6PMI9JQkTwqNYEnE4myJZIcHk/O5yvE4hyETJabkCDOzlZ1dXW1t7cj7QGsAfsMHx3k0vElWns6G1KUM34idLpszG7PMPmldde1GKdvfDcPpRxTPDpOKItCj7rPfHBltSJ34oIl2DyK7aTd0iXQGumzUG/gFkfngmWtEUJ1eUNOdqlcnpeRkZ+TUwY1FYp87EokaoWiQN/dA40gCsRC74hsh0kc6ROOYtfTOn4FLnO6ZysyNd2bT+BHWEIklhCxM0ii3Xakub3NZDYjJ2K0r6+vr62txa1Q5WtqapqbmysqKlpaWtgSz5qKLS7DL0NVVZXJYlYrlFVb6Bm+F/A1R8NllwJkrTtSUmXq6Ojkgwdjo6JOnzolOnSIKfqffnrs2LGk5GR5W1s7zGM/Q4JDJSUlsAqgTCPJsceXY7XbVBmZ9Rs/wzSGQs84GiwtgKNtrSazCeYh+6K4A2gKC3FDlUqFug9TlxyFyr29vYWFhbgMjYHJZimVZndujXPR90dXPMsddYRI9RES7QlpmjBTKlOnp2ukUrVIpJTLtVKJSizOVmTk8XgZWZk5fcz3m3uQ9nQdX/ukvqOjg/nw/ut09HbXSzWuAIkrXL5U61GmdTWNBgsaThPMRllnp3jYzw747BaKoxMA7AJXIqFC3DGrETOTJYCej3oBS44yHzL587UijaayGa2nSJSTmVkkFKIlVYvFKplMgy12lcqyysqGnp5uNJqjo6MQCzItccsuCxrNEcO4OijKHiBCEkUqRa1XbjvQ2NEK88rKyoqKipqamjAqIYMiGSNNIlniIOo+jEQnsBwmM4+NXTAbukT5Rn/qR72A5Y5aAwTy0+lx4qwDx08fjEmMiud9djI1OkFwJC7l2GnBgeMJn0bFxaWmq0sq6jqay+qrmf9ozjQ5ap76w4H5pnNkMCvwMOsoWlJniKx829Gm5mZdV2d5eTnUhKBQs66uDr1mQ0MDDubn56PWI3fiN4EFgqLiQ1AchKNtPDX9N3dewfJa7wyR1u1I1n6SVLZfULqPXxSRUhKZhgUTkXwcRBRFpBZFJPWkanpTtV2Jqs6EHJ0n2MXS7tJB5kiSqj1GPh3M1HrP31PCPMOf8uW1VdaPM6X7BqjjAPWdKf8mE6o/DjLfkvYAR8+dO4fkikFKo9GMTYwr5YozWz6jmWnl87WZCXN9SLo7SDr3f4XDT+T8o8PhK3T5i2En+/wV4Q6RZ/ocqGlpREaEhUiQyJ2YhwD802q17BYNAE4x3+b3fOcf/S6G/cbGRuTXC1MTJQLm73+kmWnlc4ujf5mYC5XXbIuuaW64MG08bxgfGDtfVlfV0NlW0VBTUltZ295c39FS3drYPTSAs8NTY0xMjmF9wWIY9XQXw3aDTpRn9qeZyQtgHG3utW5NY74795cKZ7DUFSjRHc9oF+S2p6o7eOpuYV6XIA9bvSgfW0/k69I0OPuN0crPHYgQW4JE1I+ufBY/v2ps6x8PFhh3ywx/wTDuTjeFiQ1BQkPwnxRBQnOY5MJeqc1Af5fOSmdhYWF2ZtZutn4rwzLtdrtv/Em8A290FEDTxUsXv6Ux713/S1tvdZT4FkGOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRguuQowTXIUcJrkOOElyHHCW4DjlKcB1ylOA65CjBdchRgut8zVGC4CY3HCUI7vKd7/wvns0Q/muIvKwAAAAASUVORK5CYII=</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>