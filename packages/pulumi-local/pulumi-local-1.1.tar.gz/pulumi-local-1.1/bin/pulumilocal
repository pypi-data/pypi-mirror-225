#!/usr/bin/env python

"""
Thin wrapper around the "pulumi" command line interface (CLI) to use
Pulumi (https://pulumi.com) with LocalStack (https://localstack.cloud).

Options:
  Run "pulumi -h" for more details on the pulumi CLI subcommands.
"""

import os
import sys
import argparse
import subprocess

# for local testing
PARENT_FOLDER = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.isdir(os.path.join(PARENT_FOLDER, '.venv')):
    sys.path.insert(0, PARENT_FOLDER)

# define global constants
TRUE_STRINGS = ['1', 'true', 'True']
PULUMI_CMD = os.environ.get('PULUMI_CMD') or 'pulumi'
LOCALSTACK_HOSTNAME = os.environ.get('LOCALSTACK_HOSTNAME') or 'localhost'
EDGE_PORT = int(os.environ.get('EDGE_PORT') or '4566')
USE_SSL = os.environ.get('USE_SSL') in TRUE_STRINGS

# Do not allow PULUMI_CMD env var to be set to pulumilocal as this causes an error
if PULUMI_CMD == "pulumilocal":
    PULUMI_CMD = "pulumi"

# Unfortunately, we need to hardcode the service names here, as importing from
# localstack-client doesn't work (some keys differ / are unavailable in Pulumi)
SERVICES = [
    'accessanalyzer',
    'account',
    'acm',
    'acmpca',
    'alexaforbusiness',
    'amp',
    'amplify',
    'amplifybackend',
    'apigateway',
    'apigatewayv2',
    'appautoscaling',
    'appconfig',
    'appflow',
    'appintegrations',
    'appintegrationsservice',
    'applicationautoscaling',
    'applicationcostprofiler',
    'applicationdiscovery',
    'applicationdiscoveryservice',
    'applicationinsights',
    'appmesh',
    'appregistry',
    'apprunner',
    'appstream',
    'appsync',
    'athena',
    'auditmanager',
    'augmentedairuntime',
    'autoscaling',
    'autoscalingplans',
    'backup',
    'batch',
    'braket',
    'budgets',
    'chime',
    'cloud9',
    'cloudcontrol',
    'cloudcontrolapi',
    'clouddirectory',
    'cloudformation',
    'cloudfront',
    'cloudhsm',
    'cloudhsmv2',
    'cloudsearch',
    'cloudsearchdomain',
    'cloudtrail',
    'cloudwatch',
    'cloudwatchevents',
    'cloudwatchlogs',
    'codeartifact',
    'codebuild',
    'codecommit',
    'codedeploy',
    'codeguruprofiler',
    'codegurureviewer',
    'codepipeline',
    'codestar',
    'codestarconnections',
    'codestarnotifications',
    'cognitoidentity',
    'cognitoidentityprovider',
    'cognitoidp',
    'cognitosync',
    'comprehend',
    'comprehendmedical',
    'config',
    'configservice',
    'connect',
    'connectcontactlens',
    'connectparticipant',
    'costandusagereportservice',
    'costexplorer',
    'cur',
    'databasemigration',
    'databasemigrationservice',
    'dataexchange',
    'datapipeline',
    'datasync',
    'dax',
    'detective',
    'devicefarm',
    'devopsguru',
    'directconnect',
    'dlm',
    'dms',
    'docdb',
    'ds',
    'dynamodb',
    'dynamodbstreams',
    'ec2',
    'ec2instanceconnect',
    'ecr',
    'ecrpublic',
    'ecs',
    'efs',
    'eks',
    'elasticache',
    'elasticbeanstalk',
    'elasticinference',
    'elasticsearch',
    'elasticsearchservice',
    'elastictranscoder',
    'elb',
    'elbv2',
    'emr',
    'emrcontainers',
    'es',
    'eventbridge',
    'events',
    'finspace',
    'finspacedata',
    'firehose',
    'fis',
    'fms',
    'forecast',
    'forecastquery',
    'forecastqueryservice',
    'forecastservice',
    'frauddetector',
    'fsx',
    'gamelift',
    'glacier',
    'globalaccelerator',
    'glue',
    'gluedatabrew',
    'greengrass',
    'greengrassv2',
    'groundstation',
    'guardduty',
    'health',
    'healthlake',
    'honeycode',
    'iam',
    'identitystore',
    'imagebuilder',
    'inspector',
    'iot',
    'iot1clickdevices',
    'iot1clickdevicesservice',
    'iot1clickprojects',
    'iotanalytics',
    'iotdataplane',
    'iotdeviceadvisor',
    'iotevents',
    'ioteventsdata',
    'iotfleethub',
    'iotjobsdataplane',
    'iotsecuretunneling',
    'iotsitewise',
    'iotthingsgraph',
    'iotwireless',
    'kafka',
    'kafkaconnect',
    'kendra',
    'kinesis',
    'kinesisanalytics',
    'kinesisanalyticsv2',
    'kinesisvideo',
    'kinesisvideoarchivedmedia',
    'kinesisvideomedia',
    'kinesisvideosignalingchannels',
    'kms',
    'lakeformation',
    'lambda',
    'lexmodelbuilding',
    'lexmodelbuildingservice',
    'lexmodels',
    'lexmodelsv2',
    'lexruntime',
    'lexruntimeservice',
    'lexruntimev2',
    'licensemanager',
    'lightsail',
    'location',
    'lookoutequipment',
    'lookoutforvision',
    'lookoutmetrics',
    'machinelearning',
    'macie',
    'macie2',
    'managedblockchain',
    'marketplacecatalog',
    'marketplacecommerceanalytics',
    'marketplaceentitlement',
    'marketplaceentitlementservice',
    'marketplacemetering',
    'mediaconnect',
    'mediaconvert',
    'medialive',
    'mediapackage',
    'mediapackagevod',
    'mediastore',
    'mediastoredata',
    'mediatailor',
    'memorydb',
    'mgn',
    'migrationhub',
    'migrationhubconfig',
    'mobile',
    'mq',
    'mturk',
    'mwaa',
    'neptune',
    'networkfirewall',
    'networkmanager',
    'nimblestudio',
    'opsworks',
    'opsworkscm',
    'organizations',
    'outposts',
    'personalize',
    'personalizeevents',
    'personalizeruntime',
    'pi',
    'pinpoint',
    'pinpointemail',
    'pinpointsmsvoice',
    'polly',
    'pricing',
    'prometheus',
    'prometheusservice',
    'proton',
    'qldb',
    'qldbsession',
    'quicksight',
    'ram',
    'rds',
    'rdsdata',
    'rdsdataservice',
    'redshift',
    'redshiftdata',
    'rekognition',
    'resourcegroups',
    'resourcegroupstagging',
    'resourcegroupstaggingapi',
    'robomaker',
    'route53',
    'route53domains',
    'route53recoverycontrolconfig',
    'route53recoveryreadiness',
    'route53resolver',
    's3',
    's3control',
    's3outposts',
    'sagemaker',
    'sagemakeredgemanager',
    'sagemakerfeaturestoreruntime',
    'sagemakerruntime',
    'savingsplans',
    'schemas',
    'sdb',
    'secretsmanager',
    'securityhub',
    'serverlessapplicationrepository',
    'serverlessapprepo',
    'serverlessrepo',
    'servicecatalog',
    'servicediscovery',
    'servicequotas',
    'ses',
    'sesv2',
    'sfn',
    'shield',
    'signer',
    'simpledb',
    'sms',
    'snowball',
    'sns',
    'sqs',
    'ssm',
    'ssmcontacts',
    'ssmincidents',
    'sso',
    'ssoadmin',
    'ssooidc',
    'stepfunctions',
    'storagegateway',
    'sts',
    'support',
    'swf',
    'synthetics',
    'textract',
    'timestreamquery',
    'timestreamwrite',
    'transcribe',
    'transcribeservice',
    'transcribestreaming',
    'transcribestreamingservice',
    'transfer',
    'translate',
    'waf',
    'wafregional',
    'wafv2',
    'wellarchitected',
    'workdocs',
    'worklink',
    'workmail',
    'workmailmessageflow',
    'workspaces',
    'xray',
]


def get_service_endpoint():
    protocol = 'https' if USE_SSL else 'http'
    endpoint = '%s://%s:%s' % (protocol, LOCALSTACK_HOSTNAME, EDGE_PORT)
    return endpoint


def set_localstack_pulumi_config(args: argparse.Namespace):
    # LocalStack Endpoint
    service_url = get_service_endpoint()
    # Create argument list to pulumi config set-all
    config_args = list()
    config_args.append(PULUMI_CMD)
    config_args.append("config")
    # If stack arg was supplied, add it to config command
    if args.stack is not None:
        config_args.append("--stack")
        config_args.append(args.stack)
    # If cwd arg was supplied, add it to config command
    if args.cwd is not None:
        config_args.append("--cwd")
        config_args.append(args.cwd)
    config_args.append("set-all")
    config_args.append("--plaintext")
    config_args.append("aws:region=us-east-1")
    config_args.append("--plaintext")
    config_args.append("aws:accessKey=test")
    config_args.append("--plaintext")
    config_args.append("aws:secretKey=test")
    config_args.append("--plaintext")
    config_args.append("aws:s3UsePathStyle=true")
    config_args.append("--plaintext")
    config_args.append("aws:skipCredentialsValidation=true")
    config_args.append("--plaintext")
    config_args.append("aws:skipRequestingAccountId=true")
    # Add the AWS Endpoints list
    for idx, service in enumerate(SERVICES):
        config_args.append("--path")
        config_args.append("--plaintext")
        config_args.append(f"aws:endpoints[{idx}].{service}={service_url}")
    process = subprocess.Popen(executable=PULUMI_CMD, args=config_args, env=os.environ, stdout=subprocess.PIPE)
    process.wait()


def main():
    # Parse arguments from call to pulumi CLI that set the stack name and directory
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("command", help="pulumi primary command",
                        type=str)
    parser.add_argument("-s", "--stack", help="pulumi stack name",
                        required=False,
                        type=str)
    parser.add_argument("-C", "--cwd", help="run in this directory",
                        required=False,
                        type=str)
    args, extra = parser.parse_known_args()

    # If this is a pulumi deployment command, update the stack with LocalStack AWS config
    if args.command in ["up", "destroy", "preview", "cancel"]:
        print("Updating this Stack with LocalStack config")
        set_localstack_pulumi_config(args)
    # Run the original command
    return os.execvp(PULUMI_CMD, sys.argv)


if __name__ == '__main__':
    main()
