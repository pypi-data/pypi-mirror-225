# ============== #
# NMAP FUNCTIONS #
# ============== #
import os
import re
from typing import List

from pentest_helper.utils import check_running_with_root, run_cmd_then_print

from .consts import (
    DEFAULT_RATE,
    FOLDER_HOSTS,
    FOLDER_NMAP,
    NAME_NMAP_TCP_FULL_SIMPLE,
    NAME_NMAP_TCP_OPEN_SC_SV,
    NAME_NMAP_TCP_TOP_SIMPLE,
    NAME_NMAP_UDP_OPEN_SC_SV,
    NAME_NMAP_UDP_TOP_SIMPLE,
)
from .utils import logger


def ip_from_gnmap(filepath: str) -> List[str]:
    data = open(filepath).readlines()
    data = [e for e in data if "Status: Up" in e]
    ip = [e.split()[1] for e in data]
    return ip


def get_ports_from_gnmap(filepath: str, *, protocol) -> str:
    """

    Args:
        filepath:
        protocol:

    Returns:

    Examples:
        "21,22,25"
    """
    if protocol not in ["tcp", "udp"]:
        raise ValueError(f"Protocol must be 'tcp' or 'udp'")

    data = open(filepath).read()
    # FIXME: We can filter by IP?
    ports = re.findall(rf"(\d+)/open/{protocol}", data)
    ports = ",".join(ports)
    return ports


def get_nmap_host_path(mission_path, target):
    return os.path.join(mission_path, FOLDER_HOSTS, target, FOLDER_NMAP)


def get_nmap_host_path_name(mission_path, *, target, name):
    host_path = get_nmap_host_path(mission_path, target)
    return os.path.join(host_path, name)


def nmap_host(target, *, rate=None, mission_path):
    """Scan a host with:
    - TCP full ports
    - TCP sc sv on open ports
    - UDP top 1000 ports
    - UDP sc sv on open ports
    """
    nmap_host_tcp_top(target, rate=rate, mission_path=mission_path)
    nmap_host_tcp_full(target, rate=rate, mission_path=mission_path)
    nmap_host_tcp_sc_sv(target, rate=rate, mission_path=mission_path)
    nmap_host_udp_1000(target, rate=rate, mission_path=mission_path)
    nmap_host_udp_sc_sv(target, rate=rate, mission_path=mission_path)


def nmap_host_tcp_top(target, *, mission_path, rate=None):
    _nmap_scan(
        target,
        ["-v", "-Pn", "-T4"],
        rate=rate,
        name=NAME_NMAP_TCP_TOP_SIMPLE,
        mission_path=mission_path,
    )


def nmap_host_tcp_full(target, *, mission_path, rate=None):
    _nmap_scan(
        target,
        ["-v", "-Pn", "-p-", "-T4", "-O"],
        rate=rate,
        name=NAME_NMAP_TCP_FULL_SIMPLE,
        mission_path=mission_path,
    )


def nmap_host_tcp_sc_sv(target, *, mission_path, rate=None):
    output_path_gnmap = (
        get_nmap_host_path_name(
            mission_path, target=target, name=NAME_NMAP_TCP_FULL_SIMPLE
        )
        + ".gnmap"
    )
    ports = get_ports_from_gnmap(output_path_gnmap, protocol="tcp")
    if not ports:
        logger.info("No ports identified for TCP -sC -sV")
        return

    _nmap_scan(
        target,
        ["-n", "-v", "-Pn", "-p", ports, "-sC", "-sV"],
        rate=rate,
        name=NAME_NMAP_TCP_OPEN_SC_SV,
        mission_path=mission_path,
    )


def nmap_host_udp_1000(target, *, mission_path, rate=None):
    _nmap_scan(
        target,
        ["--open", "-vvv", "-n", "-Pn", "-sU"],
        rate=rate,
        name=NAME_NMAP_UDP_TOP_SIMPLE,
        mission_path=mission_path,
    )


def nmap_host_udp_sc_sv(target, *, mission_path, rate=None):
    output_path_gnmap = (
        get_nmap_host_path_name(
            mission_path, target=target, name=NAME_NMAP_UDP_TOP_SIMPLE
        )
        + ".gnmap"
    )
    ports = get_ports_from_gnmap(output_path_gnmap, protocol="udp")
    if not ports:
        logger.info("No ports identified for UDP -sC -sV")
        return

    _nmap_scan(
        target,
        ["-n", "-v", "-Pn", "-p", ports, "-sC", "-sV", "-sU"],
        rate=rate,
        name=NAME_NMAP_UDP_OPEN_SC_SV,
        mission_path=mission_path,
    )


def _nmap_scan(
    target: str, nmap_cmd_args: List[str], *, mission_path, rate: int = None, name: str
):
    check_running_with_root()

    if rate is None:
        rate = DEFAULT_RATE

    if mission_path is None:
        mission_path = os.getcwd()

    host_path = get_nmap_host_path(mission_path, target)
    if not os.path.exists(host_path):
        os.makedirs(host_path)

    output_path = get_nmap_host_path_name(mission_path, target=target, name=name)

    run_cmd_then_print(
        ["nmap", target, f"--min-rate={rate}", *nmap_cmd_args, "-oA", output_path]
    )
