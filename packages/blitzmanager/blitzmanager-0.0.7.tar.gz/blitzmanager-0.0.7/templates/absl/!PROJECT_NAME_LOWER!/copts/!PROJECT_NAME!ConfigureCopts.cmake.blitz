!BLITZ_NOTICE!

# See !PROJECT_NAME_LOWER!/copts/copts.py and !PROJECT_NAME_LOWER!/copts/generate_copts.py
include(GENERATED_!PROJECT_NAME!Copts)

set(!PROJECT_NAME_CAPITAL!_LSAN_LINKOPTS "")
set(!PROJECT_NAME_CAPITAL!_HAVE_LSAN OFF)
set(!PROJECT_NAME_CAPITAL!_DEFAULT_LINKOPTS "")

if (BUILD_SHARED_LIBS AND MSVC)
  set(!PROJECT_NAME_CAPITAL!_BUILD_DLL TRUE)
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
else()
  set(!PROJECT_NAME_CAPITAL!_BUILD_DLL FALSE)
endif()

if("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "x86_64|amd64|AMD64")
  if (MSVC)
    set(!PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS "${!PROJECT_NAME_CAPITAL!_RANDOM_HWAES_MSVC_X64_FLAGS}")
  else()
    set(!PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS "${!PROJECT_NAME_CAPITAL!_RANDOM_HWAES_X64_FLAGS}")
  endif()
elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "arm.*|aarch64")
  if ("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(!PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS "${!PROJECT_NAME_CAPITAL!_RANDOM_HWAES_ARM64_FLAGS}")
  elseif("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
    set(!PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS "${!PROJECT_NAME_CAPITAL!_RANDOM_HWAES_ARM32_FLAGS}")
  else()
    message(WARNING "Value of CMAKE_SIZEOF_VOID_P (${CMAKE_SIZEOF_VOID_P}) is not supported.")
  endif()
else()
  message(WARNING "Value of CMAKE_SYSTEM_PROCESSOR (${CMAKE_SYSTEM_PROCESSOR}) is unknown and cannot be used to set !PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS")
  set(!PROJECT_NAME_CAPITAL!_RANDOM_RANDEN_COPTS "")
endif()


if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set(!PROJECT_NAME_CAPITAL!_DEFAULT_COPTS "${!PROJECT_NAME_CAPITAL!_GCC_FLAGS}")
  set(!PROJECT_NAME_CAPITAL!_TEST_COPTS "${!PROJECT_NAME_CAPITAL!_GCC_FLAGS};${!PROJECT_NAME_CAPITAL!_GCC_TEST_FLAGS}")
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  # MATCHES so we get both Clang and AppleClang
  if(MSVC)
    # clang-cl is half MSVC, half LLVM
    set(!PROJECT_NAME_CAPITAL!_DEFAULT_COPTS "${!PROJECT_NAME_CAPITAL!_CLANG_CL_FLAGS}")
    set(!PROJECT_NAME_CAPITAL!_TEST_COPTS "${!PROJECT_NAME_CAPITAL!_CLANG_CL_FLAGS};${!PROJECT_NAME_CAPITAL!_CLANG_CL_TEST_FLAGS}")
    set(!PROJECT_NAME_CAPITAL!_DEFAULT_LINKOPTS "${!PROJECT_NAME_CAPITAL!_MSVC_LINKOPTS}")
  else()
    set(!PROJECT_NAME_CAPITAL!_DEFAULT_COPTS "${!PROJECT_NAME_CAPITAL!_LLVM_FLAGS}")
    set(!PROJECT_NAME_CAPITAL!_TEST_COPTS "${!PROJECT_NAME_CAPITAL!_LLVM_FLAGS};${!PROJECT_NAME_CAPITAL!_LLVM_TEST_FLAGS}")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
      # AppleClang doesn't have lsan
      # https://developer.apple.com/documentation/code_diagnostics
      if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.5)
        set(!PROJECT_NAME_CAPITAL!_LSAN_LINKOPTS "-fsanitize=leak")
        set(!PROJECT_NAME_CAPITAL!_HAVE_LSAN ON)
      endif()
    endif()
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set(!PROJECT_NAME_CAPITAL!_DEFAULT_COPTS "${!PROJECT_NAME_CAPITAL!_MSVC_FLAGS}")
  set(!PROJECT_NAME_CAPITAL!_TEST_COPTS "${!PROJECT_NAME_CAPITAL!_MSVC_FLAGS};${!PROJECT_NAME_CAPITAL!_MSVC_TEST_FLAGS}")
  set(!PROJECT_NAME_CAPITAL!_DEFAULT_LINKOPTS "${!PROJECT_NAME_CAPITAL!_MSVC_LINKOPTS}")
else()
  message(WARNING "Unknown compiler: ${CMAKE_CXX_COMPILER}.  Building with no default flags")
  set(!PROJECT_NAME_CAPITAL!_DEFAULT_COPTS "")
  set(!PROJECT_NAME_CAPITAL!_TEST_COPTS "")
endif()

set(!PROJECT_NAME_CAPITAL!_CXX_STANDARD "${CMAKE_CXX_STANDARD}")

