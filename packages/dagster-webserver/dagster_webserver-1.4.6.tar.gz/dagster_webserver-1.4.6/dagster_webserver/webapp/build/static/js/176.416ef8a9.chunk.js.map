{"version":3,"file":"static/js/176.416ef8a9.chunk.js","mappings":"2RAQaA,EAAkB,WAC7B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAAAC,UACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CAACC,KAAK,IAAGF,UACbF,EAAAA,EAAAA,KAACK,EAA0B,OAInC,EAEMC,EAAiB,SAACC,GAAoB,OAC1CA,EAAEC,WAAWC,UAAUC,QAAO,SAACC,GAAC,QAAMC,EAAAA,EAAAA,IAAsBD,EAAEE,KAAK,GAAE,EAEjER,EAA6B,WACjC,IAAMS,EAAmBC,EAAAA,WAAiBC,EAAAA,IACnCC,EAAsCH,EAAtCG,SAAUC,EAA4BJ,EAA5BI,QAASC,EAAmBL,EAAnBK,gBAE1B,GAAID,EACF,OACElB,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,UAAWC,MAAO,CAACC,WAAY,SAASvB,UACpFwB,EAAAA,EAAAA,MAACN,EAAAA,EAAG,CAACC,KAAM,CAACC,UAAW,MAAOK,WAAY,SAAUC,IAAK,IAAI1B,SAAA,EAC3DF,EAAAA,EAAAA,KAAC6B,EAAAA,EAAO,CAACC,QAAQ,aACjB9B,EAAAA,EAAAA,KAAA,OAAKwB,MAAO,CAACO,MAAOC,EAAAA,EAAOC,SAAS/B,SAAC,mCAQ7C,GAAIiB,EAAgBe,QAA8B,IAApBjB,EAASiB,OACrC,OAAOlC,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CAACC,GAAG,eAGtB,IAAMC,EAAuBpB,EAASP,QAAO,SAACH,GAAC,OAAKD,EAAeC,GAAG2B,OAAS,CAAC,IAGhF,GAAoC,IAAhCG,EAAqBH,OAAc,CACrC,IAAMI,EAAqBrB,EAASsB,MAAK,SAAChC,GAAC,OAAKA,EAAEC,WAAWgC,YAAYN,MAAM,IAC/E,GAAII,EACF,OACEtC,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CACPC,IAAIK,EAAAA,EAAAA,IACFH,EAAmB9B,WAAWK,KAC9ByB,EAAmBI,mBAAmB7B,KAAK,iBAAD8B,OACzBL,EAAmB9B,WAAWgC,YAAY,GAAII,aAKzE,CAGA,GAAoC,IAAhCP,EAAqBH,OAAc,CACrC,IAAMW,EAAOR,EAAqB,GAC5BS,EAAcxC,EAAeuC,GACnC,GAA2B,IAAvBC,EAAYZ,OAAc,CAC5B,IAAMa,EAAMD,EAAY,GACxB,OACE9C,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CACPC,IAAIY,EAAAA,EAAAA,IAAsB,CACxBC,SAAUJ,EAAKrC,WAAWK,KAC1BqC,aAAcL,EAAKH,mBAAmB7B,KACtCsC,aAAcJ,EAAIlC,KAClBuC,MAAOL,EAAIK,SAInB,CACF,CAGA,OAAIf,EAAqBH,OAAS,GACzBlC,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CAACC,GAAG,eAGfpC,EAAAA,EAAAA,KAACmC,EAAAA,GAAQ,CAACC,GAAG,cACtB,EAIA,W","sources":["../../ui-core/src/app/FallthroughRoot.tsx"],"sourcesContent":["import {Box, Colors, Spinner} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {DagsterRepoOption, WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {workspacePath, workspacePipelinePath} from '../workspace/workspacePath';\n\nexport const FallthroughRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"*\">\n        <FinalRedirectOrLoadingRoot />\n      </Route>\n    </Switch>\n  );\n};\n\nconst getVisibleJobs = (r: DagsterRepoOption) =>\n  r.repository.pipelines.filter((j) => !isHiddenAssetGroupJob(j.name));\n\nconst FinalRedirectOrLoadingRoot = () => {\n  const workspaceContext = React.useContext(WorkspaceContext);\n  const {allRepos, loading, locationEntries} = workspaceContext;\n\n  if (loading) {\n    return (\n      <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n          <Spinner purpose=\"section\" />\n          <div style={{color: Colors.Gray600}}>Loading definitionsâ€¦</div>\n        </Box>\n      </Box>\n    );\n  }\n\n  // If we have location entries but no repos, we have no useful objects to show.\n  // Redirect to Workspace overview to surface relevant errors to the user.\n  if (locationEntries.length && allRepos.length === 0) {\n    return <Redirect to=\"/locations\" />;\n  }\n\n  const reposWithVisibleJobs = allRepos.filter((r) => getVisibleJobs(r).length > 0);\n\n  // If we have no repos with jobs, see if we have an asset group and route to it.\n  if (reposWithVisibleJobs.length === 0) {\n    const repoWithAssetGroup = allRepos.find((r) => r.repository.assetGroups.length);\n    if (repoWithAssetGroup) {\n      return (\n        <Redirect\n          to={workspacePath(\n            repoWithAssetGroup.repository.name,\n            repoWithAssetGroup.repositoryLocation.name,\n            `/asset-groups/${repoWithAssetGroup.repository.assetGroups[0]!.groupName}`,\n          )}\n        />\n      );\n    }\n  }\n\n  // If we have exactly one repo with one job, route to the job overview\n  if (reposWithVisibleJobs.length === 1) {\n    const repo = reposWithVisibleJobs[0]!;\n    const visibleJobs = getVisibleJobs(repo);\n    if (visibleJobs.length === 1) {\n      const job = visibleJobs[0]!;\n      return (\n        <Redirect\n          to={workspacePipelinePath({\n            repoName: repo.repository.name,\n            repoLocation: repo.repositoryLocation.name,\n            pipelineName: job.name,\n            isJob: job.isJob,\n          })}\n        />\n      );\n    }\n  }\n\n  // If we have more than one repo with a job, route to the instance overview\n  if (reposWithVisibleJobs.length > 0) {\n    return <Redirect to=\"/overview\" />;\n  }\n\n  return <Redirect to=\"/locations\" />;\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default FallthroughRoot;\n"],"names":["FallthroughRoot","_jsx","Switch","children","Route","path","FinalRedirectOrLoadingRoot","getVisibleJobs","r","repository","pipelines","filter","j","isHiddenAssetGroupJob","name","workspaceContext","React","WorkspaceContext","allRepos","loading","locationEntries","Box","flex","direction","justifyContent","style","paddingTop","_jsxs","alignItems","gap","Spinner","purpose","color","Colors","Gray600","length","Redirect","to","reposWithVisibleJobs","repoWithAssetGroup","find","assetGroups","workspacePath","repositoryLocation","concat","groupName","repo","visibleJobs","job","workspacePipelinePath","repoName","repoLocation","pipelineName","isJob"],"sourceRoot":""}