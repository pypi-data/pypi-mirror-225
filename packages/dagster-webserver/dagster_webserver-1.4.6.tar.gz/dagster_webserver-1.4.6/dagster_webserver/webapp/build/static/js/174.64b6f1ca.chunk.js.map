{"version":3,"file":"static/js/174.64b6f1ca.chunk.js","mappings":"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","sources":["../../ui-components/src/components/Tabs.tsx","../../ui-core/src/instance/InstanceConcurrency.tsx","../../ui-core/src/nav/InstanceWarningIcon.tsx","../../ui-core/src/nav/WorkspaceStatus.tsx","../../ui-core/src/instance/InstanceTabs.tsx","../../ui-core/src/ui/TabLink.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled, {css} from 'styled-components';\n\nimport {Colors} from './Colors';\nimport {IconWrapper} from './Icon';\nimport {FontFamily} from './styles';\n\nexport interface TabStyleProps {\n  disabled?: boolean;\n  selected?: boolean;\n  count?: number | 'indeterminate' | null;\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  $size?: 'small' | 'large';\n}\n\nexport const getTabA11yProps = (props: {selected?: boolean; disabled?: boolean}) => {\n  const {selected, disabled} = props;\n  return {\n    role: 'tab',\n    tabIndex: disabled ? -1 : 0,\n    'aria-disabled': disabled,\n    'aria-expanded': selected,\n    'aria-selected': selected,\n  };\n};\n\nexport const getTabContent = (props: TabStyleProps & {title?: React.ReactNode}) => {\n  const {title, count, icon} = props;\n  return (\n    <>\n      {title}\n      {icon}\n      {count !== undefined ? <Count>{count === 'indeterminate' ? '–' : count}</Count> : null}\n    </>\n  );\n};\n\nconst Count = styled.div`\n  display: inline;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: -0.02%;\n  padding: 0 4px;\n  color: ${Colors.Gray900};\n  background: ${Colors.Gray100};\n`;\n\nexport const tabCSS = css<TabStyleProps>`\n  background: none;\n  border: none;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 600;\n  padding: ${({$size}) => ($size === 'small' ? '10px 0' : '16px 0')};\n  box-shadow: ${({selected}) => (selected ? Colors.Blue500 : 'transparent')} 0 -2px 0 inset;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  gap: 6px;\n\n  &,\n  & a {\n    cursor: pointer;\n    user-select: none;\n    color: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : Colors.Gray700};\n  }\n\n  & ${IconWrapper} {\n    background: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : ''};\n  }\n\n  /* Focus outline only when using keyboard, not when focusing via mouse. */\n  &:focus {\n    outline: none !important;\n    box-shadow: ${({selected, disabled}) =>\n        selected ? Colors.Blue500 : disabled ? 'transparent' : Colors.Blue200}\n      0 -2px 0 inset;\n  }\n\n  &:hover {\n    &,\n    a {\n      text-decoration: none;\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : Colors.Blue700};\n    }\n    ${IconWrapper} {\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : ''};\n    }\n  }\n`;\n\ninterface TabProps extends TabStyleProps, Omit<React.ComponentPropsWithoutRef<'button'>, 'title'> {}\n\nexport const Tab = styled((props: TabProps) => {\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof props.title === 'string' ? props.title : undefined;\n\n  return (\n    <button {...props} {...containerProps} title={titleText} type=\"button\">\n      {content}\n    </button>\n  );\n})<TabStyleProps>`\n  ${tabCSS}\n`;\n\ninterface TabsProps {\n  children: Array<React.ReactElement<TabProps>>;\n  selectedTabId?: string;\n  onChange?: (selectedTabId: string) => void;\n  size?: 'small' | 'large';\n}\n\nexport const Tabs = styled(({selectedTabId, children, onChange, size = 'large', ...rest}) => {\n  return (\n    <div {...rest} role=\"tablist\">\n      {React.Children.map(children, (child) =>\n        child\n          ? React.cloneElement(child, {\n              selected: child.props.selected || child.props.id === selectedTabId,\n              $size: size,\n              ...(onChange\n                ? {\n                    onClick: () => onChange(child.props.id),\n                  }\n                : {}),\n            })\n          : null,\n      )}\n    </div>\n  );\n})<TabsProps>`\n  display: flex;\n  gap: 16px;\n  font-size: ${({size}) => (size === 'small' ? '12px' : '14px')};\n  line-height: ${({size}) => (size === 'small' ? '16px' : '20px')};\n  font-weight: 600;\n`;\n","import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  PageHeader,\n  Heading,\n  Box,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {doneStatuses} from '../runs/RunStatuses';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {RunTableRunFragment} from '../runs/types/RunTable.types';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  ConcurrencyLimitFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  FreeConcurrencySlotsForRunMutation,\n  FreeConcurrencySlotsForRunMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst RUNS_LIMIT = 25;\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  const content = data ? (\n    flagInstanceConcurrencyLimits ? (\n      <ConcurrencyLimits\n        instanceConfig={data.instance.info}\n        limits={data.instance.concurrencyLimits}\n        hasSupport={data.instance.supportsConcurrencyLimits}\n        refetch={queryResult.refetch}\n      />\n    ) : (\n      <Redirect to=\"/config\" />\n    )\n  ) : (\n    <Box padding={{vertical: 64}}>\n      <Spinner purpose=\"section\" />\n    </Box>\n  );\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      {content}\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const ConcurrencyLimits: React.FC<{\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n}> = ({instanceConfig, hasSupport, limits, refetch}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedRuns, setSelectedRuns] = React.useState<string[] | undefined>(undefined);\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onRunsDialogClose = React.useCallback(() => {\n    setSelectedRuns(undefined);\n    setSelectedKey(undefined);\n  }, [setSelectedKey, setSelectedRuns]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not support global concurrency limits. You will need to ' +\n            'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n            'feature.'\n          }\n        />\n      </Box>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not currently support global concurrency limits. You may need to ' +\n            'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n            'to support this feature.'\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box>\n        <Box flex={{justifyContent: 'flex-end'}} padding={16}>\n          <Button intent=\"primary\" icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n            Add concurrency limit\n          </Button>\n        </Box>\n        {limits.length === 0 ? (\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: '260px'}}>Concurrency key</th>\n                <th style={{width: '20%'}}>Occupied slots</th>\n                <th style={{width: '20%'}}>Total slots</th>\n                <th>Active runs</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {limits.map((limit) => (\n                <tr key={limit.concurrencyKey}>\n                  <td>{limit.concurrencyKey}</td>\n                  <td>{limit.activeSlotCount}</td>\n                  <td>{limit.slotCount}</td>\n                  <td>\n                    {limit.activeRunIds.length === 0 ? (\n                      <>&mdash;</>\n                    ) : (\n                      <Tag intent=\"primary\" interactive>\n                        <ButtonLink\n                          onClick={() => {\n                            setSelectedKey(limit.concurrencyKey);\n                            setSelectedRuns(limit.activeRunIds);\n                          }}\n                        >\n                          {limit.activeRunIds.length}{' '}\n                          {limit.activeRunIds.length === 1 ? 'run' : 'runs'}\n                        </ButtonLink>\n                      </Tag>\n                    )}\n                  </td>\n                  <td>\n                    <ConcurrencyLimitActionMenu\n                      concurrencyKey={limit.concurrencyKey}\n                      onEdit={onEdit}\n                      onDelete={onDelete}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Box>\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyRunsDialog\n        title={\n          <span>\n            Active runs for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onRunsDialogClose}\n        runIds={selectedRuns}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitActionMenu: React.FC<{\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}> = ({concurrencyKey, onDelete, onEdit}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog: React.FC<{\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyRunsDialog: React.FC<{\n  runIds?: string[];\n  title: string | React.ReactNode;\n  onClose: () => void;\n}> = ({runIds, onClose, title}) => {\n  const {data} = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          runIds: runIds || [],\n        },\n      },\n      skip: !runIds || !runIds.length,\n    },\n  );\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsForRunMutation,\n    FreeConcurrencySlotsForRunMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION);\n\n  const freeSlotsActionMenuItem = React.useCallback(\n    (run: RunTableRunFragment) => {\n      return doneStatuses.has(run.status)\n        ? [\n            <MenuItem\n              key=\"free-concurrency-slots\"\n              icon=\"status\"\n              text=\"Free concurrency slots for run\"\n              onClick={async () => {\n                const resp = await freeSlots({variables: {runId: run.id}});\n                if (resp.data?.freeConcurrencySlotsForRun) {\n                  await showSharedToaster({\n                    intent: 'success',\n                    icon: 'copy_to_clipboard_done',\n                    message: 'Freed concurrency slots',\n                  });\n                }\n                onClose();\n              }}\n            />,\n          ]\n        : [];\n    },\n    [freeSlots, onClose],\n  );\n\n  return (\n    <Dialog\n      isOpen={!!runIds && runIds.length > 0}\n      title={title}\n      onClose={onClose}\n      style={{width: '60%', minWidth: '400px'}}\n    >\n      <Box padding={{vertical: 16}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : data.pipelineRunsOrError.__typename === 'Runs' ? (\n          <RunTable\n            runs={data.pipelineRunsOrError.results}\n            additionalActionsForRun={freeSlotsActionMenuItem}\n          />\n        ) : (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"error\"\n              title=\"Query Error\"\n              description={\n                data.pipelineRunsOrError.__typename === 'PythonError'\n                  ? data.pipelineRunsOrError.message\n                  : 'There was a problem querying for these runs.'\n              }\n            />\n            ;\n          </Box>\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    activeRunIds\n    activeSlotCount\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION = gql`\n  mutation FreeConcurrencySlotsForRun($runId: String!) {\n    freeConcurrencySlotsForRun(runId: $runId)\n  }\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig && flagInstanceConcurrencyLimits ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, disabled, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={disabled ? '#' : to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n"],"names":["getTabA11yProps","props","selected","disabled","role","tabIndex","getTabContent","title","count","icon","_jsxs","_Fragment","children","undefined","_jsx","Count","styled","div","_templateObject","_taggedTemplateLiteral","FontFamily","monospace","Colors","Gray900","Gray100","tabCSS","css","_templateObject2","_ref","$size","_ref2","Blue500","_ref3","Gray300","Gray700","IconWrapper","_ref4","_ref5","Blue200","_ref6","Blue700","_ref7","Tab","containerProps","content","titleText","_objectSpread","type","_templateObject3","Tabs","_ref8","selectedTabId","onChange","_ref8$size","size","rest","_objectWithoutProperties","_excluded","React","map","child","id","onClick","_templateObject4","_ref9","_ref10","InstanceConcurrencyPage","useTrackPageView","useDocumentTitle","flagInstanceConcurrencyLimits","useFeatureFlags","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","ConcurrencyLimits","instanceConfig","instance","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","Redirect","to","Box","padding","vertical","Spinner","purpose","Page","PageHeader","Heading","tabs","InstanceTabs","tab","_React$useState","_React$useState2","_slicedToArray","action","setAction","_React$useState3","_React$useState4","selectedRuns","setSelectedRuns","_React$useState5","_React$useState6","selectedKey","setSelectedKey","onRunsDialogClose","limitsByKey","Object","fromEntries","concurrencyKey","slotCount","onAdd","actionType","onEdit","concurrencyLimit","onDelete","includes","margin","NonIdealState","description","flex","justifyContent","Button","intent","Icon","name","length","ButtonLink","Table","style","width","limit","activeSlotCount","activeRunIds","Tag","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyRunsDialog","runIds","Popover","Menu","MenuItem","text","position","isValidLimit","value","parseInt","isNaN","String","trim","_React$useState7","_React$useState8","isSubmitting","setIsSubmitting","_React$useState9","_React$useState10","limitInput","setLimitInput","_React$useState11","_React$useState12","keyInput","setKeyInput","_useMutation","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","setConcurrencyLimit","save","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","variables","stop","apply","arguments","Dialog","isOpen","DialogBody","bottom","TextInput","e","target","placeholder","DialogFooter","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_useMutation3","_callee2","_context2","Mono","_React$useState17","_React$useState18","_useMutation5","_callee3","_context3","RUNS_FOR_CONCURRENCY_KEY_QUERY","filter","skip","_useMutation7","FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION","freeSlots","freeSlotsActionMenuItem","run","doneStatuses","has","status","_callee4","_resp$data","resp","_context4","runId","sent","freeConcurrencySlotsForRun","showSharedToaster","message","minWidth","pipelineRunsOrError","__typename","RunTable","runs","results","additionalActionsForRun","CONCURRENCY_LIMIT_FRAGMENT","gql","_templateObject5","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","modifiers","offset","enabled","options","color","Yellow500","WorkspaceStatus","codeLocations","Tooltip","placement","fillColor","healthTitle","canSeeConfig","useCanSeeConfig","direction","alignItems","TabLink","QueryRefreshCountdown","Link"],"sourceRoot":""}