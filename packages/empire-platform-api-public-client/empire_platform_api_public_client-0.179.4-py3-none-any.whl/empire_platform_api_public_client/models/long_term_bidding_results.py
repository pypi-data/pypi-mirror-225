# coding: utf-8

"""
    Empire - Platform API

    OpenAPI specification for the Platform REST API of Empire  **System Time:** Europe/Amsterdam  **General data formats:**   * _capacity values_ => kW (integers)   * _dates and local times_ => System Time   * _currencies_ => EUR   # noqa: E501

    The version of the OpenAPI document: 0.179.4
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictInt, confloat, conint

class LongTermBiddingResults(BaseModel):
    """
    * `totalRequestedCapacity` - Capacity that has been requested in the bids * `preliminaryAllocatedCapacity` - Capacity that can be allocated at the current time (optional, if there are successful bids) * `preliminaryMarginalPrice` - Marginal price at the current time (optional, if there are successful bids) 
    """
    total_requested_capacity: StrictInt = Field(..., alias="totalRequestedCapacity", description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers")
    preliminary_allocated_capacity: Optional[StrictInt] = Field(None, alias="preliminaryAllocatedCapacity", description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers")
    preliminary_marginal_price: Optional[Union[confloat(multiple_of=0.01, strict=True), conint(strict=True)]] = Field(None, alias="preliminaryMarginalPrice", description="Currency value in Euros (â‚¬), accepted with a precision of maximum 2 decimal places")
    __properties = ["totalRequestedCapacity", "preliminaryAllocatedCapacity", "preliminaryMarginalPrice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LongTermBiddingResults:
        """Create an instance of LongTermBiddingResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LongTermBiddingResults:
        """Create an instance of LongTermBiddingResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LongTermBiddingResults.parse_obj(obj)

        _obj = LongTermBiddingResults.parse_obj({
            "total_requested_capacity": obj.get("totalRequestedCapacity"),
            "preliminary_allocated_capacity": obj.get("preliminaryAllocatedCapacity"),
            "preliminary_marginal_price": obj.get("preliminaryMarginalPrice")
        })
        return _obj

