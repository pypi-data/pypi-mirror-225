
import sys
from glob import glob
what =  sys.argv[1]
dataset =  sys.argv[2]

'''
this is a copy of 1c20 to see if we can quickly run it
and share the model files...
'''
`export PYTHONHASHSEED=31337


fnames = [
    'splash_human_RRI_',
    'paris_human_RRI_',
    'full_',
    'full_human_',
    'paris_human_RBPs_',
    'paris_splash_human_RRI_',
    'paris_mouse_RRI_']



if dataset == 'all':
    for target in fnames:
        `shellpy cherry1C20.spy {what} {target}
    exit()


# ok lets make some DATA
if what == 'makedata':
    print(f'makedata {dataset}')
    fld = 'testb86'
    `mkdir -p {fld}/data/`
    # TODO change imoprt blabla to biofilm.examples.cherriload
    import examples.cherriload  as cl
    p = "~/data/cherry/"+dataset
    d1 = p+'neg.csv'
    d2 = p+"pos.csv"
    cl.convert(d1,d2,f'{fld}/data/{dataset}', graphfeatures=True)

'''
1. load data
we can do it in a fancy way, by providing a python file that has a
read(path) function. as demonstrated in examples/cherriload.py
'''
loaddata = f'--infile testb85/data/{dataset}'



if what == 'selectft':
    `mkdir -p testb85/features`
    loaddata += ' --subsample 20000 '
    out = f'testb85/features/{dataset}'
    `python -m biofilm.biofilm-features {loaddata} --method forest --out {out}


'''
2. LETZ OPTYIMIZE
'''
if what == 'optimize':
    `mkdir -p testb85/optimized`
    loaddata += f' --folds 0 --featurefile testb85/features/{dataset}'
    # TODO python -m biofilm.biofilm-optimize6 should work
    #python biofilm/biofilm-optimize6.py  @(loaddata)\
    out  = f'testb85/optimized/{dataset}'
    z = `python -m biofilm.biofilm-optimize6 {loaddata} --out {out}  --preprocess True \
            --methods  extra_trees passive_aggressive random_forest sgd gradient_boosting mlp\
            --n_jobs 30 --time 50000
    print(z)




'''
4. plot performance (so far)
'''
if what == 'plot1':
    for f in glob(f'testb71/optimized/*.csv'):
        `python biofilm/biofilm-out.py --infiles  {f}`

'''
5. do crossval for all models
      use all 5 models to crossvalidate over all instances to compare them...
'''


if what == 'runcv':
    loaddata += f' --foldselect {{1}} --featurefile testb85/features/{dataset} '
    `mkdir -p testb85/crossval`
    seq = `seq 0 4`
    `parallel -j 5 --joblog delme.log $(which python) -m biofilm.biofilm-cv {loaddata} --model testb85/optimized/{dataset}.model --out testb85/crossval/{dataset}_{{1}}.cv ::: $(seq 0 4)`



if what == "refit":
    `mkdir -p testb85/refit
    loaddata += f' --featurefile testb85/features/{dataset}'
    models = 'testb85/optimized/%s.model' % dataset
    out = 'testb85/refit/%s.model' % dataset
    `python -m biofilm.biofilm-cv --folds 0 {loaddata} --model {models} --out {out}


if what == "crossmodel":
    '''
    1.    load the {dataset}
    2.    run the model against it
    '''
    `mkdir -p testb85/crossmodel
    for model in fnames:
        loaddata_mod = loaddata+f'--featurefile testb85/features/{model}'.split()
        print(loaddata_mod)
        if model != dataset:
            inmodel = "testb85/refit/%s.model.model" % model
            out = 'testb85/crossmodel/%s%s' % (model,dataset)
            `python biofilm/util/out.py --folds 0 {loaddata_mod} --model {inmodel} --out {out}

from sklearn.metrics import f1_score
import numpy as np
import glob
def readcsv(paths):
    trv, pred = [],[]
    for file in paths:
        re = np.genfromtxt(file,skip_header = 1, delimiter=',', dtype = np.int32)
        trv+=list(re[:,1])
        pred+=list(re[:,2])
    return trv, pred


if what == "tspecial":
    '''
        load from cherry
        for x in any/speciffic list:
            train mouse
            predict mouse, human
    '''
    fld = 'testb86'
    human, mouse = 'paris_human_RRI_', 'paris_mouse_RRI_'
    loaddata = f'--infile {fld}/data/{mouse} --subsample 20000'


    # features
    if False:
        `mkdir -p {fld}
        `python -m biofilm.biofilm-features {loaddata} --method forest --out {fld}/mouseft

    # train mouse twice

    loaddata = f'--infile {fld}/data/{mouse} --featurefile {fld}/mouseft'

    if False:
        # restricted model list
        `python -m biofilm.biofilm-optimize6 {loaddata} --out {fld}/restricted  --preprocess True \
                --methods  extra_trees passive_aggressive random_forest sgd gradient_boosting mlp\
                --n_jobs 30 --time 30000
        # any model
        `python -m biofilm.biofilm-optimize6 {loaddata} --out {fld}/free  --preprocess True \
                --n_jobs 30 --time 30000


        # refit
        print("refitting:")
        `python -m biofilm.biofilm-cv --folds 0 {loaddata} --model {fld}/free.model --out {fld}/free2
        `python -m biofilm.biofilm-cv --folds 0 {loaddata} --model {fld}/restricted.model --out {fld}/restricted2

        # cv
        loaddata += f' --foldselect {{1}}'
        `mkdir -p {fld}/cv`
        seq = `seq 0 4`
        `parallel -j 5 --joblog delme.log $(which python) -m biofilm.biofilm-cv {loaddata} --model {fld}/{{2}}.model --out {fld}/cv/{{2}}_{{1}}.cv ::: $(seq 0 4) ::: free restricted

        # IS IT POSSIBLE THAT ONE DIED IN CV? AM I CATCHING THOSE ERRORS?
        # I SHOULD PRINT CV OUTPUT>>> IS SHELLPY BLOCKING OUTPUT? MULLLA
        # ALSO REFIT DUMPOS MDOELS DIRECTLY THIS SHOULDBE FIXED OOO

        # eval
        for model in ['free','restricted']:
                loaddata = f'--infile {fld}/data/{human} --featurefile {fld}/mouseft'
                `python biofilm/util/out.py --folds 0 {loaddata} --model {fld}/{model}2.model --out {fld}/{model}{human}.done


        loaddata = f' --infile {fld}/data/{mouse} --foldselect {{1}} --featurefile {fld}/mouseft '
        `mkdir -p {fld}/crossval`
        `parallel -j 32 --joblog delme.log $(which python) -m biofilm.biofilm-cv {loaddata}  --model {fld}/{{2}}.model --out {fld}/crossval/{{2}}_{{1}}.cv ::: $(seq 0 4) ::: free restricted`


    # todo: call readCSV :)
    print(f" on human, FREEEE {f1_score(*readcsv(['testb86/freeparis_human_RRI_.done.csv']))}")
    print(f" on human, RESTRI {f1_score(*readcsv(['testb86/restrictedparis_human_RRI_.done.csv']))}")
    print(f" on MOUSE, FREEEE {f1_score(*readcsv(glob.glob('testb86/cv/free*.csv')))}")
    print(f" on MOUSE, RESTRI {f1_score(*readcsv(glob.glob('testb86/cv/rest*.csv')))}")

def getf1(a,b,where):
    if a == b:
        paths = [f'{where}/crossval/{a}{i}.cv.csv' for i in range(5)]
    else:
        paths = [f'{where}/crossmodel/{b}{a}.csv']

    trv,pred = readcsv(paths)

    #print(trv)
    return f1_score(trv,pred)

if what  == 'f1':
    where = dataset
    np.set_printoptions(precision = 2)

    # this is the order in the paper
    fnames = [
    'full_',
    'full_human_',
    'paris_human_RBPs_',
    'paris_human_RRI_',
    'paris_mouse_RRI_',
    'paris_splash_human_RRI_',
    'splash_human_RRI_'
    ]

    l = len(fnames)
    m = np.zeros((l,l))
    for i in range(l):
        for j in range(l):
            m[i,j]= getf1(fnames[i], fnames[j],where)
    print(m)




