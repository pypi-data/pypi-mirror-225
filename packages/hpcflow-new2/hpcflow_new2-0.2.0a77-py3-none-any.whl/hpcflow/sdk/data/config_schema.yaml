rules:
  - path: []
    condition:
      value.allowed_keys:
        - telemetry
        - machine
        - user_name
        - user_orcid
        - user_affiliation
        - linux_release_file
        - log_file_path
        - log_file_level
        - log_console_level
        - task_schema_sources
        - parameter_sources
        - command_file_sources
        - environment_sources
        - max_num_zarr_objects_per_dir
        - num_zarr_objects_nesting_levels
        - num_task_group_nesting_levels
        - parameter_index_dtype
        - element_index_dtype
        - task_index_dtype

  - path: []
    condition:
      value.required_keys:
        - telemetry
        - machine
        - task_schema_sources
        - parameter_sources
        - command_file_sources
        - environment_sources

  - path: []
    condition:
      value.forbidden_keys:
        - config_directory # Config metadata
        - config_file_name # Config metadata
        - config_file_path # Config metadata
        - config_file_contents # Config metadata
        - config_invocation_key # Config metadata
        - config_schemas # Config metadata
        - invoking_user_id # Config metadata
        - host_user_id # Config metadata
        - host_user_id_file_path # Config metadata
        - config_callback # Config method
        - get_all # Config method
        - get # Config method
        - set # Config method
        - unset # Config method
        - save # Config method
        - reload # Config method

  - path: [telemetry]
    condition:
      value.type.equal_to: bool

  - path: [machine]
    doc: >
      A label that references the current machine. By default, this uses the return from
      the Python function `socket.gethostname()`.
    condition:
      value.type.equal_to: str

  - path: [user_name]
    condition:
      value.type.equal_to: str

  - path: [user_orcid]
    condition:
      value.type.equal_to: str

  - path: [user_affiliation]
    condition:
      value.type.equal_to: str

  - path: [linux_release_file]
    condition:
      value.type.equal_to: str

  - path: [log_file_path]
    doc:
      - >
        File path to the app log file. The variables `<<app_name>>` and `<<app_version>>`
        are available to be used in this option, which resolve to the app name and version,
        respectively.
      - >
        The file path may be nested in non-existent directories, in which case
        those directories will be generated. If specified as a relative path, the path will
        be resolved relative to the config directory (the directory that contains the config
        file).
    condition:
      value.is_instance: [str, path]

  - path: [log_file_level]
    condition:
      and:
        - value.type.equal_to: str
        - value.in: [notset, debug, info, warning, error, critical]

  - path: [log_console_level]
    condition:
      and:
        - value.type.equal_to: str
        - value.in: [notset, debug, info, warning, error, critical]

  - path: [task_schema_sources]
    condition:
      value.type.equal_to: list

  - path: [environment_sources]
    condition:
      value.type.equal_to: list

  - path: [parameter_sources]
    condition:
      value.type.equal_to: list

  - path: [command_file_sources]
    condition:
      value.type.equal_to: list

  - path: [task_schema_sources, { type: list_value }]
    condition:
      value.is_instance: [str, path]

  - path: [environment_sources, { type: list_value }]
    condition:
      value.is_instance: [str, path]

  - path: [parameter_sources, { type: list_value }]
    condition:
      value.is_instance: [str, path]

  - path: [command_file_sources, { type: list_value }]
    condition:
      value.is_instance: [str, path]
