# SPDX-FileCopyrightText: 2019â€“2023 Pynguin Contributors
#
# SPDX-License-Identifier: MIT

[tool.poetry]
name = "pynguin"
version = "0.34.0"
description = "Pynguin is a tool for automated unit test generation for Python"
authors = ["Stephan Lukasczyk <stephan@pynguin.eu>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/se2p/pynguin"
documentation = "https://pynguin.readthedocs.io"
homepage = "https://www.pynguin.eu"
keywords = [
    "unit test",
    "random testing",
    "search based",
    "test generation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Education :: Testing",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Unit",
    "Typing :: Typed",
]
packages = [
    { include = "pynguin", from = "src" }
]
include = [
    { path = "tests", format = "sdist" }
]

[tool.poetry.dependencies]
python = ">=3.10, <3.11"
astroid = "^2.15.6"
black = "^23.7.0"
bytecode = "^0.14.2"
jellyfish = "^1.0.0"
Jinja2 = "^3.1.2"
MutPy-Pynguin = "^0.7.1"
networkx = "^3.1"
rich = "^13.5.2"
Pygments = "^2.16.1"
pytest = "^7.4.0"
simple-parsing = "^0.1.4"
typing_inspect = "^0.9.0"
asciitree = "^0.3.3"
libcst = "^1.0.1"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
isort = {extras = ["pyproject"], version = "^5.12.0"}
mypy = "^1.5.0"
pre-commit = "^3.3.3"
pyupgrade = "^3.10.1"
types-requests = "^2.31.0.2"
requests-mock = "^1.11.0"
ruff = "^0.0.284"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
sphinx-autodoc-typehints = "^1.24"
sphinx-hoverxref = "^1.3.0"
sphinx-selective-exclude = "^1.0.3"

[tool.poetry.group.test.dependencies]
coverage = "^7.3.0"
hypothesis = "^6.82.4"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-picked = "^0.5.0"
pytest-sugar = "^0.9.7"

[tool.poetry.scripts]
pynguin = "pynguin.cli:main"

[tool.black]
line-length = 88
target_version = ['py310']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs          # exclude a few common directories in the
    | \.git           # root of the project
    | \.pytest_cache
    | \.mypy_cache
    | \.venv
    | venv
    | _build
    | build
    | dist
    | pynguin.egg-info
  )/
)
'''

[tool.coverage.run]
branch = true
source = ["src/pynguin", "tests"]
omit = ["tests/fixtures/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "cov_html"

[tool.isort]
py_version = 310
profile = "black"
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2
src_paths = [ "src", "tests"]

[tool.mypy]
files = "src"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
enable_error_code = [
  "ignore-without-code",
  "truthy-bool",
]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = [
  "tests",
]
# A lot of our own classes start with Test so pytest will pick them up during test collection.
# But they don't actually contains tests, so we set an empty matcher for the class name.
python_classes = ''

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Assume Python 3.10.
target-version = "py310"
line-length = 88
src = ["src"]
select = [
  "A",  # flake8-builtins
  "B",  # bugbear
  "BLE",  # flake8-blind-except
  "CPY",  # flake8-ccopyright
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  "D",  # pydocstyle
  "E",  # pycodestyle
  "ERA",  # flake8-eradicate
  "F",  # pyflakes
  "FA",  # flake8-future-annotations
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "G",  # flake8-logging-format
  "ICN",  # flake8-import-conventions
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "PERF",  # perflint
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  #  flake8-use-pathlib
  "Q",  # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",  # flake8-bandit
  "SIM",  # flake8-simplify
  "TCH",  # flake8-type-checking
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "T20",
]
ignore = [
  "B019",  # do not complain that  functools.lru_cache might cause memory leaks
  "D105",  # do not complain due to missing docstrings in magic methods
  "FIX002",  # do not complain about valid TODO comments
  "PLR0911",  # do not complain about too many return statements
  "PLR0912",  # do not complain about too many branches
  "PLR0913",  # do not complain about too many arguments to function call
  "PLR2004",  # do not complain about magic values in comparisons
  "S101",  # do not complain about using assert statements
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"
