# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from datetime import datetime
from inspect import getfullargspec
from typing import Any, Dict, Optional

from pydantic import BaseModel, StrictStr, validator


class Connection(BaseModel):
    """
    Connection
    """

    id: StrictStr = ...
    type: StrictStr = ...
    name: StrictStr = ...
    validation_status: StrictStr = ...
    credentials: Optional[Dict[str, Any]] = None
    encrypted_credentials: Optional[Dict[str, Any]] = None
    created_at: datetime = ...
    project_id: StrictStr = ...
    created_by: StrictStr = ...
    __properties = [
        "id",
        "type",
        "name",
        "validation_status",
        "credentials",
        "encrypted_credentials",
        "created_at",
        "project_id",
        "created_by",
    ]

    @validator("validation_status")
    def validation_status_validate_enum(cls, v):
        if v not in (
            "VALIDATION_STATUS_UNKNOWN",
            "VALIDATION_STATUS_VALIDATING",
            "VALIDATION_STATUS_VALID",
            "VALIDATION_STATUS_INVALID",
        ):
            raise ValueError(
                "must be one of enum values ('VALIDATION_STATUS_UNKNOWN', 'VALIDATION_STATUS_VALIDATING', 'VALIDATION_STATUS_VALID', 'VALIDATION_STATUS_INVALID')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Connection:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Connection:
        """Create an instance of Connection from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Connection.parse_obj(obj)

        _obj = Connection.parse_obj(
            {
                "id": obj.get("id"),
                "type": obj.get("type"),
                "name": obj.get("name"),
                "validation_status": obj.get("validation_status"),
                "credentials": obj.get("credentials"),
                "encrypted_credentials": obj.get("encrypted_credentials"),
                "created_at": obj.get("created_at"),
                "project_id": obj.get("project_id"),
                "created_by": obj.get("created_by"),
            }
        )
        return _obj
