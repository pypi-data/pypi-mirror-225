# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class Traveler(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'devices': 'list[str]',
        'locations': 'list[str]',
        'tags': 'list[str]',
        'discrepancy_logs': 'list[str]',
        'data': 'list[str]',
        'notes': 'list[str]',
        'touched_inputs': 'list[str]',
        'shared_with': 'list[str]',
        'shared_group': 'list[str]',
        'man_power': 'list[ManPower]',
        'labels': 'dict(str, str)',
        'mapping': 'dict(str, str)',
        'title': 'str',
        'description': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'updated_by': 'str',
        'updated_on': 'datetime',
        'archived': 'bool',
        'public_access': 'float',
        'status': 'float',
        'finished_input': 'float',
        'total_input': 'float',
        'reference_discrepancy_form': 'str',
        'active_discrepancy_form': 'str',
        'active_form': 'str',
        'reference_released_form': 'str',
        'reference_released_form_ver': 'str',
        'forms': 'list[FormReference]',
        'discrepancy_forms': 'list[FormReference]',
        'v': 'float'
    }

    attribute_map = {
        'id': '_id',
        'devices': 'devices',
        'locations': 'locations',
        'tags': 'tags',
        'discrepancy_logs': 'discrepancyLogs',
        'data': 'data',
        'notes': 'notes',
        'touched_inputs': 'touchedInputs',
        'shared_with': 'sharedWith',
        'shared_group': 'sharedGroup',
        'man_power': 'manPower',
        'labels': 'labels',
        'mapping': 'mapping',
        'title': 'title',
        'description': 'description',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'archived': 'archived',
        'public_access': 'publicAccess',
        'status': 'status',
        'finished_input': 'finishedInput',
        'total_input': 'totalInput',
        'reference_discrepancy_form': 'referenceDiscrepancyForm',
        'active_discrepancy_form': 'activeDiscrepancyForm',
        'active_form': 'activeForm',
        'reference_released_form': 'referenceReleasedForm',
        'reference_released_form_ver': 'referenceReleasedFormVer',
        'forms': 'forms',
        'discrepancy_forms': 'discrepancyForms',
        'v': '__v'
    }

    def __init__(self, id=None, devices=None, locations=None, tags=None, discrepancy_logs=None, data=None, notes=None, touched_inputs=None, shared_with=None, shared_group=None, man_power=None, labels=None, mapping=None, title=None, description=None, created_by=None, created_on=None, updated_by=None, updated_on=None, archived=None, public_access=None, status=None, finished_input=None, total_input=None, reference_discrepancy_form=None, active_discrepancy_form=None, active_form=None, reference_released_form=None, reference_released_form_ver=None, forms=None, discrepancy_forms=None, v=None, local_vars_configuration=None):  # noqa: E501
        """Traveler - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._devices = None
        self._locations = None
        self._tags = None
        self._discrepancy_logs = None
        self._data = None
        self._notes = None
        self._touched_inputs = None
        self._shared_with = None
        self._shared_group = None
        self._man_power = None
        self._labels = None
        self._mapping = None
        self._title = None
        self._description = None
        self._created_by = None
        self._created_on = None
        self._updated_by = None
        self._updated_on = None
        self._archived = None
        self._public_access = None
        self._status = None
        self._finished_input = None
        self._total_input = None
        self._reference_discrepancy_form = None
        self._active_discrepancy_form = None
        self._active_form = None
        self._reference_released_form = None
        self._reference_released_form_ver = None
        self._forms = None
        self._discrepancy_forms = None
        self._v = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if devices is not None:
            self.devices = devices
        if locations is not None:
            self.locations = locations
        if tags is not None:
            self.tags = tags
        if discrepancy_logs is not None:
            self.discrepancy_logs = discrepancy_logs
        if data is not None:
            self.data = data
        if notes is not None:
            self.notes = notes
        if touched_inputs is not None:
            self.touched_inputs = touched_inputs
        if shared_with is not None:
            self.shared_with = shared_with
        if shared_group is not None:
            self.shared_group = shared_group
        if man_power is not None:
            self.man_power = man_power
        if labels is not None:
            self.labels = labels
        if mapping is not None:
            self.mapping = mapping
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if archived is not None:
            self.archived = archived
        if public_access is not None:
            self.public_access = public_access
        if status is not None:
            self.status = status
        if finished_input is not None:
            self.finished_input = finished_input
        if total_input is not None:
            self.total_input = total_input
        if reference_discrepancy_form is not None:
            self.reference_discrepancy_form = reference_discrepancy_form
        if active_discrepancy_form is not None:
            self.active_discrepancy_form = active_discrepancy_form
        if active_form is not None:
            self.active_form = active_form
        if reference_released_form is not None:
            self.reference_released_form = reference_released_form
        if reference_released_form_ver is not None:
            self.reference_released_form_ver = reference_released_form_ver
        if forms is not None:
            self.forms = forms
        if discrepancy_forms is not None:
            self.discrepancy_forms = discrepancy_forms
        if v is not None:
            self.v = v

    @property
    def id(self):
        """Gets the id of this Traveler.  # noqa: E501


        :return: The id of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Traveler.


        :param id: The id of this Traveler.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def devices(self):
        """Gets the devices of this Traveler.  # noqa: E501


        :return: The devices of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Traveler.


        :param devices: The devices of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._devices = devices

    @property
    def locations(self):
        """Gets the locations of this Traveler.  # noqa: E501


        :return: The locations of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Traveler.


        :param locations: The locations of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._locations = locations

    @property
    def tags(self):
        """Gets the tags of this Traveler.  # noqa: E501


        :return: The tags of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Traveler.


        :param tags: The tags of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def discrepancy_logs(self):
        """Gets the discrepancy_logs of this Traveler.  # noqa: E501


        :return: The discrepancy_logs of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._discrepancy_logs

    @discrepancy_logs.setter
    def discrepancy_logs(self, discrepancy_logs):
        """Sets the discrepancy_logs of this Traveler.


        :param discrepancy_logs: The discrepancy_logs of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._discrepancy_logs = discrepancy_logs

    @property
    def data(self):
        """Gets the data of this Traveler.  # noqa: E501


        :return: The data of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Traveler.


        :param data: The data of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    @property
    def notes(self):
        """Gets the notes of this Traveler.  # noqa: E501


        :return: The notes of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Traveler.


        :param notes: The notes of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._notes = notes

    @property
    def touched_inputs(self):
        """Gets the touched_inputs of this Traveler.  # noqa: E501


        :return: The touched_inputs of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._touched_inputs

    @touched_inputs.setter
    def touched_inputs(self, touched_inputs):
        """Sets the touched_inputs of this Traveler.


        :param touched_inputs: The touched_inputs of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._touched_inputs = touched_inputs

    @property
    def shared_with(self):
        """Gets the shared_with of this Traveler.  # noqa: E501


        :return: The shared_with of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this Traveler.


        :param shared_with: The shared_with of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._shared_with = shared_with

    @property
    def shared_group(self):
        """Gets the shared_group of this Traveler.  # noqa: E501


        :return: The shared_group of this Traveler.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_group

    @shared_group.setter
    def shared_group(self, shared_group):
        """Sets the shared_group of this Traveler.


        :param shared_group: The shared_group of this Traveler.  # noqa: E501
        :type: list[str]
        """

        self._shared_group = shared_group

    @property
    def man_power(self):
        """Gets the man_power of this Traveler.  # noqa: E501


        :return: The man_power of this Traveler.  # noqa: E501
        :rtype: list[ManPower]
        """
        return self._man_power

    @man_power.setter
    def man_power(self, man_power):
        """Sets the man_power of this Traveler.


        :param man_power: The man_power of this Traveler.  # noqa: E501
        :type: list[ManPower]
        """

        self._man_power = man_power

    @property
    def labels(self):
        """Gets the labels of this Traveler.  # noqa: E501


        :return: The labels of this Traveler.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Traveler.


        :param labels: The labels of this Traveler.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def mapping(self):
        """Gets the mapping of this Traveler.  # noqa: E501


        :return: The mapping of this Traveler.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this Traveler.


        :param mapping: The mapping of this Traveler.  # noqa: E501
        :type: dict(str, str)
        """

        self._mapping = mapping

    @property
    def title(self):
        """Gets the title of this Traveler.  # noqa: E501


        :return: The title of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Traveler.


        :param title: The title of this Traveler.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Traveler.  # noqa: E501


        :return: The description of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Traveler.


        :param description: The description of this Traveler.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this Traveler.  # noqa: E501


        :return: The created_by of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Traveler.


        :param created_by: The created_by of this Traveler.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this Traveler.  # noqa: E501


        :return: The created_on of this Traveler.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Traveler.


        :param created_on: The created_on of this Traveler.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_by(self):
        """Gets the updated_by of this Traveler.  # noqa: E501


        :return: The updated_by of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Traveler.


        :param updated_by: The updated_by of this Traveler.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this Traveler.  # noqa: E501


        :return: The updated_on of this Traveler.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Traveler.


        :param updated_on: The updated_on of this Traveler.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def archived(self):
        """Gets the archived of this Traveler.  # noqa: E501


        :return: The archived of this Traveler.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Traveler.


        :param archived: The archived of this Traveler.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def public_access(self):
        """Gets the public_access of this Traveler.  # noqa: E501


        :return: The public_access of this Traveler.  # noqa: E501
        :rtype: float
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this Traveler.


        :param public_access: The public_access of this Traveler.  # noqa: E501
        :type: float
        """

        self._public_access = public_access

    @property
    def status(self):
        """Gets the status of this Traveler.  # noqa: E501


        :return: The status of this Traveler.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Traveler.


        :param status: The status of this Traveler.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def finished_input(self):
        """Gets the finished_input of this Traveler.  # noqa: E501


        :return: The finished_input of this Traveler.  # noqa: E501
        :rtype: float
        """
        return self._finished_input

    @finished_input.setter
    def finished_input(self, finished_input):
        """Sets the finished_input of this Traveler.


        :param finished_input: The finished_input of this Traveler.  # noqa: E501
        :type: float
        """

        self._finished_input = finished_input

    @property
    def total_input(self):
        """Gets the total_input of this Traveler.  # noqa: E501


        :return: The total_input of this Traveler.  # noqa: E501
        :rtype: float
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this Traveler.


        :param total_input: The total_input of this Traveler.  # noqa: E501
        :type: float
        """

        self._total_input = total_input

    @property
    def reference_discrepancy_form(self):
        """Gets the reference_discrepancy_form of this Traveler.  # noqa: E501


        :return: The reference_discrepancy_form of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._reference_discrepancy_form

    @reference_discrepancy_form.setter
    def reference_discrepancy_form(self, reference_discrepancy_form):
        """Sets the reference_discrepancy_form of this Traveler.


        :param reference_discrepancy_form: The reference_discrepancy_form of this Traveler.  # noqa: E501
        :type: str
        """

        self._reference_discrepancy_form = reference_discrepancy_form

    @property
    def active_discrepancy_form(self):
        """Gets the active_discrepancy_form of this Traveler.  # noqa: E501


        :return: The active_discrepancy_form of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._active_discrepancy_form

    @active_discrepancy_form.setter
    def active_discrepancy_form(self, active_discrepancy_form):
        """Sets the active_discrepancy_form of this Traveler.


        :param active_discrepancy_form: The active_discrepancy_form of this Traveler.  # noqa: E501
        :type: str
        """

        self._active_discrepancy_form = active_discrepancy_form

    @property
    def active_form(self):
        """Gets the active_form of this Traveler.  # noqa: E501


        :return: The active_form of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._active_form

    @active_form.setter
    def active_form(self, active_form):
        """Sets the active_form of this Traveler.


        :param active_form: The active_form of this Traveler.  # noqa: E501
        :type: str
        """

        self._active_form = active_form

    @property
    def reference_released_form(self):
        """Gets the reference_released_form of this Traveler.  # noqa: E501


        :return: The reference_released_form of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._reference_released_form

    @reference_released_form.setter
    def reference_released_form(self, reference_released_form):
        """Sets the reference_released_form of this Traveler.


        :param reference_released_form: The reference_released_form of this Traveler.  # noqa: E501
        :type: str
        """

        self._reference_released_form = reference_released_form

    @property
    def reference_released_form_ver(self):
        """Gets the reference_released_form_ver of this Traveler.  # noqa: E501


        :return: The reference_released_form_ver of this Traveler.  # noqa: E501
        :rtype: str
        """
        return self._reference_released_form_ver

    @reference_released_form_ver.setter
    def reference_released_form_ver(self, reference_released_form_ver):
        """Sets the reference_released_form_ver of this Traveler.


        :param reference_released_form_ver: The reference_released_form_ver of this Traveler.  # noqa: E501
        :type: str
        """

        self._reference_released_form_ver = reference_released_form_ver

    @property
    def forms(self):
        """Gets the forms of this Traveler.  # noqa: E501


        :return: The forms of this Traveler.  # noqa: E501
        :rtype: list[FormReference]
        """
        return self._forms

    @forms.setter
    def forms(self, forms):
        """Sets the forms of this Traveler.


        :param forms: The forms of this Traveler.  # noqa: E501
        :type: list[FormReference]
        """

        self._forms = forms

    @property
    def discrepancy_forms(self):
        """Gets the discrepancy_forms of this Traveler.  # noqa: E501


        :return: The discrepancy_forms of this Traveler.  # noqa: E501
        :rtype: list[FormReference]
        """
        return self._discrepancy_forms

    @discrepancy_forms.setter
    def discrepancy_forms(self, discrepancy_forms):
        """Sets the discrepancy_forms of this Traveler.


        :param discrepancy_forms: The discrepancy_forms of this Traveler.  # noqa: E501
        :type: list[FormReference]
        """

        self._discrepancy_forms = discrepancy_forms

    @property
    def v(self):
        """Gets the v of this Traveler.  # noqa: E501


        :return: The v of this Traveler.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this Traveler.


        :param v: The v of this Traveler.  # noqa: E501
        :type: float
        """

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Traveler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Traveler):
            return True

        return self.to_dict() != other.to_dict()
