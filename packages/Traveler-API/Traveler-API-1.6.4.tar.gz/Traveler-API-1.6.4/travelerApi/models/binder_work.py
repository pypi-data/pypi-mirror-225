# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class BinderWork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'finished': 'int',
        'in_progress': 'int',
        'finished_input': 'int',
        'total_input': 'int',
        'priority': 'int',
        'sequence': 'int',
        'value': 'int',
        'color': 'str',
        'alias': 'str',
        'ref_type': 'str',
        'added_on': 'datetime',
        'added_by': 'str',
        'status': 'int'
    }

    attribute_map = {
        'id': '_id',
        'finished': 'finished',
        'in_progress': 'inProgress',
        'finished_input': 'finishedInput',
        'total_input': 'totalInput',
        'priority': 'priority',
        'sequence': 'sequence',
        'value': 'value',
        'color': 'color',
        'alias': 'alias',
        'ref_type': 'refType',
        'added_on': 'addedOn',
        'added_by': 'addedBy',
        'status': 'status'
    }

    def __init__(self, id=None, finished=None, in_progress=None, finished_input=None, total_input=None, priority=None, sequence=None, value=None, color=None, alias=None, ref_type=None, added_on=None, added_by=None, status=None, local_vars_configuration=None):  # noqa: E501
        """BinderWork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._finished = None
        self._in_progress = None
        self._finished_input = None
        self._total_input = None
        self._priority = None
        self._sequence = None
        self._value = None
        self._color = None
        self._alias = None
        self._ref_type = None
        self._added_on = None
        self._added_by = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if finished is not None:
            self.finished = finished
        if in_progress is not None:
            self.in_progress = in_progress
        if finished_input is not None:
            self.finished_input = finished_input
        if total_input is not None:
            self.total_input = total_input
        if priority is not None:
            self.priority = priority
        if sequence is not None:
            self.sequence = sequence
        if value is not None:
            self.value = value
        if color is not None:
            self.color = color
        if alias is not None:
            self.alias = alias
        if ref_type is not None:
            self.ref_type = ref_type
        if added_on is not None:
            self.added_on = added_on
        if added_by is not None:
            self.added_by = added_by
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this BinderWork.  # noqa: E501


        :return: The id of this BinderWork.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BinderWork.


        :param id: The id of this BinderWork.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def finished(self):
        """Gets the finished of this BinderWork.  # noqa: E501


        :return: The finished of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this BinderWork.


        :param finished: The finished of this BinderWork.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def in_progress(self):
        """Gets the in_progress of this BinderWork.  # noqa: E501


        :return: The in_progress of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this BinderWork.


        :param in_progress: The in_progress of this BinderWork.  # noqa: E501
        :type: int
        """

        self._in_progress = in_progress

    @property
    def finished_input(self):
        """Gets the finished_input of this BinderWork.  # noqa: E501


        :return: The finished_input of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._finished_input

    @finished_input.setter
    def finished_input(self, finished_input):
        """Sets the finished_input of this BinderWork.


        :param finished_input: The finished_input of this BinderWork.  # noqa: E501
        :type: int
        """

        self._finished_input = finished_input

    @property
    def total_input(self):
        """Gets the total_input of this BinderWork.  # noqa: E501


        :return: The total_input of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this BinderWork.


        :param total_input: The total_input of this BinderWork.  # noqa: E501
        :type: int
        """

        self._total_input = total_input

    @property
    def priority(self):
        """Gets the priority of this BinderWork.  # noqa: E501


        :return: The priority of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this BinderWork.


        :param priority: The priority of this BinderWork.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def sequence(self):
        """Gets the sequence of this BinderWork.  # noqa: E501


        :return: The sequence of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this BinderWork.


        :param sequence: The sequence of this BinderWork.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def value(self):
        """Gets the value of this BinderWork.  # noqa: E501


        :return: The value of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BinderWork.


        :param value: The value of this BinderWork.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def color(self):
        """Gets the color of this BinderWork.  # noqa: E501


        :return: The color of this BinderWork.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this BinderWork.


        :param color: The color of this BinderWork.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def alias(self):
        """Gets the alias of this BinderWork.  # noqa: E501


        :return: The alias of this BinderWork.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this BinderWork.


        :param alias: The alias of this BinderWork.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def ref_type(self):
        """Gets the ref_type of this BinderWork.  # noqa: E501


        :return: The ref_type of this BinderWork.  # noqa: E501
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this BinderWork.


        :param ref_type: The ref_type of this BinderWork.  # noqa: E501
        :type: str
        """

        self._ref_type = ref_type

    @property
    def added_on(self):
        """Gets the added_on of this BinderWork.  # noqa: E501


        :return: The added_on of this BinderWork.  # noqa: E501
        :rtype: datetime
        """
        return self._added_on

    @added_on.setter
    def added_on(self, added_on):
        """Sets the added_on of this BinderWork.


        :param added_on: The added_on of this BinderWork.  # noqa: E501
        :type: datetime
        """

        self._added_on = added_on

    @property
    def added_by(self):
        """Gets the added_by of this BinderWork.  # noqa: E501


        :return: The added_by of this BinderWork.  # noqa: E501
        :rtype: str
        """
        return self._added_by

    @added_by.setter
    def added_by(self, added_by):
        """Sets the added_by of this BinderWork.


        :param added_by: The added_by of this BinderWork.  # noqa: E501
        :type: str
        """

        self._added_by = added_by

    @property
    def status(self):
        """Gets the status of this BinderWork.  # noqa: E501


        :return: The status of this BinderWork.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BinderWork.


        :param status: The status of this BinderWork.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinderWork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BinderWork):
            return True

        return self.to_dict() != other.to_dict()
