# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class TravelerDataNoteObjectAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value': 'str',
        'input_by': 'str',
        'input_on': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'input_by': 'inputBy',
        'input_on': 'inputOn'
    }

    def __init__(self, name=None, value=None, input_by=None, input_on=None, local_vars_configuration=None):  # noqa: E501
        """TravelerDataNoteObjectAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._value = None
        self._input_by = None
        self._input_on = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if input_by is not None:
            self.input_by = input_by
        if input_on is not None:
            self.input_on = input_on

    @property
    def name(self):
        """Gets the name of this TravelerDataNoteObjectAllOf.  # noqa: E501


        :return: The name of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TravelerDataNoteObjectAllOf.


        :param name: The name of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this TravelerDataNoteObjectAllOf.  # noqa: E501


        :return: The value of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TravelerDataNoteObjectAllOf.


        :param value: The value of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def input_by(self):
        """Gets the input_by of this TravelerDataNoteObjectAllOf.  # noqa: E501


        :return: The input_by of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :rtype: str
        """
        return self._input_by

    @input_by.setter
    def input_by(self, input_by):
        """Sets the input_by of this TravelerDataNoteObjectAllOf.


        :param input_by: The input_by of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :type: str
        """

        self._input_by = input_by

    @property
    def input_on(self):
        """Gets the input_on of this TravelerDataNoteObjectAllOf.  # noqa: E501


        :return: The input_on of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._input_on

    @input_on.setter
    def input_on(self, input_on):
        """Sets the input_on of this TravelerDataNoteObjectAllOf.


        :param input_on: The input_on of this TravelerDataNoteObjectAllOf.  # noqa: E501
        :type: datetime
        """

        self._input_on = input_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TravelerDataNoteObjectAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TravelerDataNoteObjectAllOf):
            return True

        return self.to_dict() != other.to_dict()
