# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class Form(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tags': 'list[str]',
        'status': 'float',
        'archived': 'bool',
        'public_access': 'float',
        'form_type': 'str',
        'updates': 'list[str]',
        'title': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'updated_by': 'str',
        'updated_on': 'datetime',
        'html': 'str',
        'shared_group': 'list[str]',
        'shared_with': 'list[str]',
        'labels': 'dict(str, str)',
        'mapping': 'dict(str, str)',
        'cloned_from': 'str',
        'v': 'float'
    }

    attribute_map = {
        'id': '_id',
        'tags': 'tags',
        'status': 'status',
        'archived': 'archived',
        'public_access': 'publicAccess',
        'form_type': 'formType',
        'updates': '__updates',
        'title': 'title',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'html': 'html',
        'shared_group': 'sharedGroup',
        'shared_with': 'sharedWith',
        'labels': 'labels',
        'mapping': 'mapping',
        'cloned_from': 'clonedFrom',
        'v': '_v'
    }

    def __init__(self, id=None, tags=None, status=None, archived=None, public_access=None, form_type=None, updates=None, title=None, created_by=None, created_on=None, updated_by=None, updated_on=None, html=None, shared_group=None, shared_with=None, labels=None, mapping=None, cloned_from=None, v=None, local_vars_configuration=None):  # noqa: E501
        """Form - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tags = None
        self._status = None
        self._archived = None
        self._public_access = None
        self._form_type = None
        self._updates = None
        self._title = None
        self._created_by = None
        self._created_on = None
        self._updated_by = None
        self._updated_on = None
        self._html = None
        self._shared_group = None
        self._shared_with = None
        self._labels = None
        self._mapping = None
        self._cloned_from = None
        self._v = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if status is not None:
            self.status = status
        if archived is not None:
            self.archived = archived
        if public_access is not None:
            self.public_access = public_access
        if form_type is not None:
            self.form_type = form_type
        if updates is not None:
            self.updates = updates
        if title is not None:
            self.title = title
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if html is not None:
            self.html = html
        if shared_group is not None:
            self.shared_group = shared_group
        if shared_with is not None:
            self.shared_with = shared_with
        if labels is not None:
            self.labels = labels
        if mapping is not None:
            self.mapping = mapping
        if cloned_from is not None:
            self.cloned_from = cloned_from
        if v is not None:
            self.v = v

    @property
    def id(self):
        """Gets the id of this Form.  # noqa: E501


        :return: The id of this Form.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Form.


        :param id: The id of this Form.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this Form.  # noqa: E501


        :return: The tags of this Form.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Form.


        :param tags: The tags of this Form.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this Form.  # noqa: E501


        :return: The status of this Form.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Form.


        :param status: The status of this Form.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def archived(self):
        """Gets the archived of this Form.  # noqa: E501


        :return: The archived of this Form.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Form.


        :param archived: The archived of this Form.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def public_access(self):
        """Gets the public_access of this Form.  # noqa: E501


        :return: The public_access of this Form.  # noqa: E501
        :rtype: float
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this Form.


        :param public_access: The public_access of this Form.  # noqa: E501
        :type: float
        """

        self._public_access = public_access

    @property
    def form_type(self):
        """Gets the form_type of this Form.  # noqa: E501


        :return: The form_type of this Form.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this Form.


        :param form_type: The form_type of this Form.  # noqa: E501
        :type: str
        """

        self._form_type = form_type

    @property
    def updates(self):
        """Gets the updates of this Form.  # noqa: E501


        :return: The updates of this Form.  # noqa: E501
        :rtype: list[str]
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this Form.


        :param updates: The updates of this Form.  # noqa: E501
        :type: list[str]
        """

        self._updates = updates

    @property
    def title(self):
        """Gets the title of this Form.  # noqa: E501


        :return: The title of this Form.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Form.


        :param title: The title of this Form.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def created_by(self):
        """Gets the created_by of this Form.  # noqa: E501


        :return: The created_by of this Form.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Form.


        :param created_by: The created_by of this Form.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this Form.  # noqa: E501


        :return: The created_on of this Form.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Form.


        :param created_on: The created_on of this Form.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_by(self):
        """Gets the updated_by of this Form.  # noqa: E501


        :return: The updated_by of this Form.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Form.


        :param updated_by: The updated_by of this Form.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this Form.  # noqa: E501


        :return: The updated_on of this Form.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Form.


        :param updated_on: The updated_on of this Form.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def html(self):
        """Gets the html of this Form.  # noqa: E501


        :return: The html of this Form.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Form.


        :param html: The html of this Form.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def shared_group(self):
        """Gets the shared_group of this Form.  # noqa: E501


        :return: The shared_group of this Form.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_group

    @shared_group.setter
    def shared_group(self, shared_group):
        """Sets the shared_group of this Form.


        :param shared_group: The shared_group of this Form.  # noqa: E501
        :type: list[str]
        """

        self._shared_group = shared_group

    @property
    def shared_with(self):
        """Gets the shared_with of this Form.  # noqa: E501


        :return: The shared_with of this Form.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this Form.


        :param shared_with: The shared_with of this Form.  # noqa: E501
        :type: list[str]
        """

        self._shared_with = shared_with

    @property
    def labels(self):
        """Gets the labels of this Form.  # noqa: E501


        :return: The labels of this Form.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Form.


        :param labels: The labels of this Form.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def mapping(self):
        """Gets the mapping of this Form.  # noqa: E501


        :return: The mapping of this Form.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this Form.


        :param mapping: The mapping of this Form.  # noqa: E501
        :type: dict(str, str)
        """

        self._mapping = mapping

    @property
    def cloned_from(self):
        """Gets the cloned_from of this Form.  # noqa: E501


        :return: The cloned_from of this Form.  # noqa: E501
        :rtype: str
        """
        return self._cloned_from

    @cloned_from.setter
    def cloned_from(self, cloned_from):
        """Sets the cloned_from of this Form.


        :param cloned_from: The cloned_from of this Form.  # noqa: E501
        :type: str
        """

        self._cloned_from = cloned_from

    @property
    def v(self):
        """Gets the v of this Form.  # noqa: E501


        :return: The v of this Form.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this Form.


        :param v: The v of this Form.  # noqa: E501
        :type: float
        """

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Form):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Form):
            return True

        return self.to_dict() != other.to_dict()
