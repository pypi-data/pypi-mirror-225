# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class Binder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'float',
        'tags': 'list[str]',
        'public_access': 'float',
        'finished_input': 'float',
        'total_input': 'float',
        'finished_value': 'float',
        'in_progress_value': 'float',
        'total_value': 'float',
        'finished_work': 'float',
        'in_progress_work': 'float',
        'total_work': 'float',
        'archived': 'bool',
        'title': 'str',
        'description': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'updated_by': 'str',
        'updated_on': 'datetime',
        'shared_group': 'list[str]',
        'shared_with': 'list[str]',
        'v': 'float',
        'works': 'list[BinderWork]'
    }

    attribute_map = {
        'id': '_id',
        'status': 'status',
        'tags': 'tags',
        'public_access': 'publicAccess',
        'finished_input': 'finishedInput',
        'total_input': 'totalInput',
        'finished_value': 'finishedValue',
        'in_progress_value': 'inProgressValue',
        'total_value': 'totalValue',
        'finished_work': 'finishedWork',
        'in_progress_work': 'inProgressWork',
        'total_work': 'totalWork',
        'archived': 'archived',
        'title': 'title',
        'description': 'description',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'shared_group': 'sharedGroup',
        'shared_with': 'sharedWith',
        'v': '__v',
        'works': 'works'
    }

    def __init__(self, id=None, status=None, tags=None, public_access=None, finished_input=None, total_input=None, finished_value=None, in_progress_value=None, total_value=None, finished_work=None, in_progress_work=None, total_work=None, archived=None, title=None, description=None, created_by=None, created_on=None, updated_by=None, updated_on=None, shared_group=None, shared_with=None, v=None, works=None, local_vars_configuration=None):  # noqa: E501
        """Binder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._tags = None
        self._public_access = None
        self._finished_input = None
        self._total_input = None
        self._finished_value = None
        self._in_progress_value = None
        self._total_value = None
        self._finished_work = None
        self._in_progress_work = None
        self._total_work = None
        self._archived = None
        self._title = None
        self._description = None
        self._created_by = None
        self._created_on = None
        self._updated_by = None
        self._updated_on = None
        self._shared_group = None
        self._shared_with = None
        self._v = None
        self._works = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if public_access is not None:
            self.public_access = public_access
        if finished_input is not None:
            self.finished_input = finished_input
        if total_input is not None:
            self.total_input = total_input
        if finished_value is not None:
            self.finished_value = finished_value
        if in_progress_value is not None:
            self.in_progress_value = in_progress_value
        if total_value is not None:
            self.total_value = total_value
        if finished_work is not None:
            self.finished_work = finished_work
        if in_progress_work is not None:
            self.in_progress_work = in_progress_work
        if total_work is not None:
            self.total_work = total_work
        if archived is not None:
            self.archived = archived
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if shared_group is not None:
            self.shared_group = shared_group
        if shared_with is not None:
            self.shared_with = shared_with
        if v is not None:
            self.v = v
        if works is not None:
            self.works = works

    @property
    def id(self):
        """Gets the id of this Binder.  # noqa: E501


        :return: The id of this Binder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Binder.


        :param id: The id of this Binder.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Binder.  # noqa: E501


        :return: The status of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Binder.


        :param status: The status of this Binder.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Binder.  # noqa: E501


        :return: The tags of this Binder.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Binder.


        :param tags: The tags of this Binder.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def public_access(self):
        """Gets the public_access of this Binder.  # noqa: E501


        :return: The public_access of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this Binder.


        :param public_access: The public_access of this Binder.  # noqa: E501
        :type: float
        """

        self._public_access = public_access

    @property
    def finished_input(self):
        """Gets the finished_input of this Binder.  # noqa: E501


        :return: The finished_input of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._finished_input

    @finished_input.setter
    def finished_input(self, finished_input):
        """Sets the finished_input of this Binder.


        :param finished_input: The finished_input of this Binder.  # noqa: E501
        :type: float
        """

        self._finished_input = finished_input

    @property
    def total_input(self):
        """Gets the total_input of this Binder.  # noqa: E501


        :return: The total_input of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this Binder.


        :param total_input: The total_input of this Binder.  # noqa: E501
        :type: float
        """

        self._total_input = total_input

    @property
    def finished_value(self):
        """Gets the finished_value of this Binder.  # noqa: E501


        :return: The finished_value of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._finished_value

    @finished_value.setter
    def finished_value(self, finished_value):
        """Sets the finished_value of this Binder.


        :param finished_value: The finished_value of this Binder.  # noqa: E501
        :type: float
        """

        self._finished_value = finished_value

    @property
    def in_progress_value(self):
        """Gets the in_progress_value of this Binder.  # noqa: E501


        :return: The in_progress_value of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._in_progress_value

    @in_progress_value.setter
    def in_progress_value(self, in_progress_value):
        """Sets the in_progress_value of this Binder.


        :param in_progress_value: The in_progress_value of this Binder.  # noqa: E501
        :type: float
        """

        self._in_progress_value = in_progress_value

    @property
    def total_value(self):
        """Gets the total_value of this Binder.  # noqa: E501


        :return: The total_value of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this Binder.


        :param total_value: The total_value of this Binder.  # noqa: E501
        :type: float
        """

        self._total_value = total_value

    @property
    def finished_work(self):
        """Gets the finished_work of this Binder.  # noqa: E501


        :return: The finished_work of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._finished_work

    @finished_work.setter
    def finished_work(self, finished_work):
        """Sets the finished_work of this Binder.


        :param finished_work: The finished_work of this Binder.  # noqa: E501
        :type: float
        """

        self._finished_work = finished_work

    @property
    def in_progress_work(self):
        """Gets the in_progress_work of this Binder.  # noqa: E501


        :return: The in_progress_work of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._in_progress_work

    @in_progress_work.setter
    def in_progress_work(self, in_progress_work):
        """Sets the in_progress_work of this Binder.


        :param in_progress_work: The in_progress_work of this Binder.  # noqa: E501
        :type: float
        """

        self._in_progress_work = in_progress_work

    @property
    def total_work(self):
        """Gets the total_work of this Binder.  # noqa: E501


        :return: The total_work of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._total_work

    @total_work.setter
    def total_work(self, total_work):
        """Sets the total_work of this Binder.


        :param total_work: The total_work of this Binder.  # noqa: E501
        :type: float
        """

        self._total_work = total_work

    @property
    def archived(self):
        """Gets the archived of this Binder.  # noqa: E501


        :return: The archived of this Binder.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Binder.


        :param archived: The archived of this Binder.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def title(self):
        """Gets the title of this Binder.  # noqa: E501


        :return: The title of this Binder.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Binder.


        :param title: The title of this Binder.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Binder.  # noqa: E501


        :return: The description of this Binder.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Binder.


        :param description: The description of this Binder.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this Binder.  # noqa: E501


        :return: The created_by of this Binder.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Binder.


        :param created_by: The created_by of this Binder.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this Binder.  # noqa: E501


        :return: The created_on of this Binder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Binder.


        :param created_on: The created_on of this Binder.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_by(self):
        """Gets the updated_by of this Binder.  # noqa: E501


        :return: The updated_by of this Binder.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Binder.


        :param updated_by: The updated_by of this Binder.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this Binder.  # noqa: E501


        :return: The updated_on of this Binder.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Binder.


        :param updated_on: The updated_on of this Binder.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def shared_group(self):
        """Gets the shared_group of this Binder.  # noqa: E501


        :return: The shared_group of this Binder.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_group

    @shared_group.setter
    def shared_group(self, shared_group):
        """Sets the shared_group of this Binder.


        :param shared_group: The shared_group of this Binder.  # noqa: E501
        :type: list[str]
        """

        self._shared_group = shared_group

    @property
    def shared_with(self):
        """Gets the shared_with of this Binder.  # noqa: E501


        :return: The shared_with of this Binder.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this Binder.


        :param shared_with: The shared_with of this Binder.  # noqa: E501
        :type: list[str]
        """

        self._shared_with = shared_with

    @property
    def v(self):
        """Gets the v of this Binder.  # noqa: E501


        :return: The v of this Binder.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this Binder.


        :param v: The v of this Binder.  # noqa: E501
        :type: float
        """

        self._v = v

    @property
    def works(self):
        """Gets the works of this Binder.  # noqa: E501


        :return: The works of this Binder.  # noqa: E501
        :rtype: list[BinderWork]
        """
        return self._works

    @works.setter
    def works(self, works):
        """Sets the works of this Binder.


        :param works: The works of this Binder.  # noqa: E501
        :type: list[BinderWork]
        """

        self._works = works

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Binder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Binder):
            return True

        return self.to_dict() != other.to_dict()
