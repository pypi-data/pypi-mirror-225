# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class ReleasedForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tags': 'list[str]',
        'status': 'float',
        'discrepancy': 'ReleasedFormReference',
        'base': 'ReleasedFormReference',
        'ver': 'str',
        'released_by': 'str',
        'released_on': 'datetime',
        'v': 'float'
    }

    attribute_map = {
        'id': '_id',
        'tags': 'tags',
        'status': 'status',
        'discrepancy': 'discrepancy',
        'base': 'base',
        'ver': 'ver',
        'released_by': 'releasedBy',
        'released_on': 'releasedOn',
        'v': '__v'
    }

    def __init__(self, id=None, tags=None, status=None, discrepancy=None, base=None, ver=None, released_by=None, released_on=None, v=None, local_vars_configuration=None):  # noqa: E501
        """ReleasedForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tags = None
        self._status = None
        self._discrepancy = None
        self._base = None
        self._ver = None
        self._released_by = None
        self._released_on = None
        self._v = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if status is not None:
            self.status = status
        if discrepancy is not None:
            self.discrepancy = discrepancy
        if base is not None:
            self.base = base
        if ver is not None:
            self.ver = ver
        if released_by is not None:
            self.released_by = released_by
        if released_on is not None:
            self.released_on = released_on
        if v is not None:
            self.v = v

    @property
    def id(self):
        """Gets the id of this ReleasedForm.  # noqa: E501


        :return: The id of this ReleasedForm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleasedForm.


        :param id: The id of this ReleasedForm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this ReleasedForm.  # noqa: E501


        :return: The tags of this ReleasedForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReleasedForm.


        :param tags: The tags of this ReleasedForm.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this ReleasedForm.  # noqa: E501


        :return: The status of this ReleasedForm.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReleasedForm.


        :param status: The status of this ReleasedForm.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def discrepancy(self):
        """Gets the discrepancy of this ReleasedForm.  # noqa: E501


        :return: The discrepancy of this ReleasedForm.  # noqa: E501
        :rtype: ReleasedFormReference
        """
        return self._discrepancy

    @discrepancy.setter
    def discrepancy(self, discrepancy):
        """Sets the discrepancy of this ReleasedForm.


        :param discrepancy: The discrepancy of this ReleasedForm.  # noqa: E501
        :type: ReleasedFormReference
        """

        self._discrepancy = discrepancy

    @property
    def base(self):
        """Gets the base of this ReleasedForm.  # noqa: E501


        :return: The base of this ReleasedForm.  # noqa: E501
        :rtype: ReleasedFormReference
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ReleasedForm.


        :param base: The base of this ReleasedForm.  # noqa: E501
        :type: ReleasedFormReference
        """

        self._base = base

    @property
    def ver(self):
        """Gets the ver of this ReleasedForm.  # noqa: E501


        :return: The ver of this ReleasedForm.  # noqa: E501
        :rtype: str
        """
        return self._ver

    @ver.setter
    def ver(self, ver):
        """Sets the ver of this ReleasedForm.


        :param ver: The ver of this ReleasedForm.  # noqa: E501
        :type: str
        """

        self._ver = ver

    @property
    def released_by(self):
        """Gets the released_by of this ReleasedForm.  # noqa: E501


        :return: The released_by of this ReleasedForm.  # noqa: E501
        :rtype: str
        """
        return self._released_by

    @released_by.setter
    def released_by(self, released_by):
        """Sets the released_by of this ReleasedForm.


        :param released_by: The released_by of this ReleasedForm.  # noqa: E501
        :type: str
        """

        self._released_by = released_by

    @property
    def released_on(self):
        """Gets the released_on of this ReleasedForm.  # noqa: E501


        :return: The released_on of this ReleasedForm.  # noqa: E501
        :rtype: datetime
        """
        return self._released_on

    @released_on.setter
    def released_on(self, released_on):
        """Sets the released_on of this ReleasedForm.


        :param released_on: The released_on of this ReleasedForm.  # noqa: E501
        :type: datetime
        """

        self._released_on = released_on

    @property
    def v(self):
        """Gets the v of this ReleasedForm.  # noqa: E501


        :return: The v of this ReleasedForm.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this ReleasedForm.


        :param v: The v of this ReleasedForm.  # noqa: E501
        :type: float
        """

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleasedForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleasedForm):
            return True

        return self.to_dict() != other.to_dict()
