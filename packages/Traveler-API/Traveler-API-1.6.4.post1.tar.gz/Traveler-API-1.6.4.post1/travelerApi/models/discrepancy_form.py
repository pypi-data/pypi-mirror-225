# coding: utf-8

"""
    Traveler API

    The API that provides access to Traveler data.  # noqa: E501

    The version of the OpenAPI document: APS-1.6.4
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from travelerApi.configuration import Configuration


class DiscrepancyForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'v': 'float',
        'activated_on': 'list[str]',
        'html': 'str',
        'labels': 'dict(str, str)',
        'mapping': 'dict(str, str)',
        'reference': 'str'
    }

    attribute_map = {
        'id': '_id',
        'v': '_v',
        'activated_on': 'activatedOn',
        'html': 'html',
        'labels': 'labels',
        'mapping': 'mapping',
        'reference': 'reference'
    }

    def __init__(self, id=None, v=None, activated_on=None, html=None, labels=None, mapping=None, reference=None, local_vars_configuration=None):  # noqa: E501
        """DiscrepancyForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._v = None
        self._activated_on = None
        self._html = None
        self._labels = None
        self._mapping = None
        self._reference = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if v is not None:
            self.v = v
        if activated_on is not None:
            self.activated_on = activated_on
        if html is not None:
            self.html = html
        if labels is not None:
            self.labels = labels
        if mapping is not None:
            self.mapping = mapping
        if reference is not None:
            self.reference = reference

    @property
    def id(self):
        """Gets the id of this DiscrepancyForm.  # noqa: E501


        :return: The id of this DiscrepancyForm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscrepancyForm.


        :param id: The id of this DiscrepancyForm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def v(self):
        """Gets the v of this DiscrepancyForm.  # noqa: E501


        :return: The v of this DiscrepancyForm.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this DiscrepancyForm.


        :param v: The v of this DiscrepancyForm.  # noqa: E501
        :type: float
        """

        self._v = v

    @property
    def activated_on(self):
        """Gets the activated_on of this DiscrepancyForm.  # noqa: E501


        :return: The activated_on of this DiscrepancyForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._activated_on

    @activated_on.setter
    def activated_on(self, activated_on):
        """Sets the activated_on of this DiscrepancyForm.


        :param activated_on: The activated_on of this DiscrepancyForm.  # noqa: E501
        :type: list[str]
        """

        self._activated_on = activated_on

    @property
    def html(self):
        """Gets the html of this DiscrepancyForm.  # noqa: E501


        :return: The html of this DiscrepancyForm.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this DiscrepancyForm.


        :param html: The html of this DiscrepancyForm.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def labels(self):
        """Gets the labels of this DiscrepancyForm.  # noqa: E501


        :return: The labels of this DiscrepancyForm.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DiscrepancyForm.


        :param labels: The labels of this DiscrepancyForm.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def mapping(self):
        """Gets the mapping of this DiscrepancyForm.  # noqa: E501


        :return: The mapping of this DiscrepancyForm.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this DiscrepancyForm.


        :param mapping: The mapping of this DiscrepancyForm.  # noqa: E501
        :type: dict(str, str)
        """

        self._mapping = mapping

    @property
    def reference(self):
        """Gets the reference of this DiscrepancyForm.  # noqa: E501


        :return: The reference of this DiscrepancyForm.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this DiscrepancyForm.


        :param reference: The reference of this DiscrepancyForm.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscrepancyForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscrepancyForm):
            return True

        return self.to_dict() != other.to_dict()
