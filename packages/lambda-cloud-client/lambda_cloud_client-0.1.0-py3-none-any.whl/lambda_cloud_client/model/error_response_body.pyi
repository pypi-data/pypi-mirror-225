# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_cloud_client import schemas  # noqa: F401


class ErrorResponseBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "error",
        }
        
        class properties:
        
            @staticmethod
            def error() -> typing.Type['Error']:
                return Error
            
            
            class field_errors(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['Error']:
                        return Error
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'Error':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Error':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Error',
                ) -> 'field_errors':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "error": error,
                "field_errors": field_errors,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    error: 'Error'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_errors"]) -> MetaOapg.properties.field_errors: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["field_errors"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_errors"]) -> typing.Union[MetaOapg.properties.field_errors, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["field_errors"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        error: 'Error',
        field_errors: typing.Union[MetaOapg.properties.field_errors, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ErrorResponseBody':
        return super().__new__(
            cls,
            *_args,
            error=error,
            field_errors=field_errors,
            _configuration=_configuration,
        )

from lambda_cloud_client.model.error import Error
