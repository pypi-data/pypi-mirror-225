# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_cloud_client import schemas  # noqa: F401


class Error(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "code",
            "message",
        }
        
        class properties:
        
            @staticmethod
            def code() -> typing.Type['ErrorCode']:
                return ErrorCode
            message = schemas.StrSchema
            
            
            class suggestion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'suggestion':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "code": code,
                "message": message,
                "suggestion": suggestion,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    code: 'ErrorCode'
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> 'ErrorCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestion"]) -> MetaOapg.properties.suggestion: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code"], typing_extensions.Literal["message"], typing_extensions.Literal["suggestion"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> 'ErrorCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestion"]) -> typing.Union[MetaOapg.properties.suggestion, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code"], typing_extensions.Literal["message"], typing_extensions.Literal["suggestion"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        code: 'ErrorCode',
        message: typing.Union[MetaOapg.properties.message, str, ],
        suggestion: typing.Union[MetaOapg.properties.suggestion, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Error':
        return super().__new__(
            cls,
            *_args,
            code=code,
            message=message,
            suggestion=suggestion,
            _configuration=_configuration,
        )

from lambda_cloud_client.model.error_code import ErrorCode
