# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_cloud_client import schemas  # noqa: F401


class InstanceType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Hardware configuration and pricing of an instance type
    """


    class MetaOapg:
        required = {
            "specs",
            "name",
            "description",
            "price_cents_per_hour",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            price_cents_per_hour = schemas.IntSchema
            
            
            class specs(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "memory_gib",
                        "vcpus",
                        "storage_gib",
                    }
                    
                    class properties:
                        vcpus = schemas.IntSchema
                        memory_gib = schemas.IntSchema
                        storage_gib = schemas.IntSchema
                        __annotations__ = {
                            "vcpus": vcpus,
                            "memory_gib": memory_gib,
                            "storage_gib": storage_gib,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                memory_gib: MetaOapg.properties.memory_gib
                vcpus: MetaOapg.properties.vcpus
                storage_gib: MetaOapg.properties.storage_gib
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["memory_gib"]) -> MetaOapg.properties.memory_gib: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["vcpus"]) -> MetaOapg.properties.vcpus: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["storage_gib"]) -> MetaOapg.properties.storage_gib: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["memory_gib"], typing_extensions.Literal["vcpus"], typing_extensions.Literal["storage_gib"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["memory_gib"]) -> MetaOapg.properties.memory_gib: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["vcpus"]) -> MetaOapg.properties.vcpus: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["storage_gib"]) -> MetaOapg.properties.storage_gib: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["memory_gib"], typing_extensions.Literal["vcpus"], typing_extensions.Literal["storage_gib"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    memory_gib: typing.Union[MetaOapg.properties.memory_gib, decimal.Decimal, int, ],
                    vcpus: typing.Union[MetaOapg.properties.vcpus, decimal.Decimal, int, ],
                    storage_gib: typing.Union[MetaOapg.properties.storage_gib, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'specs':
                    return super().__new__(
                        cls,
                        *_args,
                        memory_gib=memory_gib,
                        vcpus=vcpus,
                        storage_gib=storage_gib,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "description": description,
                "price_cents_per_hour": price_cents_per_hour,
                "specs": specs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    specs: MetaOapg.properties.specs
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    price_cents_per_hour: MetaOapg.properties.price_cents_per_hour
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specs"]) -> MetaOapg.properties.specs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_cents_per_hour"]) -> MetaOapg.properties.price_cents_per_hour: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["specs"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["price_cents_per_hour"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specs"]) -> MetaOapg.properties.specs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_cents_per_hour"]) -> MetaOapg.properties.price_cents_per_hour: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["specs"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["price_cents_per_hour"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        specs: typing.Union[MetaOapg.properties.specs, dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        price_cents_per_hour: typing.Union[MetaOapg.properties.price_cents_per_hour, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InstanceType':
        return super().__new__(
            cls,
            *_args,
            specs=specs,
            name=name,
            description=description,
            price_cents_per_hour=price_cents_per_hour,
            _configuration=_configuration,
        )
