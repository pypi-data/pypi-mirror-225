# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lambda_cloud_client import schemas  # noqa: F401


class FileSystem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about a shared file system
    """


    class MetaOapg:
        required = {
            "is_in_use",
            "created",
            "mount_point",
            "name",
            "id",
            "region",
            "created_by",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            created = schemas.StrSchema
        
            @staticmethod
            def created_by() -> typing.Type['User']:
                return User
            mount_point = schemas.StrSchema
        
            @staticmethod
            def region() -> typing.Type['Region']:
                return Region
            is_in_use = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "created": created,
                "created_by": created_by,
                "mount_point": mount_point,
                "region": region,
                "is_in_use": is_in_use,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    is_in_use: MetaOapg.properties.is_in_use
    created: MetaOapg.properties.created
    mount_point: MetaOapg.properties.mount_point
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    region: 'Region'
    created_by: 'User'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_in_use"]) -> MetaOapg.properties.is_in_use: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mount_point"]) -> MetaOapg.properties.mount_point: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> 'Region': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> 'User': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_in_use"], typing_extensions.Literal["created"], typing_extensions.Literal["mount_point"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["region"], typing_extensions.Literal["created_by"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_in_use"]) -> MetaOapg.properties.is_in_use: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mount_point"]) -> MetaOapg.properties.mount_point: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> 'Region': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> 'User': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_in_use"], typing_extensions.Literal["created"], typing_extensions.Literal["mount_point"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["region"], typing_extensions.Literal["created_by"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        is_in_use: typing.Union[MetaOapg.properties.is_in_use, bool, ],
        created: typing.Union[MetaOapg.properties.created, str, ],
        mount_point: typing.Union[MetaOapg.properties.mount_point, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        region: 'Region',
        created_by: 'User',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FileSystem':
        return super().__new__(
            cls,
            *_args,
            is_in_use=is_in_use,
            created=created,
            mount_point=mount_point,
            name=name,
            id=id,
            region=region,
            created_by=created_by,
            _configuration=_configuration,
        )

from lambda_cloud_client.model.region import Region
from lambda_cloud_client.model.user import User
