{"version":3,"sources":["Icon.tsx","RtOptionMenu.tsx","index.tsx"],"names":["Icon","_ref","iconName","props","_objectWithoutProperties","_excluded","BootstrapIcon","icons","iconStyle","_objectSpread","style","visibility","React","createElement","size","RtOptionMenu","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","call","render","choices","args","options","selectedChoice","state","orientation","elementStyle","padding","flex","background","cursor","textAlign","userSelect","selectedElementStyle","borderRadius","color","display","flexDirection","alignItems","justifyContent","columnGap","backgroundColor","map","choice","index","key","onClick","handleChoiceClick","marginTop","width","fontWeight","leftIconStyle","marginLeft","marginRight","rightIconStyle","textStyle","fontSize","links","leftIcon","rightIcon","link","Array","isArray","undefined","handleLinkClick","window","open","clickedChoice","setState","prevState","Streamlit","setComponentValue","default","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88bccac5.chunk.js","sourcesContent":["import React from 'react';\nimport * as icons from 'react-bootstrap-icons';\n\ninterface IconProps extends icons.IconProps {\n  // Cannot use \"name\" as it is a valid SVG attribute\n  // \"iconName\", \"filename\", \"icon\" will do it instead\n  iconName: keyof typeof icons;\n  size: number;\n  style: any;\n}\n\nexport const Icon = ({ iconName, ...props }: IconProps) => {\n  let BootstrapIcon = icons[iconName];\n  const iconStyle = { ...props.style };\n  if (!BootstrapIcon){\n    iconStyle.visibility = 'hidden';\n    BootstrapIcon = icons['XCircleFill']\n  }\n  return <BootstrapIcon size={props.size} style={iconStyle} />;\n}","// @ts-nocheck\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { Icon } from \"./Icon\";\n\ninterface State {\n  selectedChoice: string\n}\n\ninterface ComponentOptions {\n  orientation?: string;\n  icons?: string[];\n  links?: string[];\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass RtOptionMenu extends StreamlitComponentBase<State> {\n  constructor(props: any) {\n    super(props);\n\n    if (props.args.default) {\n      this.state = { selectedChoice: props.args.default };\n    }\n\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const choices: string[] = this.props.args[\"choices\"];\n    const options: ComponentOptions = this.props.args[\"options\"] || {};\n\n    const selectedChoice = this.state.selectedChoice;\n\n    if (options.orientation === 'horizontal') {\n      const containerStyle = {\n        display: 'flex',\n        flexDirection: 'row' as 'row',\n        alignItems: 'center',\n        justifyContent: 'space-evenly',\n        columnGap: '0.5em',\n        backgroundColor: 'rgb(240,240,240)',\n        padding: '0.5em',\n        borderRadius: '10px'\n      }\n      const elementStyle = {\n        padding: '0.25em',\n        flex: 1,\n        background: 'rgb(237,240,244)',\n        cursor: 'pointer',\n        textAlign: 'center',\n        userSelect: 'none' as 'none',\n      }\n      const selectedElementStyle = {\n        ...elementStyle,\n        background: 'rgba(107, 101, 255)',\n        borderRadius: '10px',\n        color: 'white',\n      }\n      return (\n        <div style={containerStyle}>\n          {choices.map((choice, index) => {\n            return <div key={index} style={selectedChoice === choice ? selectedElementStyle : elementStyle} onClick={() => this.handleChoiceClick(choice)}>{choice}</div>\n          })}\n        </div>\n      )\n    }\n    // vertical style\n    else{\n      const containerStyle = {\n        display: 'flex',\n        flexDirection: 'column' as 'column',\n        justifyContent: 'space-evenly',\n        alignItems: 'flex-start',\n      }\n      const elementStyle = {\n        display: 'flex',\n        flexDirection: 'row' as 'row',\n        alignItems: 'flex-start',\n        marginTop: '1em',\n        width: '100%',\n        padding: '0.5em',\n        userSelect: 'none' as 'none',\n        cursor: 'pointer',\n      }\n      const selectedElementStyle = {\n        ...elementStyle,\n        background: 'rgba(107, 101, 255, 0.1)',\n        fontWeight: 500\n      }\n      const leftIconStyle = {\n        marginLeft: '0.5em',\n        marginRight: '2em',\n      }\n      const rightIconStyle = {\n        marginLeft: 'auto'\n      }\n      const textStyle = {\n        fontSize: '15px',\n      }\n      const icons = options.icons || [];\n      const links = options.links || [];\n      return (\n        <div style={containerStyle}>\n          {choices.map((choice, index) => {\n            let leftIcon, rightIcon;\n            let link = links[index];\n\n            if (Array.isArray(icons[index])){\n              leftIcon = icons[index][0];\n              rightIcon = icons[index][1];\n            }\n            else {\n              leftIcon = icons[index];\n              rightIcon = undefined;\n            }\n\n            if (selectedChoice === choice){\n              return <div key={choice} onClick={() => this.handleChoiceClick(choice)} style={selectedElementStyle}><Icon iconName={leftIcon} size={25} style={leftIconStyle}/><span style={textStyle}>{choice}</span><Icon iconName={rightIcon} size={25} style={rightIconStyle}/></div>\n            }\n            else{\n              if (!(link)){\n                return <div key={choice}  onClick={() => this.handleChoiceClick(choice)} style={elementStyle}><Icon iconName={leftIcon} size={25} style={leftIconStyle}/><span style={textStyle}>{choice}</span><Icon iconName={rightIcon} size={25} style={rightIconStyle}/></div>\n              }\n              else{\n                return <div key={choice}  onClick={() => this.handleLinkClick(link)} style={elementStyle}><Icon iconName={leftIcon} size={25} style={leftIconStyle}/><span style={textStyle}>{choice}</span><Icon iconName={rightIcon} size={25} style={rightIconStyle}/></div>\n              }\n            }\n          })}\n        </div>\n      )\n    }\n  }\n\n  private handleLinkClick = (link: string): void => {\n    window.open(link, '_blank');\n  }\n\n  private handleChoiceClick = (clickedChoice: string): void => {\n    this.setState({ selectedChoice: clickedChoice })\n\n    this.setState(\n      prevState => ({selectedChoice: clickedChoice}),\n      () => Streamlit.setComponentValue(this.state.selectedChoice)\n    )\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RtOptionMenu)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RtOptionMenu from \"./RtOptionMenu\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <RtOptionMenu />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}