# Configuration file used in tests

_workdir: !env IO_TEST_TMP
_project: !env IO_TEST_PROJECT_ROOT

# File-systems options
filesystems:
  # Options entry for 'test-bucket', you can have any name here
  test_bucket:
    # the regex to match against the location URL
    match: "s3://test-bucket/.*"

    # everything below here is returned as part of the options map
    endpoint_url: http://localhost:4566

datasets:
  source:
    customers_1k:
      location: https://github.com/cjalmeida/gamma-io/raw/main/samples/customers-1000.zip
      format: csv
      compression: zip

    customers_1k_plain:
      location: https://github.com/cjalmeida/gamma-io/raw/main/samples/customers-1000.csv
      format: csv

    customers_1k_local:
      location: !j2 "file://{{c._project}}/samples/customers-1000.zip"
      format: csv
      compression: zip

  raw:
    customers:
      location: !j2 "file://{{ c._workdir }}/data/customers"
      format: parquet
      compression: snappy # for Spark compat
      partition_by: [cluster]

    customers_feather:
      location: !j2 "file://{{ c._workdir }}/data/customers_feather"
      format: feather
      compression: zstd
      partition_by: [cluster]

    customers_csv:
      location: !j2 "file://{{ c._workdir }}/data/customers.csv.gz"
      format: csv
      compression: gzip

    customers_csv_plain:
      location: !j2 "file://{{ c._workdir }}/data/customers.csv"
      format: csv

    customers_excel:
      location: !j2 "file://{{ c._workdir }}/data/customers.xlsx"
      format: excel

    customers_s3:
      location: "s3://test-bucket/customers"
      format: parquet
      compression: snappy # for Spark compat
      partition_by: [cluster]

    customers_sql_table:
      # format for sql connections is `sql:{sqlalchemy url}`
      # see https://docs.sqlalchemy.org/en/20/core/engines.html#sqlite
      location: !j2 "sql:sqlite:///{{ c._workdir }}/sql/data.db"

      # allow writing a full dataframe as table
      format: sql_table

      # read/write arguments. 'name' is mandatory for sql_table
      args:
        name: customers

      # SQLAlchemy create_engine conn arguments
      engine_args:
        echo: false

    customers_sql_query:
      location: !j2 "sql:sqlite:///{{ c._workdir }}/sql/data.db"
      format: sql_query
      args:
        sql: !j2 "file://{{ c._project }}/samples/customers.sql"
