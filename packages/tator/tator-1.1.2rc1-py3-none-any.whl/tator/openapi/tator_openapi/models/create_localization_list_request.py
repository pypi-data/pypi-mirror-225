# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import pprint
import re  # noqa: F401

from ..configuration import Configuration


class CreateLocalizationListRequest(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'media_id': 'int',
        'type': 'int',
        'version': 'int',
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'u': 'float',
        'v': 'float',
        'points': 'List[List[float]]',
        'frame': 'int',
        'parent': 'float',
        'elemental_id': 'str',
        'attributes': 'Dict[str, AttributeValue]',
        'user_elemental_id': 'str',
    }

    attribute_map = {
        'media_id': 'media_id',
        'type': 'type',
        'version': 'version',
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'u': 'u',
        'v': 'v',
        'points': 'points',
        'frame': 'frame',
        'parent': 'parent',
        'elemental_id': 'elemental_id',
        'attributes': 'attributes',
        'user_elemental_id': 'user_elemental_id',
    }

    def __init__(self, media_id=None, type=None, version=None, x=None, y=None, width=None, height=None, u=None, v=None, points=None, frame=None, parent=None, elemental_id=None, attributes=None, user_elemental_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateLocalizationListRequest - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._media_id = None
        self._type = None
        self._version = None
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._u = None
        self._v = None
        self._points = None
        self._frame = None
        self._parent = None
        self._elemental_id = None
        self._attributes = None
        self._user_elemental_id = None
        self.discriminator = None

        self.media_id = media_id
        self.type = type
        if version is not None:
            self.version = version
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.u = u
        self.v = v
        self.points = points
        self.frame = frame
        self.parent = parent
        self.elemental_id = elemental_id
        if attributes is not None:
            self.attributes = attributes
        if user_elemental_id is not None:
            self.user_elemental_id = user_elemental_id

    @property
    def media_id(self):
        """
        Unique integer identifying a media.

        :return: The media_id of this CreateLocalizationListRequest. 
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """
        Unique integer identifying a media.

        :param media_id: The media_id of this CreateLocalizationListRequest.
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and media_id is None:  # noqa: E501
            raise ValueError("Invalid value for `media_id`, must not be `None`")  # noqa: E501

        self._media_id = media_id

    @property
    def type(self):
        """
        Unique integer identifying a localization type.

        :return: The type of this CreateLocalizationListRequest. 
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Unique integer identifying a localization type.

        :param type: The type of this CreateLocalizationListRequest.
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """
        Unique integer identifying the version.

        :return: The version of this CreateLocalizationListRequest. 
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Unique integer identifying the version.

        :param version: The version of this CreateLocalizationListRequest.
        :type: int
        """

        self._version = version

    @property
    def x(self):
        """
        Normalized horizontal position of left edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :return: The x of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """
        Normalized horizontal position of left edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :param x: The x of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """
        Normalized vertical position of top edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :return: The y of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """
        Normalized vertical position of top edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :param y: The y of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._y = y

    @property
    def width(self):
        """
        Normalized width of bounding box for `box` localization types.

        :return: The width of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Normalized width of bounding box for `box` localization types.

        :param width: The width of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """
        Normalized height of bounding box for `box` localization types.

        :return: The height of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Normalized height of bounding box for `box` localization types.

        :param height: The height of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._height = height

    @property
    def u(self):
        """
        Horizontal vector component for `line` localization types.

        :return: The u of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._u

    @u.setter
    def u(self, u):
        """
        Horizontal vector component for `line` localization types.

        :param u: The u of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                u is not None and u > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `u`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                u is not None and u < -1.0):  # noqa: E501
            raise ValueError("Invalid value for `u`, must be a value greater than or equal to `-1.0`")  # noqa: E501

        self._u = u

    @property
    def v(self):
        """
        Vertical vector component for `line` localization types.

        :return: The v of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Vertical vector component for `line` localization types.

        :param v: The v of this CreateLocalizationListRequest.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                v is not None and v > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `v`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                v is not None and v < -1.0):  # noqa: E501
            raise ValueError("Invalid value for `v`, must be a value greater than or equal to `-1.0`")  # noqa: E501

        self._v = v

    @property
    def points(self):
        """
        List of normalized [x, y] pairs for `poly` localization types.

        :return: The points of this CreateLocalizationListRequest. 
        :rtype: List[List[float]]
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        List of normalized [x, y] pairs for `poly` localization types.

        :param points: The points of this CreateLocalizationListRequest.
        :type: List[List[float]]
        """

        self._points = points

    @property
    def frame(self):
        """
        Frame number of this localization if it is in a video.

        :return: The frame of this CreateLocalizationListRequest. 
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """
        Frame number of this localization if it is in a video.

        :param frame: The frame of this CreateLocalizationListRequest.
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and frame is None:  # noqa: E501
            raise ValueError("Invalid value for `frame`, must not be `None`")  # noqa: E501

        self._frame = frame

    @property
    def parent(self):
        """
        If a clone, the pk of the parent.

        :return: The parent of this CreateLocalizationListRequest. 
        :rtype: float
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        If a clone, the pk of the parent.

        :param parent: The parent of this CreateLocalizationListRequest.
        :type: float
        """

        self._parent = parent

    @property
    def elemental_id(self):
        """
        The elemental ID of the object.

        :return: The elemental_id of this CreateLocalizationListRequest. 
        :rtype: str
        """
        return self._elemental_id

    @elemental_id.setter
    def elemental_id(self, elemental_id):
        """
        The elemental ID of the object.

        :param elemental_id: The elemental_id of this CreateLocalizationListRequest.
        :type: str
        """

        self._elemental_id = elemental_id

    @property
    def attributes(self):
        """
        Object containing attribute values.

        :return: The attributes of this CreateLocalizationListRequest. 
        :rtype: Dict[str, AttributeValue]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Object containing attribute values.

        :param attributes: The attributes of this CreateLocalizationListRequest.
        :type: Dict[str, AttributeValue]
        """

        self._attributes = attributes

    @property
    def user_elemental_id(self):
        """
        Unique ID of the original user who created this. If permissions allow, will change the creating user to the one referenced by this elemental_id

        :return: The user_elemental_id of this CreateLocalizationListRequest. 
        :rtype: str
        """
        return self._user_elemental_id

    @user_elemental_id.setter
    def user_elemental_id(self, user_elemental_id):
        """
        Unique ID of the original user who created this. If permissions allow, will change the creating user to the one referenced by this elemental_id

        :param user_elemental_id: The user_elemental_id of this CreateLocalizationListRequest.
        :type: str
        """

        self._user_elemental_id = user_elemental_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLocalizationListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateLocalizationListRequest):
            return True

        return self.to_dict() != other.to_dict()
