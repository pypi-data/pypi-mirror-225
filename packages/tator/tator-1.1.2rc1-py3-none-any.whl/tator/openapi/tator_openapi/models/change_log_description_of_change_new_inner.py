# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import pprint
import re  # noqa: F401

from ..configuration import Configuration


class ChangeLogDescriptionOfChangeNewInner(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value': 'AttributeValue',
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
    }

    def __init__(self, name=None, value=None, local_vars_configuration=None):  # noqa: E501
        """ChangeLogDescriptionOfChangeNewInner - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.value = value

    @property
    def name(self):
        """
        The name of the changed property

        :return: The name of this ChangeLogDescriptionOfChangeNewInner. 
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        The name of the changed property

        :param name: The name of this ChangeLogDescriptionOfChangeNewInner.
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """

        :return: The value of this ChangeLogDescriptionOfChangeNewInner. 
        :rtype: AttributeValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """

        :param value: The value of this ChangeLogDescriptionOfChangeNewInner.
        :type: AttributeValue
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeLogDescriptionOfChangeNewInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeLogDescriptionOfChangeNewInner):
            return True

        return self.to_dict() != other.to_dict()
