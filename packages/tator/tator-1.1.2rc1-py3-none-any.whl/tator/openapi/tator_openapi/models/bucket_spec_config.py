# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import pprint
import re  # noqa: F401

from ..configuration import Configuration


class BucketSpecConfig(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'project_id': 'str',
        'private_key_id': 'str',
        'private_key': 'str',
        'client_email': 'str',
        'client_id': 'str',
        'auth_uri': 'str',
        'token_uri': 'str',
        'auth_provider_x509_cert_url': 'str',
        'client_x509_cert_url': 'str',
        'boto3_config': 'BucketS3Config',
        'native_config': 'BucketOCINativeConfig',
        'endpoint_url': 'str',
        'region_name': 'str',
        'aws_access_key_id': 'str',
        'aws_secret_access_key': 'str',
    }

    attribute_map = {
        'type': 'type',
        'project_id': 'project_id',
        'private_key_id': 'private_key_id',
        'private_key': 'private_key',
        'client_email': 'client_email',
        'client_id': 'client_id',
        'auth_uri': 'auth_uri',
        'token_uri': 'token_uri',
        'auth_provider_x509_cert_url': 'auth_provider_x509_cert_url',
        'client_x509_cert_url': 'client_x509_cert_url',
        'boto3_config': 'boto3_config',
        'native_config': 'native_config',
        'endpoint_url': 'endpoint_url',
        'region_name': 'region_name',
        'aws_access_key_id': 'aws_access_key_id',
        'aws_secret_access_key': 'aws_secret_access_key',
    }

    def __init__(self, type=None, project_id=None, private_key_id=None, private_key=None, client_email=None, client_id=None, auth_uri=None, token_uri=None, auth_provider_x509_cert_url=None, client_x509_cert_url=None, boto3_config=None, native_config=None, endpoint_url=None, region_name=None, aws_access_key_id=None, aws_secret_access_key=None, local_vars_configuration=None):  # noqa: E501
        """BucketSpecConfig - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._project_id = None
        self._private_key_id = None
        self._private_key = None
        self._client_email = None
        self._client_id = None
        self._auth_uri = None
        self._token_uri = None
        self._auth_provider_x509_cert_url = None
        self._client_x509_cert_url = None
        self._boto3_config = None
        self._native_config = None
        self._endpoint_url = None
        self._region_name = None
        self._aws_access_key_id = None
        self._aws_secret_access_key = None
        self.discriminator = None

        self.type = type
        self.project_id = project_id
        self.private_key_id = private_key_id
        self.private_key = private_key
        self.client_email = client_email
        self.client_id = client_id
        self.auth_uri = auth_uri
        self.token_uri = token_uri
        self.auth_provider_x509_cert_url = auth_provider_x509_cert_url
        self.client_x509_cert_url = client_x509_cert_url
        self.boto3_config = boto3_config
        self.native_config = native_config
        self.endpoint_url = endpoint_url
        self.region_name = region_name
        self.aws_access_key_id = aws_access_key_id
        self.aws_secret_access_key = aws_secret_access_key

    @property
    def type(self):
        """
        Type of account, should be `service_account`.

        :return: The type of this BucketSpecConfig. 
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Type of account, should be `service_account`.

        :param type: The type of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def project_id(self):
        """
        GCP project id.

        :return: The project_id of this BucketSpecConfig. 
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        GCP project id.

        :param project_id: The project_id of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def private_key_id(self):
        """
        Account secret key.

        :return: The private_key_id of this BucketSpecConfig. 
        :rtype: str
        """
        return self._private_key_id

    @private_key_id.setter
    def private_key_id(self, private_key_id):
        """
        Account secret key.

        :param private_key_id: The private_key_id of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and private_key_id is None:  # noqa: E501
            raise ValueError("Invalid value for `private_key_id`, must not be `None`")  # noqa: E501

        self._private_key_id = private_key_id

    @property
    def private_key(self):
        """
        Account access key.

        :return: The private_key of this BucketSpecConfig. 
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """
        Account access key.

        :param private_key: The private_key of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and private_key is None:  # noqa: E501
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    @property
    def client_email(self):
        """
        Email address associated with the service account.

        :return: The client_email of this BucketSpecConfig. 
        :rtype: str
        """
        return self._client_email

    @client_email.setter
    def client_email(self, client_email):
        """
        Email address associated with the service account.

        :param client_email: The client_email of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_email is None:  # noqa: E501
            raise ValueError("Invalid value for `client_email`, must not be `None`")  # noqa: E501

        self._client_email = client_email

    @property
    def client_id(self):
        """
        ID of the client account.

        :return: The client_id of this BucketSpecConfig. 
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        ID of the client account.

        :param client_id: The client_id of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def auth_uri(self):
        """
        Authorization URI.

        :return: The auth_uri of this BucketSpecConfig. 
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """
        Authorization URI.

        :param auth_uri: The auth_uri of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and auth_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_uri`, must not be `None`")  # noqa: E501

        self._auth_uri = auth_uri

    @property
    def token_uri(self):
        """
        Token URI.

        :return: The token_uri of this BucketSpecConfig. 
        :rtype: str
        """
        return self._token_uri

    @token_uri.setter
    def token_uri(self, token_uri):
        """
        Token URI.

        :param token_uri: The token_uri of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `token_uri`, must not be `None`")  # noqa: E501

        self._token_uri = token_uri

    @property
    def auth_provider_x509_cert_url(self):
        """
        Provider cert url.

        :return: The auth_provider_x509_cert_url of this BucketSpecConfig. 
        :rtype: str
        """
        return self._auth_provider_x509_cert_url

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, auth_provider_x509_cert_url):
        """
        Provider cert url.

        :param auth_provider_x509_cert_url: The auth_provider_x509_cert_url of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and auth_provider_x509_cert_url is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_provider_x509_cert_url`, must not be `None`")  # noqa: E501

        self._auth_provider_x509_cert_url = auth_provider_x509_cert_url

    @property
    def client_x509_cert_url(self):
        """
        Client cert url.

        :return: The client_x509_cert_url of this BucketSpecConfig. 
        :rtype: str
        """
        return self._client_x509_cert_url

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, client_x509_cert_url):
        """
        Client cert url.

        :param client_x509_cert_url: The client_x509_cert_url of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_x509_cert_url is None:  # noqa: E501
            raise ValueError("Invalid value for `client_x509_cert_url`, must not be `None`")  # noqa: E501

        self._client_x509_cert_url = client_x509_cert_url

    @property
    def boto3_config(self):
        """

        :return: The boto3_config of this BucketSpecConfig. 
        :rtype: BucketS3Config
        """
        return self._boto3_config

    @boto3_config.setter
    def boto3_config(self, boto3_config):
        """

        :param boto3_config: The boto3_config of this BucketSpecConfig.
        :type: BucketS3Config
        """
        if self.local_vars_configuration.client_side_validation and boto3_config is None:  # noqa: E501
            raise ValueError("Invalid value for `boto3_config`, must not be `None`")  # noqa: E501

        self._boto3_config = boto3_config

    @property
    def native_config(self):
        """

        :return: The native_config of this BucketSpecConfig. 
        :rtype: BucketOCINativeConfig
        """
        return self._native_config

    @native_config.setter
    def native_config(self, native_config):
        """

        :param native_config: The native_config of this BucketSpecConfig.
        :type: BucketOCINativeConfig
        """
        if self.local_vars_configuration.client_side_validation and native_config is None:  # noqa: E501
            raise ValueError("Invalid value for `native_config`, must not be `None`")  # noqa: E501

        self._native_config = native_config

    @property
    def endpoint_url(self):
        """
        Endpoint URL for bucket.

        :return: The endpoint_url of this BucketSpecConfig. 
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """
        Endpoint URL for bucket.

        :param endpoint_url: The endpoint_url of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and endpoint_url is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoint_url`, must not be `None`")  # noqa: E501

        self._endpoint_url = endpoint_url

    @property
    def region_name(self):
        """
        Bucket region.

        :return: The region_name of this BucketSpecConfig. 
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """
        Bucket region.

        :param region_name: The region_name of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region_name is None:  # noqa: E501
            raise ValueError("Invalid value for `region_name`, must not be `None`")  # noqa: E501

        self._region_name = region_name

    @property
    def aws_access_key_id(self):
        """
        Account access key.

        :return: The aws_access_key_id of this BucketSpecConfig. 
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """
        Account access key.

        :param aws_access_key_id: The aws_access_key_id of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and aws_access_key_id is None:  # noqa: E501
            raise ValueError("Invalid value for `aws_access_key_id`, must not be `None`")  # noqa: E501

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_secret_access_key(self):
        """
        Account secret key.

        :return: The aws_secret_access_key of this BucketSpecConfig. 
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """
        Account secret key.

        :param aws_secret_access_key: The aws_secret_access_key of this BucketSpecConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and aws_secret_access_key is None:  # noqa: E501
            raise ValueError("Invalid value for `aws_secret_access_key`, must not be `None`")  # noqa: E501

        self._aws_secret_access_key = aws_secret_access_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketSpecConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BucketSpecConfig):
            return True

        return self.to_dict() != other.to_dict()
