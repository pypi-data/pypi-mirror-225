from uuid import uuid4
from typing import Any, List, Optional, Union

import discord
from discord import ui


TIMEOUT: float = 600.0


def get_custom_id(class_name: str) -> str:
    return f"{class_name}:{uuid4()}"


class Modal(ui.Modal):
    def __init__(
        self,
        *,
        title: str,
        timeout: float = TIMEOUT,
        custom_id: Optional[str] = None,
    ) -> None:
        super().__init__(
            title=title,
            timeout=timeout,
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
        )

    async def on_error(self, itr: discord.Interaction, error: Exception) -> None:
        print(f"Error from Modal component {self.__class__.__name__}:\n{str(error)}")
        await super().on_error(itr, error)


class TextInput(ui.TextInput):
    def __init__(
        self,
        *,
        label: str,
        style: discord.TextStyle = discord.TextStyle.short,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        default: Optional[str] = None,
        required: bool = True,
        min_length: Optional[int] = None,
        max_length: Optional[int] = None,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            label=label,
            style=style,
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            placeholder=placeholder,
            default=default,
            required=required,
            min_length=min_length,
            max_length=max_length,
            row=row,
        )


class View(ui.View):
    edited: bool = False
    message: Optional[discord.Message]

    def __init__(
        self,
        ctx: Optional[discord.Interaction] = None,
        *,
        timeout: Optional[float] = 180.0,
        personal: bool = False,
    ) -> None:
        self.ctx = ctx
        self.personal = personal
        super().__init__(timeout=timeout)

    def disable_view(self) -> None:
        for child in self.children:
            child.disabled = True  # type: ignore
        self.edited = True

    async def interaction_check(self, itr: discord.Interaction) -> bool:
        if self.personal and self.ctx:
            if itr.user.id != self.ctx.user.id:
                await itr.response.send_message(
                    f"Sorry! This menu belongs to {self.ctx.user.mention}!",
                    ephemeral=True,
                )
                return False
        return True

    async def on_timeout(self) -> None:
        try:
            if not self.edited:
                for child in self.children:
                    child.disabled = True  # type: ignore
                if self.message:
                    await self.message.edit(
                        content="Message components timed out.", view=self
                    )
        except:
            pass

    async def on_error(
        self, itr: discord.Interaction, error: Exception, item: ui.Item[Any]
    ) -> None:
        print(
            f"Error from {item.type} component {item.__class__.__name__}:\n{str(error)}"
        )
        await super().on_error(itr, error, item)


class Button(ui.Button):
    view: View

    def __init__(
        self,
        *,
        style: discord.ButtonStyle = discord.ButtonStyle.secondary,
        label: Optional[str] = None,
        disabled: bool = False,
        custom_id: Optional[str] = None,
        emoji: Optional[Union[str, discord.Emoji, discord.PartialEmoji]] = None,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            style=style,
            label=label,
            disabled=disabled,
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            url=None,
            emoji=emoji,
            row=row,
        )


class URLButton(ui.Button):
    view: View

    def __init__(self, label: str, url: str, row: Optional[int] = None) -> None:
        super().__init__(style=discord.ButtonStyle.url, label=label, url=url, row=row)


class GoToButton(Button):
    def __init__(self, label: str, **kwargs: Any):
        self.kwargs = kwargs
        super().__init__(
            style=self.kwargs.pop("style", discord.ButtonStyle.gray),
            label=label,
            disabled=self.kwargs.pop("disabled", False),
            emoji=self.kwargs.pop("emoji", None),
            row=self.kwargs.pop("row", None),
        )

    async def callback(self, itr: discord.Interaction):
        await itr.response.defer(ephemeral=True)
        if itr.message:
            await itr.message.edit(**self.kwargs)
            self.view.edited = True
        else:
            await itr.edit_original_response(**self.kwargs)
            self.view.edited = True


class DeleteMessage(Button):
    def __init__(
        self,
        style: discord.ButtonStyle = discord.ButtonStyle.red,
        label: Optional[str] = None,
        emoji: Optional[str] = None,
        row: Optional[int] = None,
    ):
        super().__init__(style=style, label=label, emoji=emoji, row=row)

    async def callback(self, itr: discord.Interaction):
        await itr.response.defer(ephemeral=True)
        if itr.message:
            await itr.message.delete()
        else:
            await itr.delete_original_response()


class Select(ui.Select):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        options: List[discord.SelectOption] = discord.utils.MISSING,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            options=options,
            disabled=disabled,
            row=row,
        )


class ChannelSelect(ui.ChannelSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[],  # Defaults to all channel types
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class TextChannelSelect(ui.ChannelSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.text],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class PrivateChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.private],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class VocieChannelSelect(ui.ChannelSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.voice],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class GroupChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.group],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class CategorySelect(ui.ChannelSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.category],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class NewsChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.news],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class ThreadChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[
                discord.ChannelType.news_thread,
                discord.ChannelType.public_thread,
                discord.ChannelType.private_thread,
            ],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class NewsThreadChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.news_thread],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class PublicThreadChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.public_thread],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class PrivateThreadChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.private_thread],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class StageVoiceChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.stage_voice],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class ForumChannelSelect(ui.ChannelSelect):
    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            channel_types=[discord.ChannelType.forum],
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class UserSelect(ui.UserSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class RoleSelect(ui.RoleSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )


class MentionableSelect(ui.MentionableSelect):
    view: View

    def __init__(
        self,
        *,
        custom_id: Optional[str] = None,
        placeholder: Optional[str] = None,
        min_values: int = 1,
        max_values: int = 1,
        disabled: bool = False,
        row: Optional[int] = None,
    ) -> None:
        super().__init__(
            custom_id=custom_id or get_custom_id(self.__class__.__name__),
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            disabled=disabled,
            row=row,
        )
