Metadata-Version: 2.1
Name: grizzly-loadtester-ls
Version: 1.1.0
Summary: LSP server implementation for grizzly-loadtester load scenario development
Author-email: biometria <opensource@biometria.se>
License: MIT
Project-URL: Documentation, https://biometria-se.github.io/grizzly/
Project-URL: Code, https://github.com/biometria-se/grizzly-lsp/
Project-URL: Tracker, https://github.com/Biometria-se/grizzly/issues
Keywords: locust,behave,grizzly,grizzly-loadtester,loadtest,load,performance,traffic generator
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
Provides-Extra: ci
License-File: LICENSE.md

# grizzly-ls

This is the LSP server implementation for Visual Studio Code extension [`biometria-se.grizzly-loadtester-vscode`](https://marketplace.visualstudio.com/items?itemName=biometria-se.grizzly-loadtester-vscode).

It provides the logic for auto-completion of step expressions for your `grizzly-loadtester` project.

Big shout out to [`pygls`](https://pypi.org/project/pygls/) for making the implementation of a LSP server easy!
